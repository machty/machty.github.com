<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Useful Dude]]></title>
  <link href="http://machty.github.com/blog/categories/ember-js/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2013-03-24T13:39:36-04:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NYC Ember.js Meetup Run Loop Slides]]></title>
    <link href="http://machty.github.com/blog/2013/02/28/nyc-ember-dot-js-meetup-run-loop-slides/"/>
    <updated>2013-02-28T21:22:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/02/28/nyc-ember-dot-js-meetup-run-loop-slides</id>
    <content type="html"><![CDATA[<p>Just did a talk on the Ember run loop at the
<a href="http://www.meetup.com/EmberJS-NYC/">NYC Ember.js Meetup</a>.
You can check them out
<a href="http://machty.github.com/blog/ember_run_loop_talk">here</a>.
There's also a blurb on the <code>ember-source</code>, <code>handlebars-source</code> stuff
I <a href="/blog/2013/02/27/gemifying-ember-dot-js-slash-handlebars-dot-js-slash-etc-dot-js/">wrote about
yesterday</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everything You Never Wanted to Know About the Ember Run Loop]]></title>
    <link href="http://machty.github.com/blog/2013/01/12/everything-you-never-wanted-to-know-about-the-ember-run-loop/"/>
    <updated>2013-01-12T13:09:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/01/12/everything-you-never-wanted-to-know-about-the-ember-run-loop</id>
    <content type="html"><![CDATA[<p>Just posted a
<a href="http://stackoverflow.com/questions/13597869/what-is-ember-runloop-and-how-does-it-work/14296339#14296339">Giant Ass Response on Stack Overflow</a> about the Ember Run Loop. I've reproduced the text below. The question basically was: What is the Run Loop? How long does it take? When does it fire up? Can I expect views to be rendered to the DOM by the end of the run loop? etc. etc. Take a look, I think there's some good stuff in there. Without further ado:</p>

<p>First off, read these:</p>

<p><a href="http://blog.sproutcore.com/the-run-loop-part-1/">Sproutcore Run Loop, part 1</a>
<a href="http://blog.sproutcore.com/the-run-loop-part-2/">Sproutcore Run Loop, part 2</a></p>

<p>They're not 100% accurate to Ember, but the core concepts and motivation behind the RunLoop still generally apply to Ember; only some implementation details differ. But, on to your questions:</p>

<!-- more -->


<h3>When does Ember RunLoop start. Is it dependant on Router or Views or Controllers or something else?</h3>

<p>All of the basic user events (e.g. keyboard events, mouse events, etc) will fire up the run loop. This guarantees that whatever changes made to bound properties by the captured (mouse/keyboard/timer/etc) event are fully propagated throughout Ember's data-binding system before returning control back to the system. So, moving your mouse, pressing a key, clicking a button, etc., all launch the run loop.</p>

<h3>how long does it approximately take (I know this is rather silly to asks and dependant on many things but I am looking for a general idea, or maybe if there is a minimum or maximum time a runloop may take)</h3>

<p>At no point will the RunLoop ever keep track of how much time it's taking to propagate all the changes through the system and then halt the RunLoop after reaching a maximum time limit; rather, the RunLoop will always run to completion, and won't stop until all the expired timers have been called, bindings propagated, and perhaps <em>their</em> bindings propagated, and so on. Obviously, the more changes that need to be propagated from a single event, the longer the RunLoop will take to finish. Here's a (pretty unfair) example of how the RunLoop can get bogged down with propagating changes compared to another framework (Backbone) that doesn't have a run loop: http://jsfiddle.net/jashkenas/CGSd5/ . Moral of the story: the RunLoop's really fast for most things you'd ever want to do in Ember, and it's where much of Ember's power lies, but if you find yourself wanting to animate 30 circles with Javascript at 60 frames per second, there might be better ways to go about it than relying on Ember's RunLoop.</p>

<h3>Is RunLoop being executed at all times, or is it just indicating a period of time from beginning to end of execution and may not run for some time.</h3>

<p>It is not executed at all times -- it has to return control back to the system at some point or else your app would hang -- it's different from, say, a run loop on a server that has a <code>while(true)</code> and goes on for infinity until the server gets a signal to shut down... the Ember RunLoop has no such <code>while(true)</code> but is only spun up in response to user/timer events.</p>

<h3>If a view is created from within one RunLoop, is it guaranteed that all its content will make it into the DOM by the time the loop ends?</h3>

<p>Let's see if we can figure that out. One of the big changes from SC to Ember RunLoop is that, instead of looping back and forth between <code>invokeOnce</code> and <code>invokeLast</code> (which you see in the diagram in the first link about SproutCore's RL), Ember provides you a list of 'queues' that, in the course of a run loop, you can schedule actions (functions to be called during the run loop) to by specifying which queue the action belongs in (example from the source: <code>Ember.run.scheduleOnce('render', bindView, 'rerender');</code>).</p>

<p>If you look at <code>run_loop.js</code> in the source code, you see <code>Ember.run.queues = ['sync', 'actions', 'destroy', 'timers'];</code>, yet if you open your JavaScript debugger in the browser in an Ember app and evaluate <code>Ember.run.queues</code>, you get a fuller list of queues: <code>["sync", "actions", "render", "afterRender", "destroy", "timers"]</code>. Ember keeps their codebase pretty modular, and they make it possible for your code, as well as its own code in a separate part of the library, to insert more queues. In this case, the Ember Views library inserts <code>render</code> and <code>afterRender</code> queues, specifically after the <code>actions</code> queue. I'll get to why that might be in a second. First, the RunLoop algorithm:</p>

<p>The RunLoop algorithm is pretty much the same as described in the SC run loop articles above:</p>

<ul>
<li>You run your code between RunLoop <code>.begin()</code> and <code>.end()</code>, only in Ember you'll want to instead run your code within <code>Ember.run</code>, which will internally call <code>begin</code> and <code>end</code> for you. (Only internal run loop code in the Ember code base still uses <code>begin</code> and <code>end</code>, so you should just stick with <code>Ember.run</code>)</li>
<li>After <code>end()</code> is called, the RunLoop then kicks into gear to propagate every single change made by the chunk of code passed to the <code>Ember.run</code> function. This includes propagating the values of bound properties, rendering view changes to the DOM, etc etc. The order in which these actions (binding, rendering DOM elements, etc) are performed is determined by the <code>Ember.run.queues</code> array described above:</li>
<li>The run loop will start off on the first queue, which is <code>sync</code>. It'll run all of the actions that were scheduled into the <code>sync</code> queue by the <code>Ember.run</code> code. These actions may themselves also schedule more actions to be performed during this same RunLoop, and it's up to the RunLoop to make sure it performs every action until all the queues are flushed. The way it does this is, at the end of every queue, the RunLoop will look through all the previously flushed queues and see if any new actions have been scheduled. If so, it has to start at the beginning of the earliest queue with unperformed scheduled actions and flush out the queue, continuing to trace its steps and start over when necessary until all of the queues are completely empty.</li>
</ul>


<p>That's the essence of the algorithm. That's how bound data gets propagated through the app. You can expect that once a RunLoop runs to completion, all of the bound data will be fully propagated. So, what about DOM elements?</p>

<p>The order of the queues, including the ones added in by the Ember Views library, is important here. Notice that <code>render</code> and <code>afterRender</code> come after <code>sync</code>, and <code>action</code>. The <code>sync</code> queue contains all the actions for propagating bound data. (<code>action</code>, after that, is only sparsely used in the Ember source). Based on the above algorithm, it is guaranteed that by the time the RunLoop gets to the <code>render</code> queue, all of the data-bindings will have finished synchronizing. This is by design: you wouldn't want to perform the expensive task of rendering DOM elements <em>before</em> sync'ing the data-bindings, since that would likely require re-rendering DOM elements with updated data -- obviously a very inefficient and error-prone way of emptying all of the RunLoop queues. So Ember intelligently blasts through all the data-binding work it can before rendering the DOM elements in the <code>render</code> queue.</p>

<p>So, finally, to answer your question, yes, you can expect that any necessary DOM renderings will have taken place by the time <code>Ember.run</code> finishes. Here's a jsFiddle to demonstrate: http://jsfiddle.net/machty/6p6XJ/328/</p>

<h2>Other things to know about the RunLoop</h2>

<h3>Observers vs. Bindings</h3>

<p>It's important to note that Observers and Bindings, while having the similar functionality of responding to changes in a "watched" property, behave totally differently in the context of a RunLoop. Binding propagation, as we've seen, gets scheduled into the <code>sync</code> queue to eventually be executed by the RunLoop. Observers, on the other hand, fire <em>immediately</em> when the watched property changes without having to be first scheduled into a RunLoop queue. If an Observer and a binding all "watch" the same property, the observer will always be called 100% of the time earlier than the binding will be updated.</p>

<h3><code>scheduleOnce</code> and <code>Ember.run.once</code></h3>

<p>One of the big efficiency boosts in Ember's auto-updating templates is based on the fact that, thanks to the RunLoop, multiple identical RunLoop actions can be coalesced ("debounced", if you will) into a single action. If you look into the <code>run_loop.js</code> internals, you'll see the functions that facilitate this behavior are the related functions <code>scheduleOnce</code> and <code>Em.run.once</code>. The difference between them isn't so important as knowing they exist, and how they can discard duplicate actions in queue to prevent a lot of bloated, wasteful calculation during the run loop.</p>

<h3>What about timers?</h3>

<p>Even though 'timers' is one of the default queues listed above, Ember only makes reference to the queue in their RunLoop test cases. It seems that such a queue would have been used in the SproutCore days based on some of the descriptions from the above articles about timers being the last thing to fire. In Ember, the <code>timers</code> queue isn't used. Instead, the RunLoop can be spun up by an internally managed <code>setTimeout</code> event (see the <code>invokeLaterTimers</code> function), which is intelligent enough to loop through all the existing timers, fire all the ones that have expired, determine the earliest future timer, and set an internal <code>setTimeout</code> for that event only, which will spin up the RunLoop again when it fires. This approach is more efficient than having each timer call setTimeout and wake itself up, since in this case, only one setTimeout call needs to be made, and the RunLoop is smart enough to fire all the different timers that might be going off at the same time.</p>

<h3>Further debouncing with the <code>sync</code> queue</h3>

<p>Here's a snippet from the run loop, in the middle of a loop through all the queues in the run loop. Note the special case for the <code>sync</code> queue: because <code>sync</code> is a particularly volatile queue, in which data is being propagated in every direction, <code>Ember.beginPropertyChanges()</code> is called to prevent any observers from being fired, followed by a call to <code>Ember.endPropertyChanges</code>. This is wise: if in the course of flushing the <code>sync</code> queue, it's entirely possible that a property on an object will change multiple times before resting on its final value, and you wouldn't want to waste resources by immediately firing observers per every single change.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="k">if</span> <span class="p">(</span><span class="nx">queueName</span> <span class="o">===</span> <span class="s1">&#39;sync&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">log</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">LOG_BINDINGS</span><span class="p">;</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Begin: Flush Sync Queue&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>       <span class="nx">Ember</span><span class="p">.</span><span class="nx">beginPropertyChanges</span><span class="p">();</span>
</span><span class='line'>       <span class="nx">Ember</span><span class="p">.</span><span class="nx">tryFinally</span><span class="p">(</span><span class="nx">tryable</span><span class="p">,</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">endPropertyChanges</span><span class="p">);</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End: Flush Sync Queue&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="nx">iter</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hope this helps. I definitely had to learn quite a bit just to write this thing, which was kind of the point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpreeCommerce meets Ember.js]]></title>
    <link href="http://machty.github.com/blog/2012/11/02/spreecommerce-meets-ember-dot-js/"/>
    <updated>2012-11-02T20:44:00-04:00</updated>
    <id>http://machty.github.com/blog/2012/11/02/spreecommerce-meets-ember-dot-js</id>
    <content type="html"><![CDATA[<p>I'm working on a record label website in Ember.js with all sorts of
lovely dynamic goodies, infinite scrolling feeds, embedded music player,
blah blah blah, and most challengingly a full-on store where user's can
browse albums, shirts, whatevers, add them to their cart, and eventually
check out. This post covers a few lessons learned in getting a dynamic
JS website to play nicely with Spree, an open source e-commerce
framework.</p>

<p>Things you might learn from this article:
* Digging into gem source code
* Passing Javascript data in and out of iframes
* Converting non-prototype-extended data into prototype-extended data</p>

<!--more-->


<h2>Spree</h2>

<p><a href="http://spreecommerce.com/">Spree</a> is an extensible e-commerce framework written
in Ruby-on-Rails that's been around for quite a number of years. Spree
follows the same pattern of CMS+front-end RoR plugins like
<a href="http://www.refinerycms.com">RefineryCMS</a>, where, in order to achieve
the desired customized design, the developer is encouraged to bend as
many rules as possible given the CMS design, and then when it comes to
breaking the rules, you're provided some mechanism of overriding/embellishing
the default source code, which usually takes one of two forms:</p>

<ol>
<li>If you're overriding something like a view template, figure out the
path of that view by digging through the Spree/Refinery source code
and then duplicate that path in your <code>/app</code> directory, and if you've
named the override correctly, the plugin will use your view rather
than the stock default.</li>
<li>If you're overriding something like a model/controller, you use a
decorator, wherein you run a <code>class_eval</code> on a the model/controller,
say <code>Refinery::PagesController</code> in
<code>app/decorators/controllers/refinery/pages_controller_decorator.rb</code>
and define any of the overrides / extra methods you need.</li>
</ol>


<p>Spree utilizes both of these methods, as well as a third method
seemingly absent from Refinery, which uses the
<a href="https://github.com/railsdog/deface">Deface</a> gem to dig into raw
.erb files and replace certain chunks of it with your desired overrides.
It's basically a mechanism that allows you to override view's without
totally overwriting an .erb file, and, while messy in its own way,
allows your overrides to play nicely with other plugins' overrides if
you're careful enough to take a more conservative approach to the kinds
of overrides you make (e.g. add this partial after this elements rather
than then completely replace this giant ass element that all these other
plugins rely on as an anchor).</p>

<p>That's enough of an overview. The rest of this post is how I managed to
use chunks of Spree to build my own Ajax-y store for a record label
website.</p>

<h2>Maintaining am AJAX Shopping Cart</h2>

<p>By default, vanilla Spree doesn't provide you any AJAX functionality;
every action, from viewing a product to adding it to your cart causes a
full page refresh, so getting it to work in an AJAX fashion takes a bit
of finesse. Step 1 is finding the appropriate controller actions that
you need to override. The first thing I wanted to override was adding a
product to a cart. The easiest way to figure out how to do this was to
navigate to my local server hosting a sample Spree website and add a
product to my shopping cart while observing <code>log/development.log</code> in my
Rails app folder:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ : tail -F log/development.log&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// Add an item to the shopping cart from the browser&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Started POST "/store/orders/populate" for 127.0.0.1 at 2012-11-02 21:48:41 -0400
</span><span class='line'>Processing by Spree::OrdersController#populate as HTML
</span><span class='line'>  Parameters: {"utf8"=>"✓", "authenticity_token"=>"6kdui/lTyLCBTSZTsEQAR1UgUxyqaY8mhBaUouwjhXA=", "products"=>{"12"=>"45"}, "quantity"=>"1"}
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ah hah, the controller that handles adding items to the shopping cart is
<code>Spree::OrdersController</code> and the action is <code>populate</code>. Now all I have
to do is figure out a way to modify that controller action to accept
AJAX requests and spit out a JSON response of the updated state of the
cart so that I can display the contents of the cart from my Ember site.</p>

<p>This means you have to start digging into the Spree source code.
Whenever I need to dig into the source code of a plugin I'm using (which
is pretty much all the damn time) I either go to the plugin's github
page and search through the directory (or press <code>t</code> on the homepage and
fuzzy search) or, most often, I just <code>git clone</code> the repository so I can
have the whole project locally to inspect and prod. I find a file called
<code>orders_controller.rb</code>, and here's an excerpt of its <code>def populate</code>
block:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  fire_event(&#39;spree.cart.add&#39;)</span>
</span><span class='line'><span class="sr">  fire_event(&#39;spree.order.contents_changed&#39;)</span>
</span><span class='line'><span class="sr">  respond_with(@order) { |format| format.html { redirect_to cart_path } }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Balls, they've got it hard-wired in there to respond only to <code>html</code>
requests. How so? Because in the <code>respond_with</code> block, they only
specify what should happen when the format of the incoming request is
html, rather than, say, json or xml or any of the other kinds of
requests that can come in. This is problematic for us since we want to
use this function so that it can handle JSON requests from our
JavaScript app. I don't know how to do this other than rewriting the
entire function to eventually respond with JSON. Perhaps Railscasting
Ryna Bates or Yehuda Katz could think of a way to do this, but have no
idea how something like that would be accomplished, so let's just go the
obvious route and override that entire function so that it'll respond to
our JS app's JSON AJAX requests.</p>

<h3>Using Decorators to Override Spree Controllers</h3>

<p>We need to override the <code>populate</code> function of the spree controller to
return JSON. To do this, you have to use a 'decorator'. The term
'decorator' is used in a lot of different contexts in the programming
world, but most generally, it implies that you'll be decorating an
underlying class with more methods (or, in this case, overriding a
method entirely). So let's create our decorator for the
<code>OrdersController</code> in <code>app/controllers/orders_controller_decorator.rb</code>.
In this file, we'll use <code>class_eval</code> to reopen the class and override
the <code>populate</code> method so that it returns the JSON we need. And exactly
what JSON do we need? Well, we do want our our Ember app to properly
display updates to the shopping cart as they come in, and what better
way to get an updated state of the shopping cart other than right when
we add items to it?</p>

<p>For this reason we <code>render json: current_order</code> after we've added an
item to the cart. Our <code>orders_controller_decorator.rb</code> looks something
like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spree</span><span class="o">::</span><span class="no">OrdersController</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">populate</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@order = current_order(true)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">#...</span>
</span><span class='line'>
</span><span class='line'><span class="sr">fire_event(&#39;spree.cart.add&#39;)</span>
</span><span class='line'><span class="sr">fire_event(&#39;spree.order.contents_changed&#39;)</span>
</span><span class='line'><span class="sr">respond_with(@order) do |format|</span>
</span><span class='line'><span class="sr">  format.html { redirect_to cart_path }</span>
</span><span class='line'><span class="sr">  format.json { render json: current_order } # &amp;lt;----</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Storing Cart Updates in Ember.js</h3>

<p>This part's pretty straight-forward. We use a controller to maintain the
state of the cart. It's initially populated on page load by the current
value of the cart (an easy exercise to figure out once you understand
the general techniques applied in this article).</p>

<p>The important thing to pay attention to here is that in the <code>success</code>
handler in the Ajax call, we take the <code>current_order</code> JSON returned from
our modified <code>populate</code> action and save it to the controller, so that
anything that's bound to the controller's cart properties get
automatically updated.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.CartController = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">content: </span><span class="nb">window</span><span class="p">.</span><span class="nx">cart</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">saving: </span><span class="kc">false</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">addItem: </span><span class="nf">(variantId, quantity, callback) -&gt;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">variants = </span><span class="p">{}</span>
</span><span class='line'><span class="nx">variants</span><span class="p">[</span><span class="nx">variantId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">quantity</span>
</span><span class='line'>
</span><span class='line'><span class="nx">@set</span> <span class="s">&#39;saving&#39;</span><span class="p">,</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span> <span class="s">&#39;/add_item.json&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">type: </span><span class="s">&#39;POST&#39;</span>
</span><span class='line'>  <span class="nv">data:</span>
</span><span class='line'>    <span class="nv">variants: </span><span class="nx">variants</span>
</span><span class='line'>  <span class="nv">success: </span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;content&#39;</span><span class="p">,</span> <span class="nx">data</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="k">if</span> <span class="nx">callback</span>
</span><span class='line'>  <span class="nv">error: </span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">alert</span> <span class="s">&quot;Error adding item to Shopping Cart. Please try again.&quot;</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="k">if</span> <span class="nx">callback</span>
</span><span class='line'>  <span class="nv">complete: </span><span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;saving&#39;</span><span class="p">,</span> <span class="kc">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Checkout</h3>

<p>Ok, adding items to the cart is easy enough (note that I'm skipping over
the easier parts, like querying the server for products and displaying
them with Handlebars templates), but what about the checkout phase?</p>

<p>Well, I don't have the gumption to re-tool Spree to work in an Ember.js
setting. Maybe someday I'll write the gem for that, but not today.
Today, we'll just use an iFrame to display the normal checkout page
that's included with Spree. To do this, you'll create a new route in
your router called <code>checkout</code> which connects outlets to a view that has
an iFrame in it pointing to <code>/store/checkout/address</code> (address just
happens to the first page of checkout, i.e. billing and shipping
address). The rest mostly just works out of the box, but there is one
last thing we need to get working, which is, how do we notify the Ember
portion of our app that the shopping cart has been cleared after the
user has made a purchase?</p>

<p>We'd like our Ember.js shopping cart to immediately empty once the
user's made a successful purchase. We could just randomly poll the
server to sync the state of the cart, but that's a little messy and
resource intensive. Arguably a better way to go would be to have the
iframe pass its parent Ember.js app information about the state of the
cart at each page load, so that for every page of the checkout, you
re-flash the shopping cart, and when you've successfully checked out,
you flash the shopping cart with an empty cart, and that's how your
Ember.js app knows the shopping cart's been paid for.</p>

<h3>Deface</h3>

<p>To do this, we'll add a Deface override to inject some Javascript at the
top of every Spree page. This Javascript will attempt to grab the
<code>current_order</code>, if it exists, serialize it, and pass it to the parent
frame, if it exists. The Deface override looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Deface</span><span class="o">::</span><span class="no">Override</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:virtual_path</span> <span class="o">=&gt;</span> <span class="s2">&quot;spree/layouts/spree_application&quot;</span><span class="p">,</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;                 :name =&amp;gt; &quot;cart_updater&quot;,</span>
</span><span class='line'><span class="sr">                 :insert_bottom =&amp;gt; &quot;[data-hook=&#39;inside_head&#39;]&quot;,</span>
</span><span class='line'><span class="sr">                 :partial =&amp;gt; &quot;store_overrides/</span><span class="n">cart_updater</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This can reside in <code>app/overrides/overrides.rb</code>. Basically, this says
that we're overriding the Spree template in the Spree source code at
<code>spree/layouts/spree_application</code> by inserting the <code>cart_updater</code>
partial at the bottom of the <code>inside_head</code> data hook in the
<code>spree_application.erb.html</code> template.</p>

<p>Now we'll need to
create the <code>cart_updater</code> that's referenced. We'll do that by creating a
file called <code>app/store_overrides/_cart_updater.html.erb</code>, which looks
something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">shopCallback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">cart</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;%</span> <span class="k">if</span> <span class="nx">current_order</span> <span class="o">%&gt;</span>
</span><span class='line'>    <span class="nx">cart</span> <span class="o">=</span> <span class="o">&lt;%=</span> <span class="nx">OrderSerializer</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="nx">current_order</span><span class="p">).</span><span class="nx">to_json</span><span class="p">.</span><span class="nx">html_safe</span> <span class="o">%&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;%</span> <span class="k">else</span> <span class="o">%&gt;</span>
</span><span class='line'>    <span class="nx">cart</span> <span class="o">=</span> <span class="o">&lt;%=</span> <span class="nx">nil</span><span class="p">.</span><span class="nx">to_json</span><span class="p">.</span><span class="nx">html_safe</span> <span class="o">%&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;%</span> <span class="nx">end</span> <span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">shopCallback</span><span class="p">(</span><span class="nx">cart</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This chunk of code passes a serialized order to the parent page, if it
exists. Now all we need to do is add the <code>shopCallback</code> function.</p>

<h3>Prototype Extension Gotcha</h3>

<p>Jumping a bit ahead, here's the code for the <code>window.shopCallback</code>
function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">shopCallback = </span><span class="nf">(cartJson) -&gt;</span>
</span><span class='line'>  <span class="c1"># Have to $.extend to reconstruct object in Emberized environment</span>
</span><span class='line'>  <span class="c1"># so that we get prototype extensions on the arrays.</span>
</span><span class='line'>  <span class="nx">Chimera</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;cartController.content&#39;</span><span class="p">,</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="p">{},</span> <span class="nx">cartJson</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that we don't just set <code>content</code> to <code>cartJson</code>, but rather to
<code>$.extend(true, {}, cartJson))</code>. Why is this? Well, prepare yourself for
a bizarre corner-case that you'll occasionally have to be on your guard
against. The problem stems from the fact that <code>cartJson</code> is created
within the iframe context, which knows nothing about Ember, and then
<code>cartJson</code> is passed to the parent Emver.js page. One of the things the
Ember.js library adds by default are a bunch of prototype overrides for
the Array, String, and probably Object types. These prototype extensions
allow properties of these objects to be observable, among other many things,
but the <code>cartJson</code> object coming from the iframe doesn't have that
prototype extension, since it's prototypes come from the unembellished
iframe context. If you just set <code>cartController.content</code> to <code>cartJson</code>,
you'll very quickly run into bizarre errors about certain
properties/functions not being defined on <code>cartJson</code>.</p>

<p>The solution to this is to recreate the <code>cartJson</code> in the
prototype-extended Ember.js context. A neat technique for doing this,
which I learned from <code>gavacho</code> from the emberjs IRC, is to use the
jQuery extend function, which can be used in a lot of different
instances, but in this case, we're using it to make a deep copy of the
<code>cartJson</code> object. This recreates the object so that it'll have the
prototype extensions that Ember expects.</p>

<p>I think that does it for this article. Let me know if you have any
questions, and always always check out the Ember IRC and StackOverflow
for some smart dude(tte)s ready to helpy you at your every turn.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[batteryPOP is Live]]></title>
    <link href="http://machty.github.com/blog/2012/10/12/batterypop-is-live/"/>
    <updated>2012-10-12T10:50:00-04:00</updated>
    <id>http://machty.github.com/blog/2012/10/12/batterypop-is-live</id>
    <content type="html"><![CDATA[<p>You can check out the latest <a href="http://www.usefulrobot.io">Useful Robot</a>
project at <a href="http://www.batterypop.com">batteryPOP.com</a>.</p>

<p>batteryPOP is a children's website featuring a bubbly, animated,
tree-based menu that drives kids to the videos they want to watch and
articles they want to read. It was written in
<a href="http://www.emberjs.com">Ember.js</a>/Rails and had to look good on the
iPad, so we couldn't use any Flash, though the effect is largely the
same.</p>

<!-- more -->


<h2>Ember.js Meetup Presentation</h2>

<p>Here's the slides from my lightning talk on Architecting batteryPOP from
the last <a href="http://www.meetup.com/EmberJS-NYC/">NYC Ember Meetup</a>.</p>

<script async class="speakerdeck-embed" data-id="5059e707e4ce5c0002054198" data-ratio="1.4840579710144928" src="http://machty.github.com//speakerdeck.com/assets/embed.js"></script>


<h2>Repositionables</h2>

<p>One of the major focuses of that presentation was on
how to use a <code>Repositionable</code> mixin in conjunction with
position formulas so that views can automatically get notified when
browser dimensions change and automatically animate themselves to the
correct new position and scale. This is what facilitates the nifty
auto-adjust feature on batteryPOP.com when you scale the browser window.
Try it. It's nifty.</p>

<p>It's also what allows the site to 'just work' when
viewed on a variety of different devices; there's no special iPad
version of the site, or device-specific CSS, just a bunch of Views that
know how to scale and position themselves based on browser dimensions
and a suite of reusable position formulas.</p>

<h2>PagedNodeOrchestrator</h2>

<p>Also discussed was what I called the <code>PagedNodeOrchestrator</code>, which
handles the paging and animation of children nodes at a certain level in
the tree-based menu structure. If you go to batteryPOP.com and click
What's Poppin', you're 1 level deep in the tree menu, and there are (at
present) 12 nodes to display which get split into 2 pages of 6. Paging
left and right causes nodes to animate in and out of existence.</p>

<p>Furthermore, there are instances when user actions cause nodes to be
added/removed from the list (adding/removing items from your homepage),
and the menu will need to automagically rebalance and occasionally
collapse 2 pages into one and so on and so on. Due to all of the insane
whack-a-mole corner cases that presented themselves once I started in on
the more dynamic user homepage, the only solution was to write a
<code>PagedNodeOrchestrator</code>, which (similar to and based on
<code>Ember.CollectionView</code>) responds to changes in an underlying array of
models and automatically handles the generation, deletion, and animation
of their associated views as models are added/removed to the underlying
array and the <code>currentPageNumber</code> changes. Once I'd nailed down the code
to handle the basic paging/addition/deletion, all of those corner cases
resolved themselves. You can imagine my fist-pumping, Adderall-fueled
delight at Fourthmeal o'clock.</p>

<h3>Code Excerpt</h3>

<p>Here's all the important bits of the <code>PagedNodeOrchestrator</code> for anyone
who's interested in constructing a similar View-ish structure that
responds to changes in an underlying array. I've left some of the more
Shakespearian commenting intact.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>paged_node_orchestrator.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.PagedNodeOrchestrator = </span><span class="nx">Em</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">init: </span><span class="o">-&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">@set</span> <span class="s">&quot;nodeViews&quot;</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'><span class="nx">@_nodeModelsDidChange</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1"># When nodeModels changes, handle observer changes and</span>
</span><span class='line'>  <span class="c1"># notify our callback. Note that a change in nodeModels</span>
</span><span class='line'>  <span class="c1"># means that someone changed the entire fucking</span>
</span><span class='line'>  <span class="c1"># array, and not just a few elements in there.</span>
</span><span class='line'>  <span class="c1"># We take this opportunity to let our arrayWillChange</span>
</span><span class='line'>  <span class="c1"># observer know what&#39;s up.</span>
</span><span class='line'>  <span class="nv">_nodeModelsWillChange: </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">beforeObserver</span><span class="p">((</span><span class="o">-&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="nv">nodeModels = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;nodeModels&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">removeArrayObserver</span> <span class="nx">@</span>
</span><span class='line'><span class="nv">len = </span><span class="k">if</span> <span class="nx">nodeModels</span> <span class="k">then</span> <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">@arrayWillChange</span><span class="p">(</span><span class="nx">nodeModels</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">),</span> <span class="s">&#39;nodeModels&#39;</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">_nodeModelsDidChange: </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">observer</span><span class="p">((</span> <span class="o">-&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="nv">nodeModels = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;nodeModels&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">addArrayObserver</span> <span class="nx">@</span>
</span><span class='line'>
</span><span class='line'><span class="nv">len = </span><span class="k">if</span> <span class="nx">nodeModels</span> <span class="k">then</span> <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">@arrayDidChange</span><span class="p">(</span><span class="nx">nodeModels</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">),</span> <span class="s">&#39;nodeModels&#39;</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1"># Ember.sendEvent(this, &#39;@array:before&#39;, [this, startIdx, removeAmt, addAmt]);</span>
</span><span class='line'>  <span class="nv">arrayWillChange: </span><span class="nf">(___, start, removedCount) -&gt;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1"># Basically, I need to cast away and destroy the nodeViews</span>
</span><span class='line'><span class="c1"># associated with the deleted nodeModels in nodeModels. I&#39;ll</span>
</span><span class='line'><span class="c1"># shorten the nodeViews array here and then add to it</span>
</span><span class='line'><span class="c1"># in didChange</span>
</span><span class='line'><span class="nx">@destroyNodeViewRange</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">removedCount</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Now remove those nodeViews from the list.</span>
</span><span class='line'><span class="nx">@get</span><span class="p">(</span><span class="s">&quot;nodeViews&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">removedCount</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">arrayDidChange: </span><span class="nf">(nodeModels, start, removed, added) -&gt;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1"># Fill in nodeViews with undefined space. </span>
</span><span class='line'><span class="nv">nodeViews = </span><span class="nx">get</span><span class="p">(</span><span class="nx">@</span><span class="p">,</span> <span class="s">&#39;nodeViews&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">nodeViews</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">added</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">modelLen = </span><span class="k">if</span> <span class="nx">nodeModels</span> <span class="k">then</span> <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'><span class="nv">viewLen  = </span><span class="k">if</span> <span class="nx">nodeViews</span> <span class="k">then</span> <span class="nx">nodeViews</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">fmt</span><span class="p">(</span><span class="s">&quot;Node arrays out of sync! %@ vs. %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nx">modelLen</span><span class="p">,</span> <span class="nx">viewLen</span><span class="p">]),</span> <span class="nx">modelLen</span> <span class="o">==</span> <span class="nx">viewLen</span><span class="p">)</span>
</span><span class='line'><span class="nx">@refreshDisplay</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">currentPaging: </span><span class="p">(</span> <span class="o">-&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1"># First, determine the balanced page size.</span>
</span><span class='line'><span class="nv">TARGET_PAGE_SIZE = </span><span class="mi">6</span>
</span><span class='line'><span class="nv">nodeModels = </span><span class="nx">@get</span> <span class="s">&quot;nodeModels&quot;</span>
</span><span class='line'><span class="nv">len = </span><span class="k">if</span> <span class="nx">nodeModels</span> <span class="k">then</span> <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">length</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'><span class="nv">numPages = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">len</span> <span class="o">/</span> <span class="nx">TARGET_PAGE_SIZE</span><span class="p">)</span> <span class="o">||</span> <span class="mi">1</span>
</span><span class='line'><span class="nv">nodesPerPage = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">len</span> <span class="o">/</span> <span class="nx">numPages</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Now determine the range of visible node indexes</span>
</span><span class='line'><span class="c1"># given the currentPageIndex. We also have to make sure</span>
</span><span class='line'><span class="c1"># to stay within the bounds in case we lost a bunch of nodes</span>
</span><span class='line'><span class="c1"># and we were on a later page.</span>
</span><span class='line'><span class="nv">currentPageIndex = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">@get</span><span class="p">(</span><span class="s">&quot;currentPageIndex&quot;</span><span class="p">),</span> <span class="nx">numPages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">visibleStart = </span><span class="nx">currentPageIndex</span> <span class="o">*</span> <span class="nx">nodesPerPage</span>
</span><span class='line'><span class="nv">visibleEnd = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">len</span><span class="p">,</span> <span class="nx">visibleStart</span> <span class="o">+</span> <span class="nx">nodesPerPage</span><span class="p">)</span>
</span><span class='line'><span class="nv">currentPageSize = </span><span class="nx">visibleEnd</span> <span class="o">-</span> <span class="nx">visibleStart</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">numPages: </span><span class="nx">numPages</span>
</span><span class='line'>  <span class="nv">currentPageIndex: </span><span class="nx">currentPageIndex</span>
</span><span class='line'>  <span class="nv">maxNodesPerPage: </span><span class="nx">nodesPerPage</span>
</span><span class='line'>  <span class="nv">currentPageSize: </span><span class="nx">currentPageSize</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Indexes controlling which nodes are currently displayed:</span>
</span><span class='line'>  <span class="c1"># [ visibleStart, visibleEnd )</span>
</span><span class='line'>  <span class="nv">visibleStart: </span><span class="nx">visibleStart</span>
</span><span class='line'>  <span class="nv">visibleEnd: </span><span class="nx">visibleEnd</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">).</span><span class="nx">property</span><span class="p">(</span><span class="s">&quot;currentPageIndex&quot;</span><span class="p">,</span> <span class="s">&quot;nodeModels.length&quot;</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">refreshDisplay: </span><span class="nf">(force = false) -&gt;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">nodeModels = </span><span class="nx">@get</span> <span class="s">&quot;nodeModels&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Calculate paging and update properties.</span>
</span><span class='line'><span class="nv">currentPaging = </span><span class="nx">@get</span> <span class="s">&quot;currentPaging&quot;</span>
</span><span class='line'><span class="nx">@set</span> <span class="s">&quot;numPages&quot;</span><span class="p">,</span> <span class="nx">currentPaging</span><span class="p">.</span><span class="nx">numPages</span>
</span><span class='line'><span class="nx">@set</span> <span class="s">&quot;currentPageIndex&quot;</span><span class="p">,</span> <span class="nx">currentPaging</span><span class="p">.</span><span class="nx">currentPageIndex</span>
</span><span class='line'><span class="nv">visibleStart = </span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">visibleStart</span>
</span><span class='line'><span class="nv">visibleEnd = </span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">visibleEnd</span>
</span><span class='line'><span class="nv">currentPageSize = </span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">currentPageSize</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Loop through all models, creating nodeViews in the visible spectrum</span>
</span><span class='line'><span class="c1"># and hiding the ones that aren&#39;t supposed to be there.</span>
</span><span class='line'><span class="nv">nodeViews = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&quot;nodeViews&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">idx</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">...(</span><span class="nx">nodeModels</span><span class="p">.</span><span class="nx">length</span><span class="p">)]</span>
</span><span class='line'>  <span class="nv">nodeModel = </span><span class="nx">nodeModels</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">nodeView = </span><span class="nx">nodeViews</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">nodeView</span>
</span><span class='line'>    <span class="c1"># NodeView has been created. Should it be here?</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">visibleStart</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">idx</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">visibleEnd</span>
</span><span class='line'>      <span class="c1"># Yes, it should. Make sure it&#39;s in the right place.</span>
</span><span class='line'>      <span class="nx">@presentNodeView</span><span class="p">(</span><span class="nx">nodeView</span><span class="p">,</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">-</span> <span class="nx">visibleStart</span><span class="p">)</span> <span class="o">/</span> <span class="nx">currentPageSize</span> <span class="o">+</span> <span class="nx">overlapOffset</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># No, it shouldn&#39;t be here. Send it in the proper direction</span>
</span><span class='line'>      <span class="c1"># if it&#39;s actually visible</span>
</span><span class='line'>      <span class="k">continue</span> <span class="k">if</span> <span class="nx">nodeView</span><span class="p">.</span><span class="nx">getPath</span><span class="p">(</span><span class="s">&quot;displayProperties.opacity&quot;</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mf">0.1</span>
</span><span class='line'>      <span class="nv">positionFormula = </span><span class="k">if</span> <span class="nx">idx</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">visibleStart</span>
</span><span class='line'>        <span class="nx">App</span><span class="p">.</span><span class="nx">PagedOutRightPosition</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">App</span><span class="p">.</span><span class="nx">PagedOutLeftPosition</span>
</span><span class='line'>      <span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;positionFormula&quot;</span><span class="p">,</span> <span class="nx">positionFormula</span>
</span><span class='line'>      <span class="nx">nodeView</span><span class="p">.</span><span class="nx">notifyPropertyChange</span> <span class="s">&quot;positionFormula&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># No nodeview exists in this slot yet. Should we create on?</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">visibleStart</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">idx</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">visibleEnd</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Index </span><span class="si">#{</span><span class="nx">idx</span><span class="si">}</span><span class="s">: Creating node here&quot;</span>
</span><span class='line'>      <span class="c1"># Yes we should.</span>
</span><span class='line'>      <span class="nv">nodeView = </span><span class="nx">App</span><span class="p">.</span><span class="nx">nodeViewFactory</span><span class="p">(</span><span class="nx">nodeModel</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">nodeViews</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nodeView</span>
</span><span class='line'>      <span class="nx">@presentNodeView</span><span class="p">(</span><span class="nx">nodeView</span><span class="p">,</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">-</span> <span class="nx">visibleStart</span><span class="p">)</span> <span class="o">/</span> <span class="nx">currentPageSize</span> <span class="o">+</span> <span class="nx">overlapOffset</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">presentNodeView: </span><span class="nf">(nodeView, orbitRatio, firstDisplay = false) -&gt;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;stackController&quot;</span><span class="p">,</span> <span class="nx">@</span>
</span><span class='line'><span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;orbitRatio&quot;</span><span class="p">,</span> <span class="nx">orbitRatio</span>
</span><span class='line'><span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;positionFormula&quot;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">PrePresentPosition</span> <span class="k">if</span> <span class="nx">firstDisplay</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># TODO: combine into one timer event?</span>
</span><span class='line'><span class="nv">positioner = </span><span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">#debugger</span>
</span><span class='line'>  <span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;positionFormula&quot;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">OrbitingPosition</span>
</span><span class='line'>  <span class="nx">nodeView</span><span class="p">.</span><span class="nx">notifyPropertyChange</span> <span class="s">&quot;positionFormula&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nx">firstDisplay</span>
</span><span class='line'>  <span class="nx">runLater</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">positioner</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nx">positioner</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1"># @param {callback}: function(nodeView, index)</span>
</span><span class='line'>  <span class="nv">forEachVisibleNodeView: </span><span class="nf">(callback) -&gt;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">currentPaging = </span><span class="nx">@get</span> <span class="s">&quot;currentPaging&quot;</span>
</span><span class='line'><span class="nv">nodeViews = </span><span class="nx">@get</span> <span class="s">&quot;nodeViews&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">visibleStart = </span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">visibleStart</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">idx</span> <span class="k">in</span> <span class="p">[</span><span class="nx">visibleStart</span><span class="p">...(</span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">visibleEnd</span><span class="p">)]</span>
</span><span class='line'>  <span class="nv">nodeView = </span><span class="nx">nodeViews</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">newNodeView = </span><span class="nx">callback</span> <span class="nx">nodeView</span><span class="p">,</span> <span class="nx">idx</span> <span class="o">-</span> <span class="nx">visibleStart</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Monitoring Changes on an Underlying Array</h3>

<p>So, to create any sort of object that responds to changes in an
underlying array (in Ember.js), one must</p>

<ol>
<li>Observe changes to the entire array property (i.e. handle the case
when someone sets <code>content</code> to an entirely different array, rather
than just adding to / removing from the existing array)</li>
<li>Use this observer to call <code>addArrayObserver</code>/<code>removeArrayObserver</code> on the
new/old array so that we can receive notifications on when individual
elements are added/removed from the array.</li>
</ol>


<p>This is the pattern that my <code>PagedNodeOrchestrator</code> follows, which
totally ripped off the pattern from the source for
<code>Ember.CollectionView</code>. Definitely take a look at the <code>CollectionView</code>
source for better commenting and less CoffeeScript and curse words.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRY and Tie Your Ember Routes]]></title>
    <link href="http://machty.github.com/blog/2012/09/28/dry-your-ember-routes/"/>
    <updated>2012-09-28T13:54:00-04:00</updated>
    <id>http://machty.github.com/blog/2012/09/28/dry-your-ember-routes</id>
    <content type="html"><![CDATA[<h4>UPDATE 10/1/12: see bottom the post for avoiding infinite loop issues</h4>

<h4>UPDATE 1/6/12: this post is deprecated since the new <a href="http://emberjs.com/guides/routing/defining-your-routes/">Ember Router v2 API</a> came out.</h4>

<p>A common complaint about Ember.js routing is that seems to force you to
create pairs of extremely light-weight, useless Views and Controllers
for each new route you create. Another is that it's not particular
obvious how data ought to be shared between routes/controllers. Here's
one way to cut down on the seeming boilerplate while linking your data.</p>

<!--more-->


<p>Consider the following example router
that describes an application that allows you to create new Campaigns,
but the forms for filling out all the information about a Campaign are
split between multiple pages.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app_router.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.Router = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">root: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1"># ... index route, redirect-to&#39;s, etc.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">new_campaign: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">route: </span><span class="s">&#39;/new_campaign&#39;</span>
</span><span class='line'>  <span class="nv">connectOutlets: </span><span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># 1. Instantiate a NewCampaignController and NewCampaignView,</span>
</span><span class='line'>    <span class="c1"># and inject the latter into applicationController&#39;s outlet.</span>
</span><span class='line'>    <span class="c1"># also create the empty Campaign object that will be </span>
</span><span class='line'>    <span class="c1"># shared between the multiple pages of forms and pass it in</span>
</span><span class='line'>    <span class="c1"># as the context object to the controller.</span>
</span><span class='line'>    <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;applicationController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span><span class="p">(</span><span class="s">&#39;newCampaign&#39;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Campaign</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">basic_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>    <span class="nv">route: </span><span class="s">&#39;/basic_info&#39;</span>
</span><span class='line'>    <span class="nv">connectOutlets: </span><span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="c1"># 2. Create BasicInfoController and BasicInfoView, inject</span>
</span><span class='line'>      <span class="c1"># into the NewCampaignView outlet.</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span><span class="p">(</span><span class="s">&#39;basicInfo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">more_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>    <span class="nv">route: </span><span class="s">&#39;/more_info&#39;</span>
</span><span class='line'>    <span class="nv">connectOutlets: </span><span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span><span class="p">(</span><span class="s">&#39;moreInfo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#... a third page</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There's two main problems with the code above:</p>

<ol>
<li>The <code>basic_info</code> and <code>more_info</code> child state controllers haven't yet
been connected to the Campaign object created for the parent
<code>new_campaign</code> state.</li>
<li>Already, you've got to implement a bunch of nearly empty Views and
Controllers, namely:</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app_router.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.NewCampaignView = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">templateName: </span><span class="s">&quot;new_campaign&quot;</span>
</span><span class='line'><span class="nv">App.NewCampaignController = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">App.BasicInfoView = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">templateName: </span><span class="s">&quot;basic_info&quot;</span>
</span><span class='line'><span class="nv">App.BasicInfoController = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">App.MoreInfoView = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">templateName: </span><span class="s">&quot;more_info&quot;</span>
</span><span class='line'><span class="nv">App.MoreInfoController = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>First off, if you're a 1-to-1 class-to-file kind of person, your
codebase, app namespace, and editor tab space will bloat with nearly
empty View and Controller definitions. Sucks.</p>

<p>Fortunately, if the <code>connectOutlet</code> function comes in all sorts of
flavors, one where you you can pass in an options hash rather than
a string to specify exactly which Views / Controllers to create and what
your context option should be. Let us kill off the <code>BasicInfo</code>- and <code>MoreInfo</code>-
Controllers via the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nv">App.Router = </span><span class="p">...</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="nv">basic_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>    <span class="nv">connectOutlets: </span><span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span>
</span><span class='line'>        <span class="nv">viewClass: </span><span class="nx">App</span><span class="p">.</span><span class="nx">BasicInfoView</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">more_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>    <span class="nv">connectOutlets: </span><span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span>
</span><span class='line'>        <span class="nv">viewClass: </span><span class="nx">App</span><span class="p">.</span><span class="nx">MoreInfoView</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Turns out we've actually solved both problems: we no longer need
<code>BasicInfoController</code> or <code>MoreInfoController</code>, and we've actually
tied the templates for <code>BasicInfoView</code> and <code>MoreInfoView</code> correctly
to the Campaign object in NewCampaignController, and how exactly does
that work?</p>

<h3>Default Context Resolution: parentView</h3>

<p>Well, ever since
<a href="https://gist.github.com/2494968">Ember changed the way it resolves contexts</a>,
the context of a template is determined, by default, by looking up the
<code>controller</code> property of the View and using that if it exists, otherwise
it checks up the chain of <code>parentView</code>s to see if any of them have
defined a <code>controller</code> property to use as the context. <code>BasicInfoView</code>
and <code>MoreInfoView</code> don't have controllers set (since we're using the
<code>viewClass</code>-only form of <code>connectOutlet</code>), so their contexts resolve to
their <code>parentView</code>'s <code>controller</code>, namely <code>NewCampaignController</code>.
Therefore, the Handlebars templates for <code>BasicInfoView</code> and
<code>MoreInfoView</code> now use the <code>Campaign</code> object as their context.</p>

<h3>Can we do better?</h3>

<p>You might be itching to get rid of <code>BasicInfo-</code> and <code>MoreInfoView</code> as
well, since all they do is specify their <code>templateName</code>. You could do
this, if you wanted, by doing
<code>viewClass: Em.View.extend(templateName: "basic_info")</code>, but that seems
like overkill to me. Plus, you'd lose the benefits of being able to,
say, automatically focus a text field via the View's <code>didInsertElement</code>
hook.</p>

<h3>Where can I learn more?</h3>

<p>Documentation on Ember routing is still pretty meager, so I'd definitely
encourage you to really dig into the Ember source, particularly the test
cases that deal with these kinds of issues. For example, tucked right in
the middle of <code>controller_test.js</code> is</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app_router.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;if the controller is explicitly set to null while connecting an outlet, the instantiated view will inherit its controller from its parent view&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which isn't exactly what's happening regarding context resolution, but still clued me into this
approach.</p>

<h3>Update: Infinite Loop Gotcha</h3>

<p>I've been refactoring like a madman since discovering this and in some
cases I was getting stack overflows that were hard to trace down, but I
found the cause: if the <code>viewClass</code> you specify has an unnamed
<code>outlet</code> in its template, you'll get an infinite loop. I'm 90% sure
the reason why is that when you use the <code>viewClass</code>-only form of
connectOutlet, the default outlet name resolves to <code>view</code> (the default)
and steps on the namespace toes of the parent view outlet that 1) had
the same name (view) and was 2) (more importantly) tied to the same
single controller. So, there's namespace collisions. You can avoid this
by either getting rid of the leaf view's <code>outlet</code> (which might be
the case if you've been unquestioningly throwing outlets into templates
that don't actually inject child views... we're probably all guilty of
this at some point in our struggles with the router), or, if you
actually need the outlet, just give it a sensible name that won't
collide with any other outlet attached to the shared controller. Then
when you want to inject a view into <em>that</em> outlet, you can do:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app_router.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">basic_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">route: </span><span class="s">&#39;/basic_info&#39;</span>
</span><span class='line'><span class="nv">connectOutlets: </span><span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span>
</span><span class='line'>    <span class="nv">viewClass: </span><span class="nx">App</span><span class="p">.</span><span class="nx">BasicInfoView</span>
</span><span class='line'>
</span><span class='line'><span class="nv">index: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">route: </span><span class="s">&#39;/&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">captcha: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">route: </span><span class="s">&#39;/captcha&#39;</span>
</span><span class='line'>  <span class="nv">connectOutlets: </span><span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># Assume theres an outlet named captcha in the basic_info template.</span>
</span><span class='line'>    <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span>
</span><span class='line'>      <span class="nv">viewClass: </span><span class="nx">App</span><span class="p">.</span><span class="nx">CaptchaView</span>
</span><span class='line'>      <span class="nv">outletName: </span><span class="s">&#39;captcha&#39;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | machty's thoughtz]]></title>
  <link href="http://machty.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2014-05-24T09:25:42-04:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/12/daily-journal/"/>
    <updated>2014-05-12T13:14:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/12/daily-journal</id>
    <content type="html"><![CDATA[<h2>Ruby <code>Module#===</code></h2>

<p>Ran into <a href="https://github.com/hassox/warden/blob/master/lib/warden.rb#L33-L34">this piece of
code</a>
from the Warden repo:</p>

<pre><code>def self.test_mode!
  unless Warden::Test::WardenHelpers === Warden
    Warden.extend Warden::Test::WardenHelpers
    Warden::Manager.on_request do |proxy|
      unless proxy.asset_request?
        while blk = Warden._on_next_request.shift
          blk.call(proxy)
        end
      end
    end
  end
  true
end
</code></pre>

<p>I hadn't seen this usage of <code>===</code> before; I'm mostly familiar with it as
an unidiomatic alias of <code>is_a?</code>, e.g.:</p>

<pre><code>Array === []    #=&gt; true
[].is_a?(Array) #=&gt; true
</code></pre>

<p><code>#===</code> is the Case Equality operator or
<a href="http://stackoverflow.com/questions/4527220/3-equals-or-case-equality-operator"><em>subsumption</em> operator</a>;
it is overridden by subclasses to provide context-specific / semantic
meaning, for example:</p>

<ul>
<li><code>Regexp === /asd/</code> #=> true</li>
<li><code>Fixnum === 5</code> #=> true</li>
<li><code>Object === {}</code> #=> true</li>
</ul>


<p>Important things to keep in mind about <code>===</code>:</p>

<ol>
<li>It is not commutative (A===B does not imply B===A)</li>
<li>It is a method of the object on the left side of an expression,
e.g. <code>A===B</code> is shorthand for <code>A.===B</code> or <code>A.send(:===, //)</code></li>
<li>It has nothing to do with equality; beware, JavaScripters.</li>
</ol>


<p>ANYWAY: back to the Warden example: in this case, the <code>Module</code> class has
an instance method <code>===</code> that returns if the object on the right side
has extended the methods on the Module that <code>===</code> is called on, so:</p>

<pre><code>module M; end
class Foo; end

f = Foo.new
M === f #=&gt; false

# reopen
class Foo
  include M
end

M === f #=&gt; true
</code></pre>

<p>So we turned <code>===</code> from false to true by including <code>M</code> on class <code>Foo</code>.
The Warden example is similar, except that the way the module's methods
were mixed in was via <code>extend</code> vs <code>include</code>. <code>extend</code> is a somewhat more
direct form of <code>include</code> in that it can be called on instances to put
methods directly on that instance, rather than having to open an
instance's class and add an <code>include</code> statement, which adds all of those
methods to subclasses.</p>

<p>So when we check</p>

<pre><code>  Warden::Test::WardenHelpers === Warden
</code></pre>

<p>this is the same as <code>WardenHelpers.=== Warden</code>, which translates to
"return true if Warden has all of WardenHelpers' methods".</p>
]]></content>
  </entry>
  
</feed>

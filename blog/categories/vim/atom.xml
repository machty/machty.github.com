<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | machty's thoughtz]]></title>
  <link href="http://machty.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2014-09-30T16:55:34-04:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quickly Peruse Gem Source: Vim + Tmux + bundle open]]></title>
    <link href="http://machty.github.com/blog/2013/01/13/quickly-peruse-gem-source-vim-plus-tmux-plus-bundle-open/"/>
    <updated>2013-01-13T15:45:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/01/13/quickly-peruse-gem-source-vim-plus-tmux-plus-bundle-open</id>
    <content type="html"><![CDATA[<p>Ever find yourself
working on a project and needing to dig into the source code of a Gem
you're using? In the past I used to just go to the github for that gem
and use their project explorer, searching for particular commands using
their ultra helpful <code>t</code> command, but I got sick of having to do that, so
I found a better way using Vim + tmux + <code>bundle open</code>. The result is a
command I can run in Vim, which autocompletes gem names by looking
through <code>Gemfile.lock</code>, which splits the current tmux pane and runs a
new instance of Vim in the root directory of the Gem I'm looking for.</p>

<p>Even if you don't
share my exact configuration, you might learn something about any of the
following: Tmux, Vim, <code>bundle open</code>, and some Unix commands, and the end
result code is pretty easily modifiable.</p>

<!-- more -->


<h2>My setup</h2>

<p>I do all my work on the <a href="http://www.iterm2.com" title="iTerm2">iTerm2</a>
terminal, using <a href="http://tmux.sourceforge.net/">tmux</a> as better
screen-splitting replacement for <code>screen</code>, and Vim as my editor
(with the <a href="https://github.com/carlhuda/janus">Janus</a> plugin bundle).</p>

<p>{% img /images/tmuxsetup.jpg %}</p>

<p>I figured the easiest way for me to address the above need for quick Gem
source code perusal would be to split my Vim pane and open a new
instance of Vim in the root directory of the Gem source code.
<code>bundle open</code> to the rescue.</p>

<h2><code>bundle open</code></h2>

<p><code>bundle open &lt;GEMNAME&gt;</code> will open whatever editor you've provided in the
<code>$EDITOR</code> environment variable to the root of the provided gem name.
Thanks to <a href="https://github.com/ghempton">Gordon</a> for keying me into this;
it's extremely useful.</p>

<h2>Custom Vim command</h2>

<p>Here's what I ended up throwing into my .vimrc (actually .vimrc.after
since I'm using Janus).</p>

<p>{% codeblock lang:vim %}
" Split current tmux window, running <code>bundle open</code> on the
" argument-specified Gem name. Auto-completes from Gemfile.lock.
command! -nargs=* -complete=custom,ListGems BundleOpen silent execute "!tmux splitw 'bundle open <args>'"</p>

<p>" The function used to produce the autocomplete results.
fun ListGems(A,L,P)
  " Note that vim will filter for us... no need to do anything with A args.
  return system("grep -s '^ ' Gemfile.lock | sed 's/^ *//' | cut -d ' '  -f1 | sed 's/!//' | sort | uniq")
endfun</p>

<p>" Shortcut mapping.
nmap <leader>o :BundleOpen
{% endcodeblock %}</p>

<p>Basically, <code>command!</code> declares the command that tells Tmux to split the
current pane and call <code>bundle open</code> with whatever I pass to the Vim
function. The <code>-complete=custom,ListGems</code> portion tells it that it
should use the output of the custom function <code>ListGems</code> as its
auto-complete dictionary, which is a <em>completely awesome</em> feature.</p>

<p>The auto-complete dictionary I used is all the gems found in the
Gemfile.lock file if it exists. From left to right I (<code>grep</code>) filter out
lines that don't begin with gem names, (<code>sed</code>) get rid of preceding
whitespace, (<code>cut</code>) filter out everything after the first space, (<code>sed</code>)
get rid of exclamation points (apparently they're used for <code>git</code> repo
gems in Gemfile.lock), <code>sort</code> the list, and <code>uniq</code> to remove duplicates
(<code>sort</code> and <code>uniq</code> are probably optional but they're harmless and I didn't
want to fidget).</p>

<p>Finally, I create a mapping so that when I'm in normal mode, I can just
type <code>\o</code> and Vim will start filling out the command <code>BundleOpen</code> so
that all I have to type is the gem name, which I can autocomplete.</p>
]]></content>
  </entry>
  
</feed>

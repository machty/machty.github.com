<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Uniform Type Identifiers | machty's thoughtz]]></title>
  <link href="http://machty.github.com/blog/categories/uniform-type-identifiers/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2014-09-30T18:26:05-04:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/15/daily-journal/"/>
    <updated>2014-05-15T11:38:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/15/daily-journal</id>
    <content type="html"><![CDATA[<h2>Uniform Type Identifiers</h2>

<p>Turns out I never understood why Java and other languages/frameworks
embraces this style of "com.domain.somepackage". First off, this is
called <a href="http://en.wikipedia.org/wiki/Reverse_domain_name_notation">Reverse domain name notation</a>.</p>

<p>The purpose of this naming convention is two-fold:</p>

<h4>Avoids naming collisions from two different vendors</h4>

<p>By prefixing the package name with any sort of
unique identifier, "SOME-PREFIX-A.packageName" won't conflict with
"SOME-PREFIX-B.packageName".</p>

<h4>Sensible sort order / grouping</h4>

<p>You want packages from the same
vendor to be grouped together in sensible way; if you use the <code>apple</code>
and <code>carrots</code> packages from <code>food.somevendor.com</code> and the <code>bikes</code> package
from <code>things.somevendor.com</code>, if you didn't reverse the domain order, you might
end up with the following folder structure</p>

<pre><code>food/
  somevendor/
    com/
      apple
      carrots
things/
  somevendor/
    com/
      bikes
</code></pre>

<p>This is undesirable since you can't tell from this structure that apple,
bikes, and carrots all come from somevendor. Also, you there's a
needless repetition of the <code>somevendor/com</code> path in both directory
trees. If the domain name were inverted, you'd end up with:</p>

<pre><code>com/
  somevendor/
    food/
      apple
      carrots
    things/
      bikes
</code></pre>

<p>Less folders, less repetition, and more information is being conveyed.</p>

<p>Another way to think about it is that domain names are somewhat
backwards; we know that <code>.com</code>, <code>.net</code>, and
<a href="http://sandwich.technology"><code>.technology</code></a> are top-level domains (TLD),
but how/why is something top level appended at the end of a name? It
definitely makes domain names with subdomains harder to sort in a
meaningful way. I guess there's probably a good reason for this, worth
investigating in another journal entry.</p>

<p>Another good/quick SO explanation: http://stackoverflow.com/a/2475191/914123</p>

<h2>LevelDB</h2>

<ul>
<li>require('leveldbdatabase')</li>
<li>key value pair</li>
<li>scales, web scale</li>
<li>PolicyMic is sponsoring folk to work on it</li>
<li>IMPORTANT: is a library; you can wrap leveldb entirely in an app via C++ API, whereas Redis is a database server that you communicate with via a custom binary protocol</li>
</ul>


<h2>Vim: Visual Line</h2>

<p>Shift-V in vim goes into visual line mode, which means you select entire
lines for yanking/cutting, rather than having to precisely position your
cursor at the beginning or end of a line so as to not accidentally yank/cut
only part of a line.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[machty's thoughtz]]></title>
  <link href="http://machty.github.com/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2015-08-26T16:33:39-04:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Help me with Observables]]></title>
    <link href="http://machty.github.com/blog/2015/08/26/help-me-with-observables/"/>
    <updated>2015-08-26T14:11:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/08/26/help-me-with-observables</id>
    <content type="html"><![CDATA[<h2>How do I do this with Observables (or CSP or alternatives)</h2>

<p>I build/maintain <a href="http://www.expresscheckoutapp.com">Express Checkout</a>,
a hybrid app, which means it&#8217;s an Ember.js app running in an embedded
browser within an iOS/Android app that occasionally calls into the native app layer
to do native-specific things like turn on the camera, scan barcodes, register
for push notifications, etc.</p>

<p>I&#8217;ve been fascinated with <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md">Rx Observables</a>
for some time now and have used them to clean up a lot of the code in my
app that deals with asynchronous behavior and concurrency. But there&#8217;s
one part of my app I&#8217;ve been avoided refactoring with Observables
because I just can&#8217;t wrap my head around how to approach it and express
it with Observables, hence I&#8217;m enlisting any functionally-minded
Observables veterans to help me think about how to structure this.</p>

<!--more-->


<h2>The Situation</h2>

<p>In our hybrid web app, we have a screen that allows shoppers to scan
barcodes on items in a store. To navigate to this screen, a few things
must happen, in the following sequence:</p>

<ul>
<li>Shopper taps a &#8220;Start Shopping&#8221; button</li>
<li>The app fetches the current shopping session from the server</li>
<li>Once the session is fetched, we transition to the Ember.js route
called <code>scan</code>. I use the Ember animation/transition library
<a href="https://github.com/ef4/liquid-fire">Liquid Fire</a>, so the route
transition causes a sideways full screen transition as you would
expect from any iOS app.</li>
<li>Once the sideways transition finishes, we call into the native code to
turn on the camera/scanner</li>
<li>Once the camera/scanner is turned on, we remove the white CSS
background from the screen to reveal the native camera behind our
transparent webview, and from here on out the user can scan barcodes,
add items to their cart, etc.</li>
</ul>


<p>The part I&#8217;d like to focus on specifically is the timing of turning on
the native camera and removing the white background. Note the following
constraints:</p>

<ul>
<li>on both iOS and Android (though way worse on Android), turning on the
native camera while there is any sort of visual transition/animation
in the webview causes all sorts of hideous jank; this is why we
transition in with a white BG and only hide the BG after a few hundred
milliseconds after turning on the native camera</li>
<li>if the user immediately taps the back button (either on the screen or
android&#8217;s back button) immediately after transioning to the <code>scan</code>
route, any unnecessary camera or visual churn should be avoided: if
the camera hasn&#8217;t been turned on, don&#8217;t turn it on; if the white
background hasn&#8217;t been removed, don&#8217;t remove it</li>
<li>on the flipside, when transitioning out of the scan route, before we
do the sideways transition, we want to 1) re-enable white bg, 2) turn
of camera and wait a few hundred ms, and then 3) do the sideways
tranasition</li>
</ul>


<p>Right now, I handle all these cases with a state machine, but given all
the different entry/exit/abort possibilities, it&#8217;s ugly and complex.
I&#8217;ve had much success replacing similar async-managing state machines
in my app with Observables, so I&#8217;d like to do the same here, if
possible.</p>

<h2>A First Stab at the Problem</h2>

<p>One of the nice properties of Observables is that they know when they&#8217;ve
been subscribed-to and when they&#8217;ve been desubscribed-from. This
property alone is what makes Observables cancellable (unlike Promises,
that go go go until their predetermined chain of callbacks have run to
completion, regardless of whether anyone&#8217;s still listening).</p>

<p>For this problem, my intuition was to model the native camera as an
observable, as well as the white background that needs to become
transparent once the camera is good and ready.</p>

<p>With this approach, I can pretty elegantly model the series of events
that happen when transitioning into the <code>scan</code> route in a cancellable
manner:</p>

<pre><code>let enableCameraObservable = Observable.create(() =&gt; {
  cordovaService.turnOnCamera();

  // we could also have this observable be the thing that emits
  // scan events, since scan events can only happen while this
  // observable is still alive, but that's beyond the scope

  return () =&gt; {
    cordovaService.turnOffCamera();
  };
});

let makeBackgroundTransparent = Observable.create(() =&gt; {
  // set background to transparent
  return () =&gt; {
    // according to Observable.create API, this returned function
    // fires when the observable is de-subscribed; hence we can
    // use it for cleanup and setting the background back to white
  };
});

liquidFireDoneTransitioning()
  .delay(100)
  .flatMap(() =&gt; enableCameraObservable().delay(100))
  .flatMap(() =&gt; makeBackgroundTransparent())
  .takeUntil(routeTransitionAttempt)
  .subscribe((scanResult) =&gt; {
    // ...
  });
</code></pre>

<p>The chain of operators above is terse but expressive; it describes the
following behavior:</p>

<ul>
<li>wait 100ms between the sideways Liquid Fire transition and turning on the camera</li>
<li>wait 100ms between turning on the camera and making the background transparent</li>
<li>throughout all of this, watch for routeTransitionAttempts, and if any
of them come through, stop whatever we&#8217;re doing with the previous
observable. This means: 1) the camera will be turned off&#8230; only if we
ever got to the point that it was turned on, and 2) the background
will be reset to white&#8230; if it ever got to the point that it was made
transparent. In other words, the dispose functions for each observable
are only called if they were ever subscribed to.</li>
</ul>


<p>Possible timeline of events</p>

<ul>
<li>0: <code>liquidFireDoneTransitioning</code></li>
<li>50ms: if <code>routeTransitionAttempts</code> fires, nothing happens</li>
<li>100ms: <code>enableCameraObservable</code> is subscribed-to; camera is turned on</li>
<li>150ms: if <code>routeTransitionAttempts</code> fires, only
<code>enableCameraObservable</code> dispose function fires, turning off the camera</li>
<li>200ms: <code>makeBackgroundTransparent</code> is subscribed-to; background is
made transparent, revealing native camera view</li>
<li>250ms and after: if <code>routeTransitionAttempts</code>, both <code>enableCameraObservable</code> and
<code>makeBackgroundTransparent</code> subscriptions are disposed, the camera is
turned off, the screen turns to white.</li>
</ul>


<p>This is actually pretty elegant for the most part; writing a more
imperative version of this code would involve way more code, that
managed manually setting / cancelling timers, based on how far along the
process was before a later <code>routeTransitionAttempt</code> was made. And it&#8217;s
these kind of refactorings that have cleaned up code all over the app.</p>

<h2>Async Disposables?</h2>

<p>But there&#8217;s one major omission here: making the disposals async. For
anti-jank performance reasons, we need the disposals to be
staggered on the way out, just as they are staggered on the way in, and
we need the <code>routeTransitionAttempt</code> to be delayed while it waits for
this process to complete.</p>

<p>And this, my functionally-minded Rx-experienced friends, is where I am
at a loss and would appreciate your advice. I can&#8217;t seem to settle on a
pattern that maintains the elegance of the disposable native camera
and transparent backgrounds cleaning up after themselves, because those
disposables happen right at the same time. Of course I could throw some
hacky <code>setTimeout</code>s in there, but then I&#8217;m just introducing more
potential race conditions and trying to sweep what should be additional
observables/subscriptions under the rug. Of course, I&#8217;m happy to do that
pragmatically to ship a feature, but I&#8217;d really like to understand how
to better structure these interactions in a Observable-minded manner.</p>

<p>So please, if you&#8217;ve got some ideas that might set me straight, I&#8217;d love
to hear them; please comment below or hit me up at
<a href="https://twitter.com/machty">@machty on Twitter</a>.</p>

<p>Also, if you see this as something that could be more
appropriately/easily solved by CSP (communicating sequential processes,
e.g. ClojureScript&#8217;s core.async), I&#8217;d love to hear what that&#8217;d entail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ewouldblockagain]]></title>
    <link href="http://machty.github.com/blog/2015/07/29/ewouldblockagain/"/>
    <updated>2015-07-29T16:53:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/07/29/ewouldblockagain</id>
    <content type="html"><![CDATA[<h2>EAGAIN</h2>

<p>If you try a non-blocking read and there&#8217;s no data available for you,
then EAGAIN fires.</p>

<p>https://github.com/redis/redis-rb/blob/master/lib/redis/connection/ruby.rb#L47-L62</p>

<pre><code>def _read_from_socket(nbytes)
  begin
    read_nonblock(nbytes)

  rescue Errno::EWOULDBLOCK, Errno::EAGAIN
    if IO.select([self], nil, nil, @timeout)
      retry
    else
      raise Redis::TimeoutError
    end
  end

rescue EOFError
  raise Errno::ECONNRESET
end
</code></pre>

<p>So:</p>

<ol>
<li>Try and read in a non-blocking manner</li>
<li>If no data is available the read, IO.select to block for <code>@timeout</code>
seconds until there&#8217;s something to read. If there&#8217;s nothing to read
after <code>@timeout</code> seconds, it returns nil and raises a redis error.</li>
<li>If there is something to read, start over and try a non-reading
block again, which should succeed.</li>
</ol>


<p>If it throws TimeoutError then the redis call took longer than the
default 5 seconds, probably cuz the server&#8217;s overwhelmed.</p>

<p>So, why even bother <code>read_nonblock</code> at first if you&#8217;re just going to
block on IO.select? Why not just do a blocking read with a timeout? I&#8217;m
guessing because it doesn&#8217;t exist since it can otherwise be expressed
with the above structure of 1) try nonblocking read and 2) block with
IO.select and retry again. This answer is probably wrong but jesus
christ this stuff is nuts.</p>

<h2>XCode Build Settings</h2>

<p>BOLD means motherfuckin STRING LITERAL as opposed to</p>

<h2>Apple iOS plist format</h2>

<p>https://gist.github.com/palaniraja/1051160</p>

<p>Then you need a link like</p>

<pre><code>&lt;a href="itms-services://?action=download-manifest&amp;url=itms-services://?action=download-manifest&amp;url=http:/oursite.com/myApp.plist" id="text"&gt;
</code></pre>

<p>http://stackoverflow.com/questions/8439127/ios-enterprise-distribution-through-ota</p>

<p>https://longtrieuquang.wordpress.com/2014/08/01/how-to-distribute-your-ios-app-ota-with-enterprise-account/</p>

<h2>Plot Armor</h2>

<p>http://tvtropes.org/pmwiki/pmwiki.php/Main/PlotArmor</p>

<p>When you&#8217;re so essential to the story that obviously you won&#8217;t be killed
by some fight or some bullet, you have plot armor. Because you&#8217;re
crucial to the plot.</p>

<h2>Point ember components to github zipped archives</h2>

<p>e.g. instead of</p>

<pre><code>"ember": "components/ember#fed005fdc4dc3a8f19324a887c1021e8bf19acf4",
</code></pre>

<p>do</p>

<pre><code>"ember": "https://github.com/components/ember/archive/ae3730263f416204e424f884c8444190e5a967dc.zip",
</code></pre>

<p>The former will clone the massively large repo of compiled Ember builds,
which takes forever even with an insanely fast connection, while the
latter just downloads a zip of a snapshot of the directory tree at that
particular checkout, which is FAST.</p>

<h2>Time Zones</h2>

<p>Basically this railscast is amazing.</p>

<p>http://railscasts.com/episodes/106-time-zones-revised</p>

<p>Ruby <code>Time.now</code> uses system timezone. Verifiable by opening <code>irb</code> and
running <code>Time.now</code> many times whilst changing the timezone in system
preferences.</p>

<p>Use <code>around_filter</code> with <code>Time.use_zone(current_user.time_zone, &amp;block)</code></p>

<h2>Less mixins vs extend</h2>

<p>http://lesscss.org/features/#extend-feature-use-cases-for-extend</p>

<p>Mixins copy and paste CSS rules into everyone who mixes it in. Extend
just creates multiple selections for the same rules, which almost
certainly means smaller output CSS size (but perhaps adds to CSS engine
overhead since there are more rules to check against?).</p>

<h2>objects vs memoizations</h2>

<p>Say you have an array of people:</p>

<pre><code>people = [
  {
    id: 1,
    first_name: "Alex",
    last_name:  "Matchneer",
    follows: [
      312,
      { somePersonObjOfSameRecursiveStructure },
      999
    ]
  },
  {
    id: 2,
    first_name: "Noel",
    last_name:  "Gallagher",
    follows: [
      1,
      { somePersonObjOfSameRecursiveStructure }
    ]
  },
]
</code></pre>

<p>What&#8217;s the difference between</p>

<pre><code>people[0]
</code></pre>

<p>and</p>

<pre><code>get(people, 0)
</code></pre>

<p>? What&#8217;s the difference between</p>

<pre><code>people[0].first_name
</code></pre>

<p>and</p>

<pre><code>get(get(people, 0), 'first_name')
</code></pre>

<p>? What&#8217;s the difference between</p>

<pre><code>person # a var with mem address 0x00001234
</code></pre>

<p>and</p>

<pre><code>get(MEMORY, 0x00001234)
</code></pre>

<p>?</p>

<p>It&#8217;s all just memoization. In the end, every object has a memory
address. Variables are just memoized <code>get(MEMORY, someMemoryAddress)</code>.</p>

<p><code>===</code> in javascript is just memory address comparisons.</p>

<p>What if you needed to print a credits page, and the same person had
multiple roles, e.g. director, producer, actor, and you wanted to print
out a formal version of their first and last name. Maybe you&#8217;d write a
function:</p>

<pre><code>function formalizedName(person) {
  return `M. ${person.first_name} ${person.last_name}`;
}
</code></pre>

<p>But if you&#8217;re rendering a page and that name shows up multiple times,
you&#8217;re wastefully recomputing, concatenating. Let&#8217;s assume avoiding
recomputation/concatenation would improve performance by some noticeable
margin. You could memoize, i.e. store the result</p>

<p>blah blah blah</p>

<h2>binding and immutability</h2>

<pre><code>  Hello . Your friends are:
</code></pre>

<p>if <code>people</code> is an immutable data structure, then any of the following
modifications will produce a new immutable value of <code>people</code>:</p>

<ul>
<li>a person&#8217;s name changes</li>
<li>a person&#8217;s list of friends changes</li>
<li>a person&#8217;s friend&#8217;s name changes</li>
<li>etc</li>
</ul>


<p>But we&#8217;re using &#8220;, which means we&#8217;re creating bindings (internally
we&#8217;re creating keystreams, and those create bindings according to the
ember object model). This means we&#8217;ll be creating meta objects on each
immutable data pojo&#8230; which is wasteful and useless considering they&#8217;re
immutable, and their properties can&#8217;t can&#8217;t change.</p>

<p>So why not use <code>unbound</code> helper within each curly? It&#8217;d save us an
observer, right? It&#8217;d save us writing to <code>meta</code>, right? Sure, but it
also means that it won&#8217;t update the second time around, because it&#8217;s
unbound.</p>

<p>So basically, &#8220; does two things:</p>

<p>1) Sets up a keystream
2) Sets up a binding</p>

<p>TL;DR to get immutable structures bindable in a performant manner in
Ember, we need to make it possible to opt into a different KeyStream
constructor:</p>

<ol>
<li>it doesn&#8217;t call add/removeObserver (wasteful since it&#8217;ll never fire)</li>
<li>don&#8217;t assume that just because <code>changed, that</code>
changed; with immutable data, it&#8217;s pretty likely a.prop is actually
the same assuming that&#8217;s not one of the properties that was changed
between the old immutable value and the new immutable value.</li>
</ol>


<h2>Lazy Observables / Ember Streams</h2>

<p>Unlike push-only observables, Ember streams are push/pull. You push
that something has changed by <code>notify()</code>, and then later on you pull
with <code>value()</code>, which only runs through computations once.</p>

<p>This implies laziness. In Ember, the laziness of an LO lasts from the
first <code>.set</code> that changes a watched value until the <code>render</code> run loop
queue.</p>

<p>For similar reasons, this is why computed properties don&#8217;t work with
observers without an explicit get to eagerly flush a CP.</p>

<p>But anyway, what are the tradeoffs between LO and push-only Observables?</p>

<p>Well, one is that, if you funnel an O into an LO, then
you&#8217;re discarding a bunch of onNexts until some arbitary pull into
the future (yet you only end up reading the most recent &#8220;event&#8221;).</p>

<p>Here&#8217;s a stab at lazy observables:
http://jsbin.com/polude/6/edit?html,js,console,output</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sriracha]]></title>
    <link href="http://machty.github.com/blog/2015/07/21/sriracha/"/>
    <updated>2015-07-21T20:28:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/07/21/sriracha</id>
    <content type="html"><![CDATA[<h2>Android GUI Architecture</h2>

<p>Single-threaded, event-driven, nestable components, much like:</p>

<ul>
<li>AWT

<ul>
<li>Java&#8217;s original cross-platform UI widget toolkit</li>
</ul>
</li>
<li>Swing

<ul>
<li>richer widget set</li>
<li>draws its own widgets rather than using host OS&#8217;s user interface widgets</li>
</ul>
</li>
<li>SWT

<ul>
<li>alternative to AWT/Swing, heavy use/development by Eclipse</li>
</ul>
</li>
<li>LWUIT (Lightweight User Interface Toolkit)

<ul>
<li>for Java ME (micro edition, mobile phones, etc)</li>
</ul>
</li>
<li>others</li>
</ul>


<p>So what UI library / environment doesn&#8217;t have a single UI thread? It
doesn&#8217;t seem like there is one. UI data-structures are so fragile and
coupled that you&#8217;d need to mutex the hell out of them any way; easier to
just have a single UI thread.</p>

<p>http://stackoverflow.com/a/1677785</p>

<h2>Android Event Loop</h2>

<ol>
<li>User touches the screen</li>
<li>Android system enqueues action on event queue</li>
<li>UI thread dequeues event, dispatches to handler</li>
<li>Tell the Model that state has changed</li>
<li>Model notifies UI framework that some portion of display is stale
(which is just another action enqueued to the same event queue)</li>
<li>redraw event removed from queue, dispatched to a View, tree of views
is redrawn</li>
</ol>


<p>Specific example:</p>

<ol>
<li>User taps screen, framework enqueues MotionEvent</li>
<li>MotionEvent is dequeued, framework dispatches to the first view
within the bounding box of where tap happened</li>
<li>Button handler tells model to resume playing a song</li>
<li>Model starts playing song, enqueues redraw request</li>
<li>redraw request dequeued, redraw occurs</li>
</ol>


<p>A Button therefore acts like both a Controller and a View; it handles
tap events and updates a model, and then gets redrawn accordingly to
reflect updated state.</p>

<p>Never update display within a controller handler; just issue redraw
requests. Aside from separating concerns, this lets multiple redraw
events essentially coalesce into one, after ALL changes caused by the
handler have been made.</p>

<p>Single-threaded-ness means:</p>

<ul>
<li>no synchronize blocks b/w View and Controller; just enqueue and the
single threaded UI looper will pop. QUESTION: do you need to
synchronize pushing to the queue? What if multiple threads are pushing
to the queue? ANSWER: the queue is managed by the Hander class, which
is bound to a specific Looper and thread. You <code>post</code> to the Handler,
and Handler <code>post</code> methods are threadsafe.</li>
<li>it&#8217;s easy to completely block/stall your application if you&#8217;re doing
something long/slow/expensive; move that logic to some other thread</li>
</ul>


<h2>What&#8217;s a widget?</h2>

<p>Leaves in the view tree, basically.</p>

<h2>Tunneling to Redis from the browser</h2>

<p>Was reading a Heroku thing about not abusing tunnels via websockets, so
I figured I&#8217;d connect to Redis from the browser because why not.</p>

<p>First off</p>

<pre><code>npm install -g wstunnel
</code></pre>

<p>Then in somefile.html</p>

<pre><code>&lt;input type="text" id="textInput"/&gt;

&lt;pre id="messages"&gt;&lt;/pre&gt;

&lt;script type="text/javascript" charset="utf-8"&gt;
  var redisSocket = new WebSocket("ws://localhost:8080", ["tunnel-protocol"]);

  redisSocket.onmessage = function(event) {
    // need FileReader to convert from blob to text
    var reader = new window.FileReader();
    reader.readAsText(event.data);
    reader.onloadend = function() {
      messages.innerHTML += reader.result;
    }
  };

  textInput.addEventListener('keypress', function(e) {
    if (e.keyCode !== 13) { return; }
    redisSocket.send(new Blob([textInput.value + "\n"]));
    textInput.value = "";
  }, false);
&lt;/script&gt;
</code></pre>

<p>Then you can type in raw redis commands and get raw redis responses.
Pretty cool.</p>

<h2>ngrok</h2>

<p>Tunnel public URL to your localhost server. Useful for:</p>

<ul>
<li>testing webhooks</li>
<li>testing apps that don&#8217;t have access to localhost, etc</li>
</ul>


<h2>Localytics (and analytics terminology)</h2>

<p><a href="https://en.wikipedia.org/wiki/Attribution_(marketing">Attribution</a>)</p>

<p>The quantification of how a given ad impression influences a user
conversion rates. Use Attribution to find out which ad campaigns seem to
be the most effective. I guess you could also say use Attribution to
figure out which entry points into an app most often lead to conversion.</p>

<ul>
<li>sessionTimeoutSeconds

<ul>
<li>time after <code>close()</code> that the session is actually considered closed.</li>
<li>if <code>open</code> is called within the timeout&#8230; on the same localyticsRequest object.</li>
</ul>
</li>
</ul>


<h2>Google Analytics events</h2>

<p>https://support.google.com/analytics/answer/1033068#Anatomy</p>

<h3>Category</h3>

<p>Over-arching string name for a category of events.</p>

<ul>
<li>You need to decide ahead of time whether you care to distinguish
between &#8220;Videos - Cats&#8221; and &#8220;Videos - Dogs&#8221; or whether you just
want them grouped under &#8220;Videos&#8221;</li>
<li>You&#8217;re screwed if you push a version of your code sending a category
of &#8220;Video&#8221; and later change to &#8220;Videos&#8221;; your historical data will
remain there as &#8220;Video&#8221; (this is probably true for all Event fields)</li>
</ul>


<h3>Action</h3>

<p>The thing being done, the name of the event. If you&#8217;re category is
&#8220;Videos&#8221;, you might have actions named:</p>

<ul>
<li>Play</li>
<li>Stop</li>
<li>Pause</li>
</ul>


<p>Caveats:</p>

<ul>
<li>&#8220;All actions are listed independently from their parent categories&#8221;.
This means if you have re-use the event name &#8220;Play&#8221; between parent
categories &#8220;Videos&#8221; and &#8220;Songs&#8221;, they&#8217;ll all be munged together, and
it&#8217;s only when you do a breakdown of &#8220;Play&#8221; events that their differing
parent categories will show up. But you probably don&#8217;t want to have
something so general as a &#8220;click&#8221; event across a ton of different
categories.</li>
<li>&#8220;A unique event is determined by a unique action name&#8221;. Oh ok this
explains the above a bit &#8220;You can use duplicate event names across
categories&#8221;.</li>
</ul>


<h2>document.readyState and friends</h2>

<ul>
<li><code>DOMContentLoaded</code>

<ul>
<li>DOM and synchronous scripts (the default) have been loaded</li>
<li>does NOT wait for stylesheets, images, subframes, etc</li>
<li>scripts can be made async to not interfere w this loading process</li>
<li>UNSURE: can listen on <code>window</code> or <code>document</code></li>
</ul>
</li>
<li><code>load</code> event

<ul>
<li>all subresources (images, stylesheets, subframes) have loaded</li>
<li>only fires on <code>window</code></li>
</ul>
</li>
</ul>


<p>But you can also ask <code>document.readyState</code> where you are in the process:</p>

<p>https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState</p>

<ul>
<li>loading

<ul>
<li>The document is still loading.</li>
</ul>
</li>
<li>interactive

<ul>
<li>The document has finished loading and the document has been parsed but sub-resources such as images, stylesheets and frames are still loading. The state indicates that the DOMContentLoaded event has been fired.</li>
</ul>
</li>
<li>complete

<ul>
<li>The document and all sub-resources have finished loading. The state indicates that the load event has been fired.</li>
</ul>
</li>
</ul>


<p>Add <code>document.readyState</code> to your watches and run:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width"&gt;
    &lt;title&gt;DOMContentLoaded&lt;/title&gt;
  &lt;/head&gt;

  &lt;script type="text/javascript" charset="utf-8"&gt;

    debugger;

    window.addEventListener("load", function(e) {
      debugger;
      //alert("i am loaded");
    }, false);

    window.addEventListener("DOMContentLoaded", function(e) {
      debugger;
    }, false);

  &lt;/script&gt;
  &lt;body&gt;
    body
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>window.onerror and CORS</h2>

<p>http://blog.errorception.com/2012/04/script-error-on-line-0.html</p>

<p>Script error on line 0.</p>

<p>This almost certainly means a script loaded via CORS fired an error.
Modern browsers zero-out the data</p>

<p>http://jeremiahgrossman.blogspot.in/2006/12/i-know-if-youre-logged-in-anywhere.html</p>

<p>The above 2006 link demonstrates how the errors produced by a non CORS
remote script can be used to sniff out which sites you&#8217;re logged into,
and hence modern browsers strip all information from external non CORS
scripts to just say line 0 and &#8220;Script Error.&#8221;. This thwarts bugsnag
unless the script you load is CORS.</p>

<h2>Ruby Exception#cause</h2>

<p>If one caught exception causes another to be raised, Ruby keeps track of
all preceding exceptions within a chain of Exception#cause. Bugsnag uses
this to great effect.</p>

<pre><code>begin
  begin
    raise "wat"
  rescue =&gt; e
    oasnoiasd
  end
rescue =&gt; e
  puts e.cause.backtrace # print the backtrace of RuntimeError "wat"
end
</code></pre>

<p>https://bugsnag.com/blog/ruby-2-1-exception-causes</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPF 10000]]></title>
    <link href="http://machty.github.com/blog/2015/06/28/spf-10000/"/>
    <updated>2015-06-28T17:06:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/06/28/spf-10000</id>
    <content type="html"><![CDATA[<h2>SPF: Sender Policy Framework</h2>

<p>Prevents sender spoofing: server receiving STMP mail can check the
sender&#8217;s IP against SPF DNS records. SPF records are stored in
both SPF and TXT records and have a format like:</p>

<pre><code>"v=spf1 a mx ip4:55.11.65.20/2 ip4:90.2.123.112/2 ip4:176.33.87.19/2 ip4:212.63.89.33/2 -all"
</code></pre>

<p>Question: what if the sender sends the wrong IP? Answer: then the server
wouldn&#8217;t be able to communicate back to the sender (SMTP operates over
TCP, so you have the handshake and connection state preventing IP
spoofing).</p>

<p>Google apps for businesses makes you add an SPF record to your domain so
that it can send e-mail on your behalf and not have recipient servers
block it.</p>

<h2>SRV records: share the location of services via DNS</h2>

<p>https://tools.ietf.org/html/rfc2782</p>

<p>Sample:</p>

<pre><code>_sip._tcp.example.com. 86400 IN SRV 10 60 5060 bigbox.example.com.
</code></pre>

<p>Google apps for businesses also use this for XMPP service location. SRV
records have a priority in a weight. Clients must use the lowest
priority services, and then if there are multiple services in that
priority, randomly select using the provided <code>weight</code>s.</p>

<h2>Ember tests</h2>

<pre><code>import hbs from 'htmlbars-inline-precompile';
import { moduleForComponent, test } from 'ember-qunit';

moduleForComponent('my-component', {
  integration: true
});

test('block params work', function(assert) {
  this.render(hbs`

      This happened  days ago.

  `);

  this.set('theDate', new Date(2015, 2, 11));
  assert.equal(this.$().text().trim(), "This happened 123 days ago.");
});
</code></pre>

<p>In recent versions, <code>integration:true</code> is the default.</p>

<p>Checked in:</p>

<p>https://github.com/switchfly/ember-test-helpers/pull/38</p>

<p>Nice example:</p>

<p>https://github.com/yapplabs/ember-radio-button/blob/master/tests/unit/components/radio-button-test.js#L27-L56</p>

<p>Aaaaand a nice blag!</p>

<p>http://alisdair.mcdiarmid.org/2015/06/20/ember-component-integration-tests.html</p>

<h2>Vim: save and run</h2>

<p>From DAS: easy enough to just write a quick <code>map</code> on the fly:</p>

<pre><code>map ,t :w\|!ruby %&lt;cr&gt;
</code></pre>

<h2>JS Regex: multiline</h2>

<p>Use <code>/m</code> option and your <code>^</code> and <code>$</code> will match beginnings/ends of lines
rather than beginnings and ends of the entire string. :)</p>

<h2>Hyperthreading, Physical vs Logical Cores</h2>

<pre><code>machty.github.com :: sysctl hw.physicalcpu
hw.physicalcpu: 4
machty.github.com :: sysctl hw.logicalcpu
hw.logicalcpu: 8
</code></pre>

<p>Feature of Intel Core i5 and i7 (probably others too). Allows, in
certain cases, multiple executions to be run on a single core, squeezing
out more power out of a single core. Allows multiple threads to run on
the same core. Gives a 20% performance boost in a lot of cases (rather
than 100% boost of a full on new core).</p>

<h2>Ember boot</h2>

<p>https://github.com/emberjs/ember.js/pull/10256#issuecomment-113846021</p>

<ol>
<li>Ember loads.</li>
<li>You create an <code>Ember.Application</code> instance global (e.g. <code>App</code>).</li>
<li>At this point, none of your classes have been loaded yet.</li>
<li>As your JavaScript file is evaluated, you register classes on the application (e.g. <code>App.MyController = Ember.Controller.extend(…);</code>)</li>
<li>Ember waits for DOM ready to ensure that all of your JavaScript included via <code>&lt;script&gt;</code> tags has loaded.</li>
<li>Initializers are run.</li>
<li>If you need to lazily load code or wait for additional setup, you can call <code>deferReadiness()</code>.</li>
<li>Once everything is loaded, you can call <code>advanceReadiness()</code>.</li>
<li>At this point, we say that the <code>Application</code> is ready; in other words, we have told Ember that all of the classes (components, routes, controllers, etc.) that make up the app are loaded.</li>
<li>A new instance of the application is created, and instance initializers are run.</li>
<li>Routing starts and the UI is rendered to the screen.</li>
</ol>


<h2>Brew Terminology</h2>

<p>https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Formula-Cookbook.md#terminology&#8212;homebrew-speak</p>

<p>Formula The package definition  /usr/local/Library/Formula/foo.rb
Keg The installation prefix of a Formula    /usr/local/Cellar/foo/0.1
opt prefix  A symlink to the active version of a keg    /usr/local/opt/foo
Cellar  All kegs are installed here /usr/local/Cellar
Tap An optional repository (git) of Formulae    /usr/local/Library/Taps
Bottle  Pre-built (binary) Keg that can be unpacked qt-4.8.4.mountain_lion.bottle.1.tar.gz</p>

<h2>Slack: Shift Escape</h2>

<ul>
<li>shift-esc marks all channels as read</li>
</ul>


<h2>Ember fix force push?</h2>

<p>Here&#8217;s a git fetch</p>

<pre><code>From github.com:emberjs/ember.js
 + 61c9ba6...c3f15cf master     -&gt; origin/master  (forced update)
   4aab5ad..d1a1a7c  beta       -&gt; origin/beta
 + 5a084f7...e7866ca in-template-config -&gt; origin/in-template-config  (forced update)
 + 172002f...642f5c3 remove-bind-attr -&gt; origin/remove-bind-attr  (forced update)
   c3accfb..1ad89cf  stable     -&gt; origin/stable
</code></pre>

<h2>vim-rails and other shit i should already know</h2>

<p>Come on this has been out forever how do you not know this.</p>

<ul>
<li>ctrl-O back</li>
<li>ctrl-I forward</li>
<li>gf: go to file of hovered-over class</li>
</ul>


<h2>Justdelete.me</h2>

<p>http://justdelete.me/</p>

<p>Instructions for how to remove yourself from various services, social
media, etc.</p>

<h2>Java <code>final</code> and immutable objects</h2>

<p>Since Java strings are immutable, the String class must be declared
<code>final</code>. Otherwise, someone could just subclass <code>String</code> and mutate it,
breaking the immutable guarantees of the parent String class.</p>

<h2>Java <code>@Override</code> annotation</h2>

<p>Not strictly required, but hints to the compiler what you&#8217;re trying to
do, and errors out if you fail to correctly override a parent class&#8217;s
method.</p>

<h2>Java: Checked vs Unchecked Exceptions</h2>

<p>Checked: required in <code>throws</code> clause.</p>

<p>Unchecked: not required in <code>throws</code> clause, must extend <code>RuntimeException</code>.</p>

<p>This might be wrong but checked exceptions kinda just feel like they&#8217;re
just part of the type signature, e.g. &#8220;this is a method that returns a
<code>Result</code>, <code>IOException</code>, <code>ParseException</code>, or <code>SomeOtherThing</code>&#8221;. In
functional land it seems like it&#8217;d be really easy to switch based on the
result.</p>

<h2>Android: Dalvik</h2>

<p><a href="https://en.wikipedia.org/wiki/Dalvik_%28software%29">wiki</a></p>

<p>Android compiles your java down to JVM bytecode <code>.class</code> files, and then
the dexer compiles <code>.class</code> files down to Dalvik bytecode. Androids
don&#8217;t have JVMs. They have DVMs. Actually, they did until about Android
4.4. Now they&#8217;re replaced by <a href="https://en.wikipedia.org/wiki/Android_Runtime">Android Runtime</a>.</p>

<h2>Android Activity</h2>

<p>Activity is UI + execution. It&#8217;s a component, I guess.</p>

<p>Activities invoke each other with Intents. Several activities might be
registered for a given Intent. An application is a bundle of activities.
Activities don&#8217;t directly call code on other activities; rather, intents
are used. Don&#8217;t hold on to references to Activities; they&#8217;re meant to be
aggressively GC&#8217;d.</p>

<p>A Task is a chain of user interactions that might span multiple
activities (sometimes apps), e.g. going to Messaging, looking up a
Contact, and calling that contact (3 separate activities from 3
different apps).</p>

<p>A Service is a background task, e.g. music player, or any kind of server
waiting for a client interaction. Android avoids reclaiming services and
keeps them alive unless extreme memory pressure.</p>

<h2>Android multi-user</h2>

<p>Android runs on Linux, and each application vendor gets its own user and
group, and all applications installed are run under that user and group.
So basically applications can&#8217;t access other applications&#8217; data, unless
they&#8217;re from the same application vendor (as determined by the keystore
that signed the release apk?).</p>

<h2>String#%</h2>

<p>http://ruby-doc.org/core-2.2.2/String.html#method-i-25</p>

<pre><code>"foo = %{foo}" % { :foo =&gt; 'bar' }        #=&gt; "foo = bar"
</code></pre>

<h2>Base64 from the shell</h2>

<pre><code>echo "wat" | openssl enc -base64 -A
d2F0Cg==
</code></pre>

<p>From http://www.w3.org/TR/SRI/#goals</p>

<pre><code>echo -n "alert('Hello, world.');" | openssl dgst -sha256 -binary | openssl enc -base64 -A
</code></pre>

<h2>SubscribeOn vs ObserveOn</h2>

<p>http://blogs.msdn.com/b/rxteam/archive/2009/11/21/observable-context-observable-subscribeon-and-observable-observeon.aspx</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anermic]]></title>
    <link href="http://machty.github.com/blog/2015/06/11/anermic/"/>
    <updated>2015-06-11T11:39:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/06/11/anermic</id>
    <content type="html"><![CDATA[<h2>Nils nils nils</h2>

<p>Yes, use <code>.fetch()</code> over <code>[]</code> if you&#8217;re working with an options hash
where all fields are expected/required so that you don&#8217;t accidentally
leak nils. But <code>.fetch(:wat, nil)</code> is the
most pointless thing of all time. It adds no value over <code>[:wat]</code>. So
stop thinking about it, Matchnozzle!</p>

<h2>JSON Pointer</h2>

<p>RFC: https://tools.ietf.org/html/rfc6901</p>

<p>TL;DR defines how to reference values within a JSON doc in a
standardized way, including via normal URIs. So potentially you could
cite a value in an API request from Wikipedia I guess.</p>

<p>Also used in JSON Patch to describe the path to changed things.</p>

<h2>Persistent Data Structure</h2>

<p>https://en.wikipedia.org/wiki/Persistent_data_structure</p>

<p>Preserves a previous version of itself when modified; often intertwined
with &#8220;immutable&#8221; since in some languages/libraries like Clojure data
structures internally share structure with others between operations.</p>

<h2>Racket</h2>

<p>Lispy language that compiles down to bytecode run on a proprietary
runtime.</p>

<p>Excellent article: http://programming-puzzler.blogspot.com/2010/08/racket-vs-clojure.html</p>

<p>In short, Clojure wins because of data structures (but is still
annoyingly limited by Java ties; no tail recursion, poor performance w
numbers sometimes, etc).</p>

<h2>Bottom line</h2>

<p>Literally the bottom line of a statement, where the total is calculated.
That&#8217;s what the saying&#8217;s referring to when folk say how&#8217;s this affect
our bottom line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brooch]]></title>
    <link href="http://machty.github.com/blog/2015/05/25/brooch/"/>
    <updated>2015-05-25T01:51:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/05/25/brooch</id>
    <content type="html"><![CDATA[<h2>Brooch</h2>

<p>wtf is a brooch.</p>

<p>http://en.wikipedia.org/wiki/Brooch</p>

<p>Decorative jewelry that can be attached to garments, often to hold them
closed. Could be collars to shirt, could be holding together a robe-ish
thing. Brooch brooch brooch. Remember that shit.</p>

<h2>Android HW Accel</h2>

<p>There&#8217;s hardware acceleration in the Android rendering pipeline since
Honeycomb, Android 3.0, which came out Feb 2011. By default,
the manifest attr that controls this is set to false:</p>

<pre><code>&lt;application ... android:hardwareAccelerated="false"&gt;
</code></pre>

<p>So you&#8217;d have to set that to true to enable hw accel globally. Then
there&#8217;s finer granularity for <code>window</code> and <code>View</code> via setFlags and
setLayerType.</p>

<h2>Amazon Local</h2>

<p>What it is? Google autocomplete search elucidates:</p>

<p>&#8220;amazon local vs&#8221;</p>

<ul>
<li>groupon</li>
<li>livingsocial</li>
<li>square</li>
</ul>


<p>Seems to promote your business via groupon-esque deals.</p>

<h2>Java Anonymous Classes</h2>

<p>Weird syntax I didn&#8217;t recognize. Basically lets you instantiate an
anonymous class assuming you don&#8217;t need to share the class. The cool
thing about this is that you can implement/instantiate an instance of a
class based entirely on an Interface (this was weird for me since
Interfaces in Java seem like these ephemeral ghostly non-existent things
that normally take a lot of verbose code to instantiate).</p>

<p>https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html</p>

<pre><code>public class HelloWorldAnonymousClasses {

    interface HelloWorld {
        public void greet();
        public void greetSomeone(String someone);
    }

    public void sayHello() {
        // this a function body!

        // this is a "local" class... which means you define it,
        // and...
        class EnglishGreeting implements HelloWorld {
            String name = "world";
            public void greet() {
                greetSomeone("world");
            }
            public void greetSomeone(String someone) {
                name = someone;
                System.out.println("Hello " + name);
            }
        }

        // ... THEN you instantiate it
        HelloWorld englishGreeting = new EnglishGreeting();

        // This is an anonymous class; define it at the same time
        // you instantiate it.
        HelloWorld frenchGreeting = new HelloWorld() {
            String name = "tout le monde";
            public void greet() {
                greetSomeone("tout le monde");
            }
            public void greetSomeone(String someone) {
                name = someone;
                System.out.println("Salut " + name);
            }
        };
</code></pre>

<h2>Wadsworth Constant</h2>

<p>http://www.urbandictionary.com/define.php?term=Wadsworth+Constant</p>

<blockquote><p>The Wadsworth Constant is the fundamental idea that the true meaning of a video, conversation, or comment approaches importance after approximately 30% of it has been skipped over.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cransible]]></title>
    <link href="http://machty.github.com/blog/2015/05/11/cransible/"/>
    <updated>2015-05-11T23:38:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/05/11/cransible</id>
    <content type="html"><![CDATA[<h2>ControlPersist</h2>

<p>A feature of SSH that multiplexes ssh sessions over one TCP connection,
cuts down TCP connection overhead, etc. Ansible benefits from it.</p>

<h2>Host-based authentication</h2>

<p>hence <code>pg_hba.conf</code>.</p>

<h2>binstubs and gem</h2>

<p>here&#8217;s a binstub</p>

<pre><code>require 'rubygems'
gem 'bundler'
load Gem.bin_path('bundler', 'bundle')
</code></pre>

<p>binstubs prep <code>$LOAD_PATH</code> (<code>$:</code> is the same thing) before a gem is run.</p>

<p>The <code>gem 'bundler'</code> command prepends <code>LOAD_PATH</code> with the specified
gem&#8217;s load paths. Additional calls to gem append after the load paths of
earlier gems.</p>

<h2>fail2ban</h2>

<p>scans your logfiles, looks for malicious activity, bans bad guys for a
while.</p>

<h2>Digital Ocean droplets have public IPs, ec2s are priv</h2>

<p>ec2 <em>does</em> expose public url but it has to go through a firewall defined
by your security group. Note that this is obvious because, within an ec2
instance, its IP is in one of the private IP address ranges
(10.something, 192.168.something, and i think 172.something).
So <em>can</em> you use a private IP publicly?</p>

<p>http://serverfault.com/questions/57155/can-an-ip-address-in-the-private-range-be-used-as-a-public-address</p>

<p>You <em>could</em>, but any network admin/ISP is going to block egress and
ingress packets sourced/destined for any of these ranges. This prevents
IP spoofing among other things, e.g. you can&#8217;t forge a fake packet and
expect it to be routed to some internal server, which might read and
respond to the packet and cause damage&#8230; all of this is avoided by
internal servers using private IPs.</p>

<h2>Ansible: modules vs playbooks vs rules</h2>

<ul>
<li>playbook

<ul>
<li>list of &#8220;plays&#8221;</li>
</ul>
</li>
<li>play

<ul>
<li>map a group of hosts to some well-defined roles</li>
</ul>
</li>
<li><h2>roles</h2></li>
<li>tasks

<ul>
<li>call to an ansible module (which can directly be done via something
like <code>ansible somehost -m ping</code></li>
<li>tasks are performed one at a time (though they probably branch out
simultaneously on multiple hosts)</li>
</ul>
</li>
<li>module

<ul>
<li>can be executed directly via <code>ansible</code> or via playbooks</li>
<li>a specific command, can make changes to a variety of server types</li>
<li>e.g.

<ul>
<li>ansible webservers -m service -a &#8220;name=httpd state=started&#8221;</li>
<li>ansible webservers -m ping</li>
<li>ansible webservers -m command -a &#8220;/sbin/reboot -t now&#8221;</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Ansible tags</h2>

<p>http://docs.ansible.com/playbooks_tags.html</p>

<p>Use tags to run subsets of a playbook.</p>

<ul>
<li>tag certain tasks</li>
<li>specify at run time a tag of which tasks to run</li>
<li>you can also tag includes

<ul>
<li>such that if you specify tags to ansible-playbook, it won&#8217;t include
those rules unless tagged</li>
</ul>
</li>
</ul>


<h2>Sudo password is yours, not roots!!!!</h2>

<p>http://www.howtogeek.com/111479/htg-explains-whats-the-difference-between-sudo-su/</p>

<blockquote><p>When you execute sudo command, the system prompts you for your current user account’s password before running command as the root user. By default, Ubuntu remembers the password for fifteen minutes and won’t ask for a password again until the fifteen minutes are up.</p></blockquote>

<p>This is why you have a sudoers file! You define who&#8217;s allowed to run as
root user and let them run as sudo.</p>

<p><code>su -c 'some command'</code> on the other hand asks for root&#8217;s password.</p>

<h2>Debian Hosts file</h2>

<p>https://www.debian.org/doc/manuals/debian-reference/ch05.en.html#_the_hostname_resolution</p>

<blockquote><p>The IP address 127.0.1.1 in the second line of this example may not be found on some other Unix-like systems. The Debian Installer creates this entry for a system without a permanent IP address as a workaround for some software (e.g., GNOME) as documented in the bug #719621.</p>

<p>The <host_name> matches the hostname defined in the &#8220;/etc/hostname&#8221;.</p>

<p>For a system with a permanent IP address, that permanent IP address should be used here instead of 127.0.1.1.</p>

<p>For a system with a permanent IP address and a fully qualified domain name (FQDN) provided by the Domain Name System (DNS), that canonical <host_name>.<domain_name> should be used instead of just <host_name>.</p></blockquote>

<h2>Loopback</h2>

<p>e.g. localhost; it&#8217;s a way to access a computer&#8217;s own network services
via a network interface. I guess I knew this, but I just didn&#8217;t think
about how it unifies the interface&#8230; e.g. whether it&#8217;s local or remote,
just use IP all the time.</p>

<h2>ifconfig</h2>

<p>&#8220;interface config&#8221;</p>

<h2>debops: run site.yml first</h2>

<p>Don&#8217;t skip this step!</p>

<p>I used <code>rails_deploy</code> before site.yml and things were just ambiguously
missing and I had to patch them up.</p>

<h2>/etc/shadow</h2>

<p>It&#8217;s where all the encrypted passwords live. <code>/etc/passwd</code> is all the
user names, but lots of applications need access to it, so it can&#8217;t be
plaintext. SO in <code>passwd</code> you put &#8216;x&#8217; for password and that causes
<code>/etc/shadow</code> to be looked up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Streams]]></title>
    <link href="http://machty.github.com/blog/2015/04/15/ember-streams/"/>
    <updated>2015-04-15T14:13:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/04/15/ember-streams</id>
    <content type="html"><![CDATA[<h2>Ember Streams</h2>

<p>My goal is to tease out the differences between Ember Streams and Rx.</p>

<p><code>ember-metal/lib/streams/stream.js</code></p>

<p>A stream has subscribers.</p>

<h2>ConnectableObservable</h2>

<p>Wraps a single subscription. Broadcasts events from this single
subscription to all subscribers.</p>

<h2>Rx Disposable</h2>

<p>Anything with a <code>.dispose</code> method. So, what&#8217;s disposable in Rx?</p>

<ul>
<li>subscriptions</li>
<li>observers</li>
</ul>


<p>What&#8217;s it used for?</p>

<ul>
<li>cleaning up some resource after subscriptions no longer need it</li>
<li>generic disposal of no-longer needed objects

<ul>
<li>e.g. internal (non-detach) observers are disposable, but not really
for the purpose of cleaning up some resource, but just making sure
that no more events make it through</li>
</ul>
</li>
</ul>


<p>There isn&#8217;t a Subscription object in Rx, but you can think of the return
value of <code>observable.subscribe</code> to be a &#8220;subscription&#8221;. Technically it&#8217;s
an &#8220;auto-detach&#8221; observer; an auto-detach observer proxies to an
underlying observer. When an auto-detach observer is disposed of, it
disposed of the underyling subscribed observables&#8230; except that an
observable isn&#8217;t a disposable; observables return disposables from their
subscribe methods.</p>

<p>Another way of thinking about this is that, on their own, observables
don&#8217;t act/exist/do anything until they&#8217;re brought to life by a
subscription. There&#8217;s nothing to &#8220;dispose&#8221; of until there is a
subscription. Once someone subscribes, <em>then</em> you have a bunch of stuff
that needs to be cleaned up at some point, hence disposables.</p>

<p>Disposables have their use beyond Rx; <code>dispose</code> is kind of like a
destructor; JavaScript doesn&#8217;t have destructors. Destructors don&#8217;t make
<em>as</em> much sense in garbage-collected languages because their timing is
non-deterministic (often it ends up being more practical to manually
manage this yourself).</p>

<h2>Ember <code>destroy</code></h2>

<p>Ember&#8217;s got &#8220;destroy&#8221;-ables&#8230; <code>destroy</code> methods on objects, and
<code>isDestroyed</code> properties that get set and checked, assertions if things
are called on destroyed objects, etc.</p>

<h3>Ember Object destroy</h3>

<ul>
<li>schedules call to <code>willDestroy</code> hook, meant for subclasses to
implement</li>
<li>aggressively tears down meta object

<ul>
<li>destroys bindings/observers

<ul>
<li>hence anyone listening to events on the obj or binding to values
won&#8217;t get any more updates.</li>
</ul>
</li>
<li>enables eager GC of metadata (it&#8217;s pretty easy in JS/any dynamic
language to keep around references to stuff you don&#8217;t care about any
more; at least with destroy you can eagerly remove things)</li>
</ul>
</li>
</ul>


<h3>EventDispatcher destroy</h3>

<p>Removes all dispatcher-added jQuery event listeners. Calls super.</p>

<h3>Collection View</h3>

<p>Calls super, removes array observers (which live on the content array
and delegate to the collection view), destroy empty view.</p>

<h3>Core View</h3>

<p>First off, CoreView is &#8220;deprecated&#8221; in that it shouldn&#8217;t be used
directly, but Ember.View still extends it.</p>

<p>Calls super, destroys the DOM el (?), some other crap.</p>

<p>Probably doesn&#8217;t make sense to write about until Glimmer.</p>

<h2>Rx Observers</h2>

<p>Class hierarchy</p>

<ul>
<li>Observer

<ul>
<li>AbstractObserver

<ul>
<li>AnonymousObserver</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>You can fulfill the Observer contract without using an Rx Observer
class:</p>

<p>http://jsbin.com/nupafu/11/edit?js,console</p>

<pre><code>console.clear();

var onNext      = () =&gt; { console.log('next'); };
var onError     = () =&gt; { console.log('error'); };
var onCompleted = () =&gt; { console.log('completed'); };

var pojo = { onNext, onError, onCompleted };

var legitObserver = Rx.Observer.create(onNext, onError, onCompleted);
// same thing:
// var legitObserver = new Rx.AnonymousObserver(onNext, onError, onCompleted);

Rx.Observable.range(1,5).subscribe(pojo);
Rx.Observable.range(1,5).subscribe(pojo);

Rx.Observable.range(1,5).subscribe(legitObserver);
Rx.Observable.range(1,5).subscribe(legitObserver);
</code></pre>

<p>The difference is that <code>legitObserver</code>&#8217;s hooks only fire for the first
subscription, and nothing fires for the second; the pojo on the other
hand runs through the range twice. Why? Because <code>Rx.Observer.create</code>
creates an AnonymousObserver, which is an AbstractObserver, and
AbstractObserver sets an <code>isStopped=true</code> flag to prevent further events
from coming through. In other words, generally speaking an observer is
only meant to be attached to one subscription, but if you want the same
object to receive events from multiple observables (and for some stupid
reason you don&#8217;t want to call <code>Observable.prototype.merge</code> then you can
just pass <code>subscribe</code> some pojo with the necessary <code>onNext</code>, <code>onError</code>,
<code>onCompleted</code> methods defined.</p>

<p>Of course you can subscribe the same handler fns and internally two
separate AnonymousObservers will get created, so events from both
subscriptions will fire:</p>

<pre><code>Rx.Observable.range(1,5).subscribe(onNext, onError, onCompleted);
Rx.Observable.range(1,5).subscribe(onNext, onError, onCompleted);
</code></pre>

<h2>JS <code>_super</code> pattern</h2>

<p>Seems obvious, but a decently nice pattern for calling a superclass&#8217;s
method, taken from Ember&#8217;s streams:</p>

<pre><code>merge(SomeSubclass.prototype, {
  /* ... */

  _super$destroy: SomeSuperclass.prototype.destroy,

  destroy() {
    this._super$destroy();

    // do subclass-specific stuff
  }
});
</code></pre>

<h2>Routeable components / attrs / query params</h2>

<pre><code>export default Ember.Route.extend({
  queryParams: {
    page: {
      default: 1,
      // refresh: true,
      // API: infer/generate action name based on param?
    }
  },

  model(params) {
    // params has all params, including QPs
  },

  attrs() {
    return {
      model: this.model(),
      updatePage: this.actions.updatePage
    }
  },

  actions: {
    updatePage(newPage) {
      // this is a manual implementation of the inferred action
      // based on page QP

      // default implementation:
      // when refresh: false (default)
      this.component.set('page', newPage);

      //this.component.set('page', newPage);
    },
  },
});

// articles template
// 



// articles component
export default Ember.Component.extend({
  // implicit attrs

  //attrTypes: {
  //  page: number,
  //},

  page: null,

  // this is called initial render and prop updates
  // (willReceiveAttrs called re-render only)
  willRender(attrs) {
    this.set('page', attrs.page);
  },
});
</code></pre>

<p>Lessons Learned:</p>

<ul>
<li>Route passes in read-only (non-mut) attrs to routeable component</li>
<li><p>This prevents type-writer query params</p>

<p>  // my-input component
  export default Ember.Component.extend({</p>

<pre><code>actions: {
  doSomethingThatChangesValue() {
    // TODO: mut api for changing thing
    attrs.setValue...??
  },
},
</code></pre>

<p>  });</p></li>
</ul>


<h2><code>bashrc</code> and <code>bash_profile</code></h2>

<p>ALWAYS forget the difference between these things. One of them is for
login shells, one is both. Blurg.</p>

<p>Answer:</p>

<ul>
<li><code>.bashrc</code> is read for interactive, non-login shells</li>
<li><code>.bash_profile</code> is read for login shells</li>
<li>Mac OS X uses login shells for its terminals, iTerm included</li>
<li>hence, might make sense to just source <code>.bashrc</code> from <code>.bash_profile</code></li>
</ul>


<p>Also, the meaning of <code>rc</code> isn&#8217;t totally known; it could be &#8220;run
commands&#8221; or &#8220;runtime configuration&#8221; but no one really agrees.</p>

<h2>Glimmer Streams</h2>

<p>KeyStream takes a source obj stream and a path and streams property values
based on the provided key. Can be generated via sourceStream.get(&#8216;wat&#8217;).
A source stream is just a stream of objects. KeyStreams stream property
changes on objects. Changing the underlying object of the source stream
will fire a change event on the KeyStream. KeyStreams watch for changes
using Ember Observers (addObserver/removeObserver)</p>

<p>KeyStreams (among others) have a setSource that changes the underyling
stream of objects; calling setSource will always cause a notify().</p>

<p>Why? mmun says:</p>

<blockquote><p>in order to not notify we would have to eagerly compute the stream value
and compare to the last value</p></blockquote>

<p>So it&#8217;s a tradeoff between minimizing notify spam and losing value laziness.</p>

<p>TODO: how do views use baseContext?</p>

<p>ContextStream is a</p>

<h2>Bash Completion</h2>

<p>http://tldp.org/LDP/abs/html/tabexpansion.html</p>

<ul>
<li>works w Env vars, e.g. <code>$BASH_[tab]</code></li>
<li>use <code>complete</code> to specify rules for a command, e.g. match
filenames, filter by this regex, etc</li>
<li>use <code>compgen</code> to pass shit to a filter fn written in bash
(prefixed by underscore by convention)</li>
</ul>


<h2>why nom/bom/nombom</h2>

<p>Most ember devs have to do something like this due to NPM fidgetries:</p>

<pre><code>alias nombom='npm cache clear &amp;&amp; bower cache clean &amp;&amp; rm -rf node_modules bower_components &amp;&amp; npm install &amp;&amp; bower install'
alias nom='npm cache clear &amp;&amp; rm -rf node_modules &amp;&amp; npm install'
alias bom='bower cache clean &amp;&amp; rm -rf bower_components &amp;&amp; bower install'
</code></pre>

<p>Why is this necessary? Because:</p>

<ol>
<li>Even though npm will take into consideration your project&#8217;s
dependency versions when choosing the version of dependencies of
dependencies, once that package has been installed in <code>node_modules</code>,
even if you bump your project&#8217;s dependencies, that old version will
be cached in deep nestings of <code>node_modules</code>, hence it&#8217;s safest to
nuke <code>node_modules</code>. Afaik only explains the <code>rm -rf node_modules</code>
side of things.</li>
<li>NPM won&#8217;t install a newer version of a dependency if a matching one
exists in the NPM cache (<code>~/.npm/...</code>). Wait, isn&#8217;t this desirable?
Shouldn&#8217;t this be a cue to bump your dependency version?</li>
</ol>


<p>This seems to be the chief reason why nombom is the only way to sane
dependency installation:</p>

<ul>
<li>NPM caches modules by their version, e.g. <code>fstream@1.0.4</code> (these gets
stored in <code>~/.npm/fstream/1.0.4/package.tgz</code></li>
</ul>


<h2>Bash + vim (or whatever)</h2>

<ol>
<li><code>set -o vi</code> so that bash is in Vim mode</li>
<li>Type out a command</li>
<li>Press escape (to leave &#8220;insert mode&#8221;)</li>
<li>press <code>v</code> to open vim w the current command</li>
<li>Save and quit to execute the command</li>
</ol>


<h2>Anamorphism</h2>

<p>http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html</p>

<p>Generating a (potentially infinite) vector from a scalar. Also known as
an unfold.</p>

<p>Actually this is better:</p>

<p>http://www.introtorx.com/Content/v1.0.10621.0/08_Transformation.html</p>

<ul>
<li>Ana(morphism) T &#8211;> IObservable<T></li>
<li>Cata(morphism) IObservable<T> &#8211;> T</li>
<li>Bind IObservable<T1> &#8211;> IObservable<T2></li>
</ul>


<h2>Hot observables, connect vs refCount vs singleInstance</h2>

<p>http://jsbin.com/nupafu/20/edit?html,js,console,output</p>

<p>I haven&#8217;t done <code>singleInstance</code> yet, but basically it&#8217;s like
<code>publish().refCount()</code> except it&#8217;ll resubscribe if refcount goes to 0
and then back to 1.</p>

<h2>The ultimate nom nuance</h2>

<p><code>npm</code> will assemble/download all project dependencies with the following
rule:</p>

<ul>
<li>dependencies are installed only into the rootmost dependencies that
specifies that dependency, e.g.</li>
</ul>


<p>If</p>

<pre><code>proj
  - foo
  - bar
    - baz
      - foo
</code></pre>

<p>The <code>npm</code> will <em>NOT</em> install a <code>baz/node_modules/foo</code> but will rather
install a single foo at the root <code>node_modules</code>; the reason this works
in Node land is that <code>require</code> always starts at the current dir and
traverses upward.</p>

<p>Shitty example: start with</p>

<pre><code>proj
  - bar
    - baz
      - foo
</code></pre>

<p>then install at top level foo</p>

<pre><code>proj
  - foo
  - bar
    - baz
      - foo
</code></pre>

<p><code>npm</code> will not remove <code>foo</code> from <code>baz</code>&#8230; you wind up with two different
versions of <code>foo</code>, shadowing each other. Holy shit!!!!!</p>

<p>NPM <code>dedupe</code> would remove the second foo. NPM 3 will probably call
dedupe automatically when you do <code>npm install</code>. But dedupe has its own
issues, not the least of which is that no one knows about it and it&#8217;s
one more thing to tell your team about.</p>

<p>MAIN POINT OF LEARNING:</p>

<p><code>npm</code> delicately stitches things together such that Node&#8217;s folder-bubbling
<code>require</code> resolution semantics can find the packages installed by <code>npm</code>.
It doesn&#8217;t override <code>$LOAD_PATH</code> like Bundler does or anything like
that.</p>

<h2>NPM cherry-pick</h2>

<pre><code>git cherry-pick -x f2c270e8d76e81a1921bbc31777aa3ac570ca87a
</code></pre>

<p>This is how I pulled in a change on an already-merged
<code>idempotent-rerender</code>.</p>

<h2>OnErrorResumeNext</h2>

<p>What a horrible name!</p>

<p>Basically, it&#8217;s <code>concat</code> that automatically recovers from errors.</p>

<p>http://jsbin.com/nupafu/22/edit</p>

<p>http://www.introtorx.com/Content/v1.0.10621.0/11_AdvancedErrorHandling.html</p>

<blockquote><p>Just the title of this section will send a shudder down the spines of old VB developers! In Rx, there is an extension method called OnErrorResumeNext that has similar semantics to the VB keywords/statement that share the same name.</p>

<p>Just as the OnErrorResumeNext keyword warranted mindful use in VB, so should it be used with caution in Rx. It will swallow exceptions quietly and can leave your program in an unknown state.</p></blockquote>

<h2>Observable#finally invoked even on dispose</h2>

<p>http://jsbin.com/nupafu/24/edit?html,js,console,output</p>

<h2>ConnectableObservables can reconnect</h2>

<p>http://jsbin.com/nupafu/25/edit?html,js,console,output</p>

<pre><code>var c = Rx.Observable.interval(500).publish();

c.subscribe((v) =&gt; {
  console.log(v);
});

// returns a disposable that disconnects.
var s = c.connect();

setTimeout(() =&gt; {
  s.dispose();
  s = c.connect();
}, 1200);
</code></pre>

<h2>Multicast</h2>

<p>Didn&#8217;t understand this til I understood <code>publishLast()</code> and <code>replay()</code>,
which basically apply <code>multicast</code> functionality through async subject
and replay subject, respectively. Basically replay and async subjects
just define different forms of caching, and if you want to share that
functionality with connectable observable then you wanna use multicast.</p>

<pre><code>.Publish() = .Multicast(new Subject&lt;T&gt;)
.PublishLast() = .Multicast(new AsyncSubject&lt;T&gt;)
.Replay() = .Multicast(new ReplaySubject&lt;T&gt;)
</code></pre>

<h2>Windows</h2>

<p>I&#8217;ve talked about before, grokking it better now:</p>

<p>http://jsbin.com/nupafu/27/edit?js,console,output</p>

<pre><code>var o = Rx.Observable.range(5, 20);

// HOT 
var shared = o.publish().refCount();

var openings = shared;//.filter((_, idx) =&gt; idx % 3 === 0);

shared.window(openings, () =&gt; 
  shared.filter((v, idx) =&gt; v % 5 === 0)
).selectMany((obs) =&gt; {
  return obs.toArray();
}).subscribe((arr) =&gt; {
  console.log(arr);
});
</code></pre>

<p>Takeaways:</p>

<ul>
<li>closing selector gets passed the value emitted by windowOpenings that
caused it to be opened in the first place.</li>
<li>if the closing selector is based on the same source data stream, you
almost certainly want to use <code>publish().refCount()</code>, or at least make
sure the source stream is hot, or if it&#8217;s cold it doesn&#8217;t expensively
re-create / duplicate some underlying resource</li>
</ul>


<h2>Subscribing inside Observer.create()</h2>

<p>The contract for Observer.create is to</p>

<ul>
<li>fire <code>onNext*(onComplete|OnError)?</code> on the observer passed in</li>
<li>return a disposable</li>
</ul>


<p>Based on that, the following is a perfectly valid way to alias an
observable:</p>

<p>http://jsbin.com/nupafu/30/edit</p>

<pre><code>var proxy = Rx.Observable.create((o) =&gt; {
  return Rx.Observable.interval(200).subscribe(o);
});

proxy.subscribe((v) =&gt; {
  console.log(v);
});
</code></pre>

<p><code>proxy</code> behaves just like <code>interval</code>.</p>

<h2>C# <code>+=</code> and <code>-=</code> event subscription syntax</h2>

<pre><code>this.Click += (s,e) =&gt; { MessageBox.Show(
   ((MouseEventArgs)e).Location.ToString());};
</code></pre>

<h2><code>Either&lt;LeftT, RightT&gt;</code></h2>

<p>In Rxx, <code>Either</code> is used a bunch to imply a broadcast of data from
either source sequence A or source sequence B; one nice use case of it
is how their <code>Retry</code> method works.</p>

<p>http://rxx.codeplex.com/discussions/401272</p>

<p>Basically, vanilla Rx retry disposes of the error that causes the retry
to happen, which means it&#8217;s trick to do logging in a nice composable
way.</p>

<h2>Apple IP is <code>17.***.***.***</code></h2>

<p>http://tapity.com/17-the-secret-to-finding-out-how-many-apple-employees-dig-your-stuff/</p>

<p>https://support.apple.com/en-us/HT203609</p>

<blockquote><p>The entire 17.0.0.0/8 address block is assigned to Apple</p></blockquote>

<p>So you can check your logs to see if Apple&#8217;s snooping your shit.</p>

<h2><code>embedded.mobileprovision</code></h2>

<p>It is present in ALL <code>.ipa</code>s generated by XCode <em>including App Store
builds</em>, but by the time you download <em>from the App Store</em>, it has been
stripped out.</p>

<h2>RxJava lifts, other things</h2>

<p>https://speakerdeck.com/dlew/reactive-extensions-beyond-the-basics</p>

<ul>
<li>hot sequences have no subscription side effects</li>
<li><p>cold sequences may have subscription side effects</p></li>
<li><p>Observable.just(&#8220;1&#8221;)</p>

<ul>
<li>cold, because generates that string every subscription</li>
</ul>
</li>
<li>Observable.interval()

<ul>
<li>cold, no duh</li>
</ul>
</li>
<li>ReplaySubject

<ul>
<li>cold???</li>
<li>hot if you&#8217;re first subscriber</li>
<li>cold if there are items to replay, and then hot thereafter</li>
</ul>
</li>
</ul>


<h2>Redis: why use hash?</h2>

<p>Why do</p>

<pre><code>HSET somehash key val
</code></pre>

<p>when you can do HGET</p>

<h2>redistogo disables <code>CONFIG</code> command</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1:39 PM &lt;machty&gt; any idea why on redis 2.8.11 i'm getting ERR unknown command 'config' ? docs say config command exists since 2.0.0
</span><span class='line'>1:48 PM &lt;machty&gt; actually i think it's because CONFIG is disabled by redistogo service... unfortunately both CONFIG GET and CONFIG SET :/
</span><span class='line'>1:55 PM &lt;xxxx&gt; machty: I actually work for Redistogo
</span><span class='line'>1:55 PM &lt;xxxx&gt; We do disable it indeed
</span><span class='line'>1:56 PM &lt;machty&gt; xxxx: ah, i guess there's no way to dynamically get maxmemory? was thinking of using it for alerts
</span><span class='line'>1:56 PM &lt;xxxx&gt; Unfortunately not, there was talk of working on API for it but that development kind of got halted</span></code></pre></td></tr></table></div></figure>


<p>Apparently a lot of effort is being shifted from redistogo to
ObjectRocket redis, which:</p>

<ul>
<li>doesn&#8217;t disable CONFIG</li>
<li>has high availability (HA) enabled by default via sentinels</li>
<li>http://redis.io/topics/sentinel</li>
</ul>


<h2>nethack</h2>

<p>What is it?</p>

<h2>Logstash</h2>

<p>https://www.youtube.com/watch?v=RuUFnog29M4</p>

<ul>
<li><a href="http://www.nagios.org/">nagios</a>: infrastructure monitoring</li>
<li>log = timestamp + data</li>
<li>Logstash

<ul>
<li>open source</li>
<li>config file is nginx-ish</li>
<li>output graphs and a bunch of other things</li>
<li>use grok

<ul>
<li>write patterns, and give them name</li>
<li>reusable regex</li>
<li>comes w 100 patterns</li>
<li>no need for regex skills</li>
</ul>
</li>
<li>data filter included to handle all varieties of timestamp format</li>
<li>stop inventing time formats</li>
<li>multiline filter for errors w stack trace</li>
<li>gettimeofday</li>
<li>NTP

<ul>
<li>network time protocol, used for syncing servers</li>
<li>if apache uses gettimeofday</li>
</ul>
</li>
<li>feature

<ul>
<li>transport and process logs to and from anywhere

<ul>
<li>get them in analyzable format</li>
</ul>
</li>
<li>provide search and analytics</li>
</ul>
</li>
<li>community

<ul>
<li>kibana: web interface for logstache</li>
<li>logstash-cli: search / analytics from commandline</li>
</ul>
</li>
<li>dreamhost deployment

<ul>
<li>20k apache events/sec peak</li>
<li>250 mil events/day</li>
<li>75gb day</li>
<li>160 web servers</li>
<li>7 logstach / elasticsearch servers</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>ELK</h2>

<p>http://blog.qbox.io/indexing-heroku-logs-into-elasticsearch-with-logstash</p>

<ul>
<li>elastic search

<ul>
<li>searchable database</li>
</ul>
</li>
<li>logstash

<ul>
<li>parses/processes logs from many sources, stores in centralized location</li>
</ul>
</li>
<li>kibana</li>
</ul>


<p>https://www.elastic.co/webinars/elk-stack-devops-environment</p>

<ul>
<li>installation

<ul>
<li>download, untar, and run</li>
</ul>
</li>
</ul>


<p>So who the fuck uses ELK stack? Just enormous companies that manage
their own custom infrastructures?</p>

<p>Answer: anyone who does enough devops to</p>

<ul>
<li>be smart enough to set it up</li>
<li>know the pain of living without it</li>
</ul>


<p>Logstash is generally meant to live on the machine that&#8217;s producing the
logs, and then it can forward it on to an elasticsearch cluster..</p>

<h2>Ruby logging</h2>

<blockquote><p>A flexible logging library for use in Ruby programs based on the design of Java&#8217;s log4j library.</p></blockquote>

<p>https://github.com/TwP/logging</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shiggity wat]]></title>
    <link href="http://machty.github.com/blog/2015/03/25/shiggity-wat/"/>
    <updated>2015-03-25T11:15:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/03/25/shiggity-wat</id>
    <content type="html"><![CDATA[<h2>IP Spoofing</h2>

<p>What&#8217;s to stop you from sending out packets with someone else&#8217;s IP as
the source?</p>

<p>http://en.wikipedia.org/wiki/IP_address_spoofing</p>

<ul>
<li>packet filtering

<ul>
<li>ingress: gateway blocks incoming packets with source IP that can
only belong to someone inside of the network</li>
<li>egress: gateway blocking outgoing packets with source IP from
outside of the network (altruistic since it prevents hackers from
hacking folk outside of the network)</li>
</ul>
</li>
<li>upper layer protocol

<ul>
<li>TCP prevents IP spoofing by use of sequence numbers; an attacker
would have to guess at a correct sequence number in order for it to
be considered valid</li>
</ul>
</li>
</ul>


<h2>RxJS</h2>

<h3>generate</h3>

<pre><code>var source = Rx.Observable.generate(
    0,
    function (x) { return x &lt; 3; }, // terminate condition
    function (x) { return x + 1; }, // step fn
    function (x) { return x*2; }    // map fn for values emitted...?
);
</code></pre>

<p>The last fn is weird&#8230; seems like the above is the equivalent of:</p>

<pre><code>var source = Rx.Observable.generate(
    0,
    function (x) { return x &lt; 3; }, 
    function (x) { return x + 1; },
    function (x) { return x; }    
).map(x =&gt; x*2);
</code></pre>

<p>So why embed the <code>map</code> operator? or as they call it the select.</p>

<pre><code>Rx.Observable.prototype.map === Rx.Observable.prototype.select // true
</code></pre>

<h3>generateWith relative/absolute time</h3>

<p>Like <code>generate</code> but adds a time selector fn: for each value you can
decide when it should fire. So you could feasible reverse the firing
time of a series of events, e.g. 1,2,3,4,5 fires in the reverse order:</p>

<pre><code>var source = Rx.Observable.generateWithRelativeTime(
    1,
    function (x) { return x &lt; 4; },
    function (x) { return x + 1; },
    function (x) { return x; },
    function (x) { return 100 * (5-x); }
);

"Next: 1"
"Next: 2"
"Next: 3"
"Completed"
</code></pre>

<p>NOPE I was wrong; the time selector generates the time <em>between</em> events,
not the time relative to the start of observation. I&#8217;m guessing that can
be accomplished via the absolute form:</p>

<pre><code>var now = Date.now();
var source = Rx.Observable.generateWithAbsoluteTime(
    1,
    function (x) { return x &lt; 4; },
    function (x) { return x + 1; },
    function (x) { return x; },
    function (x) { return now + 100 * (5-x); }
).timeInterval();

"Next: 1:402"
"Next: 2:6"
"Next: 3:2"
"Completed"
</code></pre>

<p>WRONG AGAIN! Order is preserved, with the already-elapsed events firing
immediately once the first one fires.</p>

<h3>generate as for loops:</h3>

<p>Instead of</p>

<pre><code>for (var x = 0; x &lt; 10; ++x) {
  console.log(x*2);
}
</code></pre>

<p>you do</p>

<pre><code>var source = Rx.Observable.generate(
    0,
    function (x) { return x &lt; 10; }, 
    function (x) { return x + 1; },  // ++x
    function (x) { return x*2; }  
);

// or source.subscribe
source.forEach((val) =&gt; {
  console.log(val);
});
</code></pre>

<p>Keep in mind that</p>

<pre><code>Rx.Observable.prototype.forEach === Rx.Observable.prototype.subscribe
</code></pre>

<p>They&#8217;re aliases of each other, they both:</p>

<ul>
<li>activate an observable</li>
<li>are intended to cause some sort of side effects</li>
</ul>


<p>Why write in observable form?</p>

<ul>
<li>composability</li>
<li>much harder to troll yourself w &#8220;global&#8221; mutable vars used for iteration</li>
<li>you&#8217;re writing in a way that can effortlessly handle the dimension of time</li>
</ul>


<h2>Subscriber stack</h2>

<p>How would you get more explicit bubbling behavior that we&#8217;re familiar
with from bubbling actions in Ember?</p>

<p>Basically I want there to be some root subject/observable on a parent
route, and then child routes can push their subscription onto that
observable&#8217;s stack of subscriptions, and only the subscription at the
top of the stack.</p>

<p>This doesn&#8217;t accomplish bubbling per se; it&#8217;s a non-bubbling form of
first-responder. Do we want bubbling?</p>

<p>Actually yeah I think we want bubbling; what we don&#8217;t want is routes
accidentally getting actions invoked on them because at some point later
in the game a child route invokes an action (just string names) and it
accidentally leaks out, causing havoc on parent routes, etc.</p>

<p>But to be able to pass on the action is probably nice.</p>

<pre><code>// within child route
someParentRoute.observableStack.subscribe((e) =&gt; {
  if (canHandle(e.value)) {
    // do stuff
  } else {
    e.bubble();
  }
});
</code></pre>

<p>and this subscription would be <code>dispose</code>d upon route deactivation so it
cleans itself up.</p>

<p>The problem with this is once you start needing to apply operators, you
need some way of signalling the bubble later on?</p>

<pre><code>someParentRoute.observableStack
               .delay(1000)
               .map((e) =&gt; someCopyThatStillPreservesBubbleFn})
               .subscribe((e) =&gt; {
                 if (canHandle(e.value)) {
                   // do stuff
                 } else {
                   e.bubble();
                 }
               });
</code></pre>

<h2>Alex versus invalidation</h2>

<p>https://github.com/ef4/liquid-fire/issues/222</p>

<h2>iOS 7 and 8 usage</h2>

<p>As of 3/29/2015:</p>

<ul>
<li>iOS 8: 77%</li>
<li>iOS 7: 20%</li>
<li>Earlier: 3%</li>
</ul>


<h2>WKWebView</h2>

<p>Only in iOS 8, comes with Nitro engine and bunch of other things.</p>

<p>http://nshipster.com/wkwebkit/</p>

<ul>
<li>https://github.com/Telerik-Verified-Plugins/WKWebView

<ul>
<li>probably the best stab at a working plugin</li>
<li>there are many issues (i would not use it at this point)</li>
<li>spins up an embedded server in order to:

<ul>
<li>bypass CORS</li>
<li>allow querying file:// protocol</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>It&#8217;s also only iOS8+; the plugin is smart enough to fall back to
UIWebView, but then you&#8217;ve just bumped an exponent on complexity, more
shit to test.</p>

<p>There is also Ludei Cocoonjs. But Iiiii couldn&#8217;t get it to work. :)</p>

<h2>Rx: switch</h2>

<p>When you already have an Observable of Observables, you can call
<code>.switch()</code> to produce an Observable that only emits values from the
most recent observable :) isn&#8217;t terminology fun.</p>

<p>So this:</p>

<pre><code>obs.map((val) =&gt; someObservableBasedOnVal)
   .switch();
</code></pre>

<p>is the same as</p>

<pre><code>obs.flatMapLatest((val) =&gt; someObservableBasedOnVal);
</code></pre>

<h2>Multiple cursors, DevTools and Vim</h2>

<p>Command click: multiple cursors</p>

<p>Cmd+D selects the next instance (effectively adding a multiple cursor).
Really a cursor is a selection with zero chars selected.</p>

<p>Just downloaded https://github.com/terryma/vim-multiple-cursors</p>

<p>Ctrl-n: select next occurrence of hovered word</p>

<p>Ctrl-p: undo most recent selection</p>

<p>Ctrl-x: skip current selection</p>

<p>MultipleCursorsFind: optionally select range in v mode, then type a
regex to select them shits as multiple cursors.</p>

<p>NOTE: in visual mode, <code>o</code> swaps the cursor to the other side to let you
modify the selection from the other end.</p>

<h2>Why flatMapLatest always trips me up</h2>

<p>http://jsbin.com/nupafu/1/edit?html,js,console</p>

<pre><code>console.clear();

Rx.Observable.just(1)
  .takeUntil(Rx.Observable.timer(10))
  .doOnCompleted(() =&gt; console.log("doOnCompleted"))
  .flatMapLatest(() =&gt; {
    return Rx.Observable.timer(500);
  })
  .subscribe(() =&gt; {
    console.log("EVENT");
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });
</code></pre>

<p>Output:</p>

<pre><code>"doOnCompleted"
"EVENT"
"COMPLETE"
</code></pre>

<p>This sequence might seem obvious here but I ALWAYS make the mistake of
thinking that because there&#8217;s a takeUntil on the source observable,
that&#8217;ll somehow cause all subscribing observables to immediately
complete. NOPE. If that were the case, then promise chains wouldn&#8217;t work
since they&#8217;re just single value observables that complete after their
first value, and if completion force completed any subscribers then you
couldn&#8217;t have async chains of logic. Anyway.</p>

<p>So I guess that means you really need to gate at every potential side
effect via takeUntil? e.g.</p>

<p>http://jsbin.com/nupafu/1/edit?html,js,console</p>

<pre><code>Rx.Observable.interval(200)
  .takeUntil(Rx.Observable.timer(250))
  .do(() =&gt; console.log("start"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("one"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("two"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("three"))
  .subscribe(() =&gt; {
    console.log("EVENT");
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });
</code></pre>

<p>Output:</p>

<pre><code>"start"
"one"
"two"
"three"
"EVENT"
"COMPLETE"
</code></pre>

<p>I guess I could dispose the sub, but then no onCompletes get fired
(and it&#8217;s also just bad style).</p>

<pre><code>console.clear();

var sub = Rx.Observable.interval(200)
  .takeUntil(Rx.Observable.timer(250))
  .do(() =&gt; console.log("start"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("one"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("two"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("three"))
  .subscribe(() =&gt; {
    console.log("EVENT");
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });

setTimeout(() =&gt; {
  sub.dispose();
}, 250);
</code></pre>

<p>Output:</p>

<pre><code>"start"
</code></pre>

<p>WHOA if I do onCompleted, then it skips all the shit in the middle
and still runs the completion handler!</p>

<p>http://jsbin.com/nupafu/4/edit</p>

<pre><code>console.clear();

var sub = Rx.Observable.interval(200)
  .takeUntil(Rx.Observable.timer(250))
  .do(() =&gt; console.log("start"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("one"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("two"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("three"))
  .subscribe(() =&gt; {
    console.log("EVENT");
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });

setTimeout(() =&gt; {
  sub.onCompleted();
}, 250);
</code></pre>

<p>Output:</p>

<pre><code>"start"
"COMPLETE"
</code></pre>

<p>Question: is there a way to construct your observables, without
resorting to chaining takeUntil&#8217;s before every side-effect, such that
some onComplete along the way skips everyone else&#8217;s?</p>

<p>http://jsbin.com/nupafu/6/edit</p>

<pre><code>console.clear();
var o = Rx.Observable.interval(200)
  .do(() =&gt; console.log("start"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("one"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("two"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("three"));

o.merge(Rx.Observable.timer(250).map(false))
  .subscribe(function(v) {
    console.log("EVENT " + v);
    if (v === false) {
      this.onCompleted();
    }
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });

"start"
"EVENT false"
"COMPLETE"
"start"
"start"
"start"
"start"
"start"
"start"
"start"
"start"
"start"
...
</code></pre>

<p>Why? Does <code>this.onCompleted()</code> not kill the current subscription?</p>

<p>This works:</p>

<pre><code>var sub = o.merge(Rx.Observable.timer(250).map(false))
  .subscribe(function(v) {
    if (v === false) {
      sub.onCompleted();
    }
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });
</code></pre>

<p>Apparently sub !== this. sub is an auto-detach observer, this is an
anonymous observer. Some rxjs internals I don&#8217;t wanna go into right now.</p>

<p>Maybe there&#8217;s a merge first operator that&#8217;ll work here.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/amb.md</p>

<p><code>amb</code> is close, but once a value is produced from the flatMapChain, then
the terminating observable is ignored. I want something that stops on
the first completed thing.</p>

<p>Note that <code>amb</code> has <a href="http://www.randomhacks.net/2005/10/11/amb-operator/">roots in Lisp</a>.
The base functionality in RxJS I guess can be used to approximate
something like</p>

<p>Oh man, I might be a HUGE idiot&#8230; I JUST NEED TO FUCKING PUT THE
TAKEUNTIL AT THE END OMG</p>

<h2>I&#8217;m waiting</h2>

<p>http://i.imgur.com/4ETXzun.webm</p>

<h2>Observable.using</h2>

<p>Resource/disposable + observable = using</p>

<pre><code>Rx.Observable.
  using(
    function () { return openFile('temp.txt', 'w+'); },
    function (fd) {
      return Rx.Observable.range(0, 10000)
        .map(function (v) { return Buffer(v); })
        .flatMap(function (buffer) {
          return appendAsync(fd, buffer);
        });
    }
  )
  .subscribe();
</code></pre>

<p><code>using</code> makes it clear what the resource/disposable. Otherwise you might
mix the two awkwardly in the body of the fn passed to
<code>Observable.create</code>.</p>

<h2>Rx grammar</h2>

<p>Observable sequences have the following grammar:</p>

<pre><code>onNext* (onCompleted|onError)?
</code></pre>

<p>0 or more <code>onNext</code>s followed by an optional <code>onCompleted</code> OR <code>onError</code>.
Infinite sequences or disposed sequences might never see <code>onCompleted</code>
or <code>onError</code>.</p>

<h2>Observable.defer vs Observable.create</h2>

<p>Defer wraps another underlying observable in a factory function and
guarantees that each subscription to the outer observable gets a fresh
subscription to a totally newly-generated inner observable&#8230; but how is
this different from cold observables in general?</p>

<p>Well before I say that, lemme just say <code>defer</code> is a useful pattern for
when you want to kick off a sequence but don&#8217;t really know which
observable to start with; a lame attempt to do this is via</p>

<pre><code>Rx.Observable.just()
  .flatMap(() =&gt; {
    if (wat) {
      return oneObservable;
    } else {
      return anotherObservable;
    }
  })
</code></pre>

<p>This could more clearly be written as</p>

<pre><code>Rx.Observable.defer(() =&gt; {
  if (wat) {
    return oneObservable;
  } else {
    return anotherObservable;
  }
});
</code></pre>

<p>But hey, observables are cold&#8230; how is this different than writing</p>

<pre><code>var obs = wat ? oneObservable : anotherObservable;
return obs; // someone will subscribe to it
</code></pre>

<p>The difference is the decision as to which observable to use is set once
and for all for all future subscribers. HORRIBLE ENGRISH MR MATCHNEER.
In other words: either all subscribers get oneObservable or they get
anotherObservable. If you wanted to <em>defer</em> that decision until each
subscription, that&#8217;s when you use defer.</p>

<p>So why not just use a factory function without using <code>defer</code>, e.g.</p>

<pre><code>function getObservable() {
  var obs = wat ? oneObservable : anotherObservable;
}

// then anyone who wants to subscribe:
getObservable().subscribe();
getObservable().subscribe();
getObservable().subscribe();
</code></pre>

<p>These all get fresh observables. But then if you did</p>

<pre><code>var obs = getObservable();
obs.subscribe();
obs.subscribe();
obs.subscribe();
</code></pre>

<p>then these would all get the same observable decided by the single  call
to getObservable.</p>

<p>TL;DR, Rx is REALLY HARD. You have seemingly simple primitives of
observers and observables (saying nothing of that
almost-namespace-collision), but the way scalar things become vectors,
merged back into scalars, and not just at the events level but in the
primitives themselves, and how things are hot and cold. Jesus Christ.</p>

<h2>iOS Permissions</h2>

<ul>
<li>iOS7

<ul>
<li>no camera permissions</li>
<li>location permissions, but doesn&#8217;t distinguish b/w foreground/background</li>
<li>once denied, permissions dialog won&#8217;t show up</li>
</ul>
</li>
<li>iOS8

<ul>
<li>permissions for audio and video, separately</li>
<li>location

<ul>
<li>global location shutdown in addition to</li>
<li>app-specific:

<ul>
<li>authorized for &#8220;When in use&#8221;</li>
<li>authorized for background</li>
<li>denied</li>
</ul>
</li>
<li>if you change permissions

<ul>
<li>app will NOT restart</li>
<li>if you&#8217;re disabling geolocation, when you come back
into the app, you won&#8217;t get an error code about lack</li>
</ul>
</li>
</ul>
</li>
<li>for all permissions:

<ul>
<li>once denied, permissions dialog won&#8217;t show up

<ul>
<li>You can open Settings via settings url w some instructions
telling user to reset</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Today I learn top]]></title>
    <link href="http://machty.github.com/blog/2015/03/19/today-i-learn-top/"/>
    <updated>2015-03-19T09:18:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/03/19/today-i-learn-top</id>
    <content type="html"><![CDATA[<h2>top</h2>

<p>PR is priority, which is dynamic; a running process will get less and
less priority over time. NI is nice value; the fixed value that adds to
priority.</p>

<h2>Ruby mem</h2>

<p>http://samsaffron.com/archive/2014/04/08/ruby-2-1-garbage-collection-ready-for-production</p>

<ul>
<li>Ruby tracks malloc&#8217;s</li>
<li>classically, every <code>RUBY_GC_MALLOC_LIMIT</code> bytes,</li>
</ul>


<p>Heaps</p>

<ul>
<li>Ruby maintains heaps of RVALUES.</li>
<li>RVALUES are c union structs, variable size depending on x64, x32, etc,
that are low level representations of ruby objects</li>
<li>require &#8216;objspace&#8217; lets you access ObjectSpace, which exposes the
linked list of free Ruby objects.</li>
<li>RVALUES are collected and reused; mallocs only happen when you expand
beyong the RVALUE list.</li>
</ul>


<p>GC minor/major sweeps:</p>

<p>Flow is this:</p>

<ul>
<li><p><code>Object.allocate</code> (in the course of calling <code>new</code>)</p>

<ul>
<li>gimme a free RVALUE

<ul>
<li>if no free RVALUES, do a sweep</li>
<li>figure out along the way if it needs to be a major sweep</li>
<li>blah blah blah i don&#8217;t want to keep doing this</li>
</ul>
</li>
</ul>
</li>
<li><p>major sweep: run when malloc limit is hit (used to be 8MB, now it&#8217;s a
moving target)</p>

<ul>
<li>so you can malloc a bunch of times but once you hit malloc limit
it&#8217;s time for a major GC</li>
</ul>
</li>
<li>minor: run whenever heap slots run out

<ul>
<li>presumably, if this doesn&#8217;t free up enough mem, a malloc needs to
happen? or maybe a malloc always happens, and the minor sweep frees
up things for a future allocation attempts? either seem fine.</li>
</ul>
</li>
</ul>


<p>http://samsaffron.com/archive/2013/11/22/demystifying-the-ruby-gc</p>

<!--more-->


<h2>Over-arching question: returning memory to OS</h2>

<p>If you malloc a ton, will freeing it return it back to the OS?</p>

<p>Answer: prooooobably not. Alloc&#8217;d mem almost certainly won&#8217;t be returned
until process termination.</p>

<p>Why?</p>

<ul>
<li>malloc maintains an internal linked list of free data regions</li>
<li>when it runs out of this list, it syscalls <code>sbrk</code> to get more memory
from the OS</li>
<li>it uses this new region of memory to add new free data regions</li>
<li>you can&#8217;t return memory back to OS (with negative <code>sbrk</code>) unless none
of that region on the fringe is being used</li>
</ul>


<p>You could potentially use <code>mmap</code> to alloc a random page to some memory
mapped region, and it wouldn&#8217;t clash with the shared malloc linked list,
hence it&#8217;s easier to know after some mem intensive process is done with
the mapped region that it can be freed. But this is kind of uncommon.
And the point&#8217;s moot for Ruby which doesn&#8217;t really expose this
functionality for you.</p>

<p>So basically, most processes will grow and grow and grow and hopefully
plateau at some max mem usage, but won&#8217;t return mem to OS until
termination. Ruby processes fall into that category.</p>

<h2>Stripe idempotent requests</h2>

<p>https://stripe.com/docs/api?lang=curl#idempotent_requests</p>

<p>Awesome.</p>

<p>One gotcha: the same response is returned even if you change the params
you pass it (it doesn&#8217;t even seem to do any sort of validation of the
params; bogus charge tokens, currency type, etc, are all igored if it
can match idempotent id to a previous response).</p>

<h2>Postgres 9.4 jsonb and Rails 4.2</h2>

<p>http://robertbeene.com/rails-4-2-and-postgresql-9-4/</p>

<p>This is awesome. At the time of writing Heroku supports pg 9.3 out of
the box but has 9.4 in beta.</p>

<h2>Apple push notifications</h2>

<p>How does it work? Does it drain batteries? What about NAT?</p>

<p>From this <a href="https://support.apple.com/en-us/HT203609">bug/issue/report</a>:</p>

<ul>
<li>APNS prefers cellular connections to deliver push notifications</li>
<li>only if cell connection fails will it fall back to wifi</li>
<li>wifi is less likely to work due to firewalls blocking ports:

<ul>
<li>5223: default port (cell and wifi) to receive PNs from service</li>
<li>443: wifi-only fall back (because firewalls less likely to block SSL port)</li>
</ul>
</li>
</ul>


<p>http://android.stackexchange.com/a/32116/99197</p>

<p>So:</p>

<ul>
<li>push services use keep-alives</li>
<li>a keep alive is like a duplicate ACK pack w 0 data and has no effect
but to keep NAT caches alive.</li>
<li>probably at ~10m intervals to undercut NAT timeouts</li>
<li>NATs are variable depending on the network but 10m minimum on TCP
seems safe.</li>
<li>keep-alives will wake up the radio; all TCP reads must wake up the
radio, but this is inexpensive given that it&#8217;s every 10 min, shared by
entire OS.</li>
<li>NATs are more aggressive on UDP since UDP has no concept of a closed
connection; TCP is more forgivable since it at least tells you when
a connection is closed and hence NATs can be cleared.</li>
</ul>


<h2>MVCC</h2>

<p>Multi-version concurrency control</p>

<ul>
<li>reads see a snapshot of data, which may or may not be the latest</li>
<li>writes write the data elsewhere, mark old data as obsolete</li>
<li>reads hence don&#8217;t block writes, writes don&#8217;t block reads</li>
<li>but transaction commits can fail</li>
</ul>


<p>MVCC generally provides both a consistent/simple programming and
reasonably level of efficiency. In some cases a traditional locking
model might behave better to avoid retry hell.</p>

<p>SQL standard implements four levels of transaction isolation. The most
strict is <em>serializable</em>: given a set of serializable transactions,
any concurrent execution of this set produces the exact same result
as if the transactions were executed serially (one at a time, no
time overlap).</p>

<p>Example of serializable sets of transactions:</p>

<ul>
<li>all transactions are read-only (a bunch of SELECTs)</li>
<li>there is no overlap between what is read / written</li>
</ul>


<p>Other transaction levels are defined in terms of the following phenomena
that take place when transactions start to affect each other:</p>

<ul>
<li>dirty read: read another uncommitted trx&#8217;s written data</li>
<li>non-repeatable read: a second read within the same transaction
produces different results because another trx has committed
a write to that same data</li>
<li>phantom read: the set of (themselves-unchanged) rows returned from a
search query changes within a trx because some other since-committed
trx&#8217;s write affected the query, e.g. you&#8217;re querying <code>people</code> table
based on some dynamic criteria of another table, and while nothing&#8217;s
changed about the <code>people</code> table, the other table changed, resulting
in a second identical query returning different results

<ul>
<li><a href="http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Phantom_reads">actually this example is way better</a>:
your selection criteria is static, and a committed write from
another trx puts it into that selection criteria</li>
<li>worth noting that this might only be possible for INSERTs performed
by other trx&#8217;s; UPDATEs impacting a query between writes I think
would fall under non-repeatable read protection</li>
<li><em>Serializable</em> isolation means that the SELECT queries would
essentially lock out matching ranges, even on INSERTs.</li>
</ul>
</li>
</ul>


<p>Given the above-defined phenomena, the other three isolation levels (in
addition to <em>Serializable</em>) are:</p>

<ul>
<li><em>read uncommitted</em>: where the following are possible

<ul>
<li>dirty read</li>
<li>non-repeatable read</li>
<li>phantom read</li>
<li>Distinguishing characteristic: it can read the writes of
another uncommitted transaction</li>
</ul>
</li>
<li><em>read committed</em>:

<ul>
<li>non-repeatable read</li>
<li>phantom read</li>
<li>Distinguishing characteristic: if other transaction commits writes
between this trx&#8217;s reads, the reads might produce different results,
but uncommitted writes will never impact this trx&#8217;s reads.</li>
</ul>
</li>
<li><em>repeatable read</em>:

<ul>
<li>phantom read</li>
</ul>
</li>
</ul>


<p>Corner case:</p>

<ul>
<li><code>SELECT * FROM users WHERE age BETWEEN 10 AND 20;</code></li>
<li>other trx: write and commit user age 25</li>
<li><code>SELECT * FROM users WHERE age BETWEEN 10 AND 30;</code></li>
</ul>


<p>If the new user shows up in the second select, is it:</p>

<ul>
<li><code>serializable</code>?

<ul>
<li>Answer: I think YES. Since the data has been fully committed by the
time the second SELECT is performed, all <em>Serializable</em> guarantees
are maintained. Technically speaking, the range lock hasn&#8217;t been
acquired yet on the second INSERT.</li>
</ul>
</li>
</ul>


<h2>Isolation levels in postgres</h2>

<ul>
<li>isolation levels can be set per-transaction</li>
<li>default isolation level can be set via <code>SET SESSION CHARACTERISTICS</code>.</li>
<li>default level is <code>read committed</code>.</li>
<li>isolation levels only apply to what the current transaction can see of
other transactions, rather than isolating the effects of this
transaction from being seeable from other transactions.

<ul>
<li>metaphor: everyone chooses their own transaction goggles; they
choose what light is let in</li>
</ul>
</li>
<li>SERIALIZABLE is the only method that&#8217;ll throw an error (only in trx&#8217;s
marked as serializable) in cases where phenomenon are produced that
couldn&#8217;t have occurred in a one-at-a-time, serial setting.

<ul>
<li>so the other isolation modes just limit the kind of data they see
(and probably stress the engine in different ways depending on
how many locks/snapshots are in place) but won&#8217;t fire errors</li>
</ul>
</li>
</ul>


<p>So when does locking / blocking occur?</p>

<p>Answer: during conflicting writes.</p>

<ul>
<li>Read Committed:

<ul>
<li>selection criteria (selecting the rows to update) is same as SELECT,
in that it&#8217;ll only see rows committed before start time</li>
<li>but if, mid query, another uncommitted transaction writes to a given
row, locking will occur

<ul>
<li>if other trx commits, re-check search criteria and perform update
based on latest criteria</li>
<li>if other trx rolls back, ignore the write and proceed</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>So you still have read isolation between uncommitted trx&#8217;s, but writes
still &#8220;see&#8221; that uncommitted trx&#8217;s have been writing, and THAT&#8217;s when
locking occurs.</p>

<p>In such a case, two update queries might update sets of data
differently; if this is desired to be prevented, use SERIALIZABLE,
which&#8217;ll error if this case is detected.</p>

<p>By definition, then, a <code>serialization failure</code> rollback cannot happen if
there are <code>&lt;= 1</code> SERIALIZATION transactions.  WRONG WRONG WRONG. They
can happen for repeatable read!!!! See below!</p>

<blockquote><p>Because of the above rule, it is possible for an updating command to see an inconsistent snapshot: it can see the effects of concurrent updating commands on the same rows it is trying to update, but it does not see effects of those commands on other rows in the database. This behavior makes Read Committed mode unsuitable for commands that involve complex search conditions; however, it is just right for simpler cases. For example, consider updating bank balances with transactions like:</p></blockquote>

<pre><code>BEGIN;
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 12345;
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 7534;
COMMIT;
</code></pre>

<p>This is fine and safe even if some other trx updates acctnum 12345, but
more complex cases might troll:</p>

<h2>Repeatable reads also can yield serialization failure!</h2>

<blockquote><p>Applications using this level must be prepared to retry transactions due to serialization failures.</p></blockquote>

<p>If a first updater commits and changes/deletes the row, then ROLLBACK
occurs. &#8220;ERROR: could not serialize access due to concurrent update&#8221;.</p>

<p>In this case, the transaction should be retried. The second round will
see the most up to date info (unless more concurrent writes occur, in
which case the transaction might be retried).</p>

<p>So this is super rigorous (and increasingly expensive), but it is still
possible to miss out on some newly added data that now matches a
selection set, and some other corner cases. Only SERIALIZABLE can
prevent these.</p>

<p>These are some excellent, clear, tests from Rails that elucidate things.</p>

<p>https://github.com/rails/rails/blob/master/activerecord/test/cases/transaction_isolation_test.rb#L39</p>

<h2>Serialization gotcha</h2>

<p>I was trying to test serialization isolation to get it to error out as
expected w the following code (in a rake task):</p>

<pre><code>class P3 &lt; ActiveRecord::Base
  self.table_name = 'purchases'
end

Purchase.establish_connection
P3.establish_connection

Purchase.transaction(isolation: :serializable) do
  Purchase.last.update(last_activity_at: DateTime.now)
  P3.transaction(isolation: :serializable) do
    # Hangs here
    P3.last.update(last_activity_at: DateTime.now)
  end
  Purchase.last.update(last_activity_at: DateTime.now-5.seconds)
end
</code></pre>

<p>Of note:</p>

<p>The separate class pointing to the same table is necessary so that
the same postgres connection/session isn&#8217;t reused/shared (connections
on ActiveRecord classes are shared by default w
<code>ActiveRecord::Base.connection</code>, but you can give each ActiveRecord
class its own database connection, or point it to a separate
database, etc, via <code>establish_connection</code>. If you didn&#8217;t do this, the
above code would error out saying either you can&#8217;t nest transactions
or that you can set isolation level when joining a parent
transaction. Only MS-SQL supports true nested transactions, hence the
rails default of nested transactions using the same database
connection is to join them into a single transaction. Weird Shit.</p>

<p>Anyway, I ran the above code and it hanged within Postgres on
<code># Hangs here</code>. I was expecting a serialization error to fire at that
point (and theoretically it probably could and probably still be
consistent with the SQL standards on serializable transactions), but
postgres will actually block on that nested write while it waits for the
outer transaction to commit before it&#8217;ll detect the error and fire, but
since Ruby is blocked on that inner write, the outer block never runs to
completion, hence a deadlock. Note this wouldn&#8217;t happen under normal
circumstances but is only happning due to the hacky way I&#8217;m testing this
thing.</p>

<p>So anyway if you put it into threads you can start seeing these
exceptions throwing as expected:</p>

<pre><code>class P3 &lt; ActiveRecord::Base
  self.table_name = 'purchases'
end

Purchase.establish_connection
P3.establish_connection

t1 = Thread.new {
  loop {
    begin
      Purchase.transaction(isolation: :serializable) do
        Purchase.last.update(last_activity_at: DateTime.now-5.seconds)
      end
    rescue ActiveRecord::StatementInvalid =&gt; e
      raise e unless e.original_exception.is_a?(PG::TRSerializationFailure)
      retry
    end
    puts "t1 SUCCESS\n"
  }
}

t2 = Thread.new {
  loop {
    begin
      P3.transaction(isolation: :serializable) do
        P3.last.update(last_activity_at: DateTime.now)
      end
    rescue ActiveRecord::StatementInvalid =&gt; e
      raise e unless e.original_exception.is_a?(PG::TRSerializationFailure)
      retry
    end
    puts "t2 SUCCESS\n"
  }
}
</code></pre>

<p>Of note: the <code>TRSerializationFailure</code> error is specific to the <code>pg</code> gem
and adapter, and Rails doesn&#8217;t raise adapter-specific exceptions but
instead wraps them in the general <code>ActiveRecord::StatementInvalid</code>
error which lets you access the original <code>TRSerializationFailure</code>
exception via <code>original_exception</code>.</p>

<h2>Timezones</h2>

<p>http://en.wikipedia.org/wiki/List_of_tz_database_time_zones</p>

<p>List of time zone information is maintained by IANA:
http://en.wikipedia.org/wiki/Tz_database</p>

<p>Text files are provided by IANA, then <code>zic</code> is used to compile time
zones info to binary and stored in <code>/usr/share/zoneinfo</code>, e.g.
<code>/usr/share/zoneinfo/America/New_York</code>.</p>

<p>This is how you can set a default timezone in Ruby (and Heroku, etc)</p>

<pre><code>ENV['TZ']="America/New_York"
Time.now # 2015-03-23 11:46:26 -0400
ENV['TZ']="America/Phoenix"
Time.now # 2015-03-23 08:48:03 -0700
</code></pre>

<p>Ultimately it just tries to resolve a TZ in <code>/usr/share/zoneinfo</code> :)</p>

<p>What&#8217;s the local timezone?</p>

<pre><code>$ ls -l /etc/localtime
# lrwxr-xr-x  1 root  wheel  36 Mar 12 02:47 /etc/localtime -&gt; /usr/share/zoneinfo/America/New_York
</code></pre>

<p>Pretty cool.</p>

<p>Even on Mac OS X you can change the timezone this way (such that System
Preferences > Date &amp; Time will immediately update, as will your clock).</p>

<pre><code>sudo ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post with the most]]></title>
    <link href="http://machty.github.com/blog/2015/02/21/post-with-the-most/"/>
    <updated>2015-02-21T16:33:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/21/post-with-the-most</id>
    <content type="html"><![CDATA[<h2>DI, Clojure Components</h2>

<p>https://www.youtube.com/watch?v=13cmHf_kt-Q</p>

<p>A component is an object (just like in OOP) that encapsulates some state
but really just tries to focus on behavior rather than the manipulation
of that internal state.</p>

<p>Types of Components:</p>

<ul>
<li><p>State Wrapper</p>

<ul>
<li>e.g. wrap a stateful connection to a database</li>
<li>e.g. open expensive connection object on create, kill on destroy

<ul>
<li><code>(defrecord DB [host conn])</code>

<ul>
<li>host and conn are meant to be private fields, but privacy
isn&#8217;t actually enforcible in clojure</li>
</ul>
</li>
<li>Public API

<ul>
<li><code>(defn query [db &amp; ...] (.doStatement (:conn db)))</code></li>
<li>these functions <em>do</em> access the conn and host fields; they&#8217;re
the &#8220;public methods&#8221;</li>
</ul>
</li>
<li>Constructor

<ul>
<li>You don&#8217;t have to just use (and maybe shouldn&#8217;t use?) the
default defrecord constructor (e.g. ->DB)</li>
<li>Instead you should expose more convenient constructors that
are themselves side-effect less but return the record.</li>
<li>e.g. <code>(defn db [host] (map-&gt;DB {:host host}))</code></li>
<li>NOTE: <code>map-&gt;RECORDNAME</code> is something declared for you by
the <code>defrecord</code> macro, specifically <code>(declare ~(symbol (str 'map-&gt; gname))</code></li>
<li>Again, no side effects&#8230; a constructor just produces an object,
but that object still needs to be kicked into gear in some way,
let&#8217;s say, via:</li>
</ul>
</li>
<li>Lifeycle Protocol

<ul>
<li>Side effects!</li>
</ul>
</li>
</ul>


<p>(defrecord DB [host conn]
  component/Lifecycle
  (start [this]</p>

<pre><code>(assoc this   ;; returns new thing!!! don't just sideeffect the obj
  :conn (Driver/connect host)))
</code></pre>

  (stop [this]

<pre><code>(.stop conn)
this)
</code></pre></li>
</ul>
</li>
<li><p>Service Wrapper</p>

<ul>
<li>a service like Email is initialized with, say, host and api-key,
but after that point, everyone just needs to pass args like
address and body to use it; that state is encapsulated.</li>
</ul>
</li>
<li><p>Domain Model</p>

<ul>
<li>some subset of functionality and represent as a component</li>
<li>as opposed to OOP where you&#8217;d have a Customer obj with both state
for a specific customer as well as methods to control behavior and
manipulate state, a <code>Customers</code> domain model is an aggregate of
behavioral operations.</li>
<li><p>behavioral dependencies are encapsulated together; a Customers
object depends on the db state wrapper and email service</p>

<p>(defrecord Customers [db email])</p>

<p>;; public api:
(defn notify [customers name message]
  (let [{:keys [db email]} customers</p>

<pre><code>    address (query db ... name)]
(send email address message)))
</code></pre></li>
</ul>
</li>
<li><p>Domain Model (cont.)</p>

<ul>
<li>fetches db and email dependencies from customers record&#8230;</li>
<li>&#8230; queries address from db</li>
<li>&#8230; and uses the email service to send it to the customer</li>
</ul>
</li>
<li><p>Constructing components</p>

<ul>
<li>make a <code>defn</code>, tell the name of the dependences with :keywords.</li>
</ul>
</li>
<li>Associative injection

<ul>
<li>a system (container in Ember) is just a map</li>
<li>if you want to stub dependencies, just assoc those stubs

<ul>
<li>weakness: if you base these test systems off the live one,
if you add another component to the live one, you have to
remember to stub it out (hence isolated containers)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Sample RxJsbin w testing</h2>

<p>http://jsbin.com/colora/31/edit</p>

<p>Good lord do they need help w docs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OMG I'm in California]]></title>
    <link href="http://machty.github.com/blog/2015/02/17/omg-calfornia/"/>
    <updated>2015-02-17T05:45:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/17/omg-calfornia</id>
    <content type="html"><![CDATA[<h2>Definitive Ubuntu folder hierarchy</h2>

<p>https://help.ubuntu.com/community/LinuxFilesystemTreeOverview</p>

<pre><code>/bin is a place for most commonly used terminal commands, like ls, mount, rm, etc.

/boot contains files needed to start up the system, including the Linux kernel, a RAM disk image and bootloader configuration files.

/dev contains all device files, which are not regular files but instead refer to various hardware devices on the system, including hard drives.

/etc contains system-global configuration files, which affect the system's behavior for all users.

/home home sweet home, this is the place for users' home directories.

/lib contains very important dynamic libraries and kernel modules

/media is intended as a mount point for external devices, such as hard drives or removable media (floppies, CDs, DVDs).

/mnt is also a place for mount points, but dedicated specifically to "temporarily mounted" devices, such as network filesystems.

/opt can be used to store addition software for your system, which is not handled by the package manager.

/proc is a virtual filesystem that provides a mechanism for kernel to send information to processes.

/root is the superuser's home directory, not in /home/ to allow for booting the system even if /home/ is not available.

/sbin contains important administrative commands that should generally only be employed by the superuser.

/srv can contain data directories of services such as HTTP (/srv/www/) or FTP.

/sys is a virtual filesystem that can be accessed to set or obtain information about the kernel's view of the system.

/tmp is a place for temporary files used by applications.

/usr contains the majority of user utilities and applications, and partly replicates the root directory structure, containing for instance, among others, /usr/bin/ and /usr/lib.

/var is dedicated variable data that potentially changes rapidly; a notable directory it contains is /var/log where system log files are kept.
</code></pre>

<h2>init.d vs init</h2>

<p><code>init.d</code> is old-school SystemV style, wherein you have executable
scripts in <code>/etc/init.d</code> folder which have case statements matching
<code>reload</code>, <code>start</code>, etc, and doing some behavior based on that.</p>

<p><code>/etc/init</code> houses the newer Upstart format largely adopted by Ubuntu,
and within that you have a bunch of <code>.conf</code> files for managing daemons.</p>

<p>init.d / SystemV:</p>

<pre><code>/etc/init.d/nginx restart
</code></pre>

<p>upstart</p>

<pre><code>restart nginx 
# looks up /etc/init/nginx.conf
</code></pre>

<h2>Apple Store Wonkery</h2>

<p>Failed to upload the app, many times, provisioning profile and
certificate shit due to know laptop. Final error within Application
Loader was due to ITMS-4088 error, and was solved when 1) built
everything with fresh certificates / prov profs under machty and 2)
deployed via the other email account which shall not be publicly named
because security.</p>

<h2>File Dialog slowness on 2011 MBP Yosemite</h2>

<p>Just upgraded my 2011 MBP (w SSD drive) to Yosemite and notice a bug
that every time a file dialog closes, regardless of the app, and
regardless of whether a file was chosen or the user cancels, there is a
~15s hanging spinner until it unfreezes. This happens:</p>

<ul>
<li>if the view mode is anything other than Icon mode (e.g. for any list view), AND</li>
<li>there are audio/video files in the folder (e.g. mp3, aiff, mov)</li>
</ul>


<p>If there&#8217;s text only files, or even pdfs or dmgs or other things with
icons, it&#8217;s fine, but one audio/visual</p>

<!--more-->


<h2>Refresh Open With menu</h2>

<pre><code>/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user 
</code></pre>

<p>http://www.tekrevue.com/tip/rebuild-launchservices-fix-duplicate-entries-os-xs-open-menu/</p>

<h2>Linux Groups Flush at Login</h2>

<p>http://superuser.com/a/275240</p>

<p>TLDR if you change <code>/etc/group</code>, changed users will need to re-login
to see those changes.</p>

<p>If it&#8217;s a daemon whose uid has changed group memberships, then you just
need to restart it, no need for system restart or anything like that.</p>

<h2>Git only tracks executable perms</h2>

<p>If you chmod changes to rw, git won&#8217;t notice, but if you change
executable perms, it will. Reason being git is distributable and
portable, and r/w perms don&#8217;t exist on all systems where as executables
generally do.</p>

<p>http://stackoverflow.com/questions/1071241/how-does-git-handle-folder-permission</p>

<h2>Sticky bit</h2>

<p>http://askubuntu.com/questions/432699/what-is-the-sticky-bit-t-permission-and-why-does-tmp-have-it</p>

<p>mnemonic: <code>/tmp</code> is the canonical sticky bit example, and sticky bit
shows up as <code>t</code>&#8230; <code>/tmp</code> <code>t</code> <code>/tmp</code> <code>t</code>.</p>

<p>It means, regardless of permissions, that only a files owner can delete
or rename a file.</p>

<h2>Postgres host-based auth</h2>

<p>Config for host-based authentication are in <code>pg_hba.conf</code></p>

<h2>Bash/shell script: default vals</h2>

<p>From ansible :</p>

<pre><code>PYTHONPATH=${PYTHONPATH-""}
</code></pre>

<p>This doesn&#8217;t make noise</p>

<pre><code>echo ${USER-`say wat`}
</code></pre>

<p>This doesck</p>

<pre><code>echo ${USERABSDUOASBD-`say wat`}
</code></pre>

<h2>perms stored on inode, duh</h2>

<p>So hard links can&#8217;t have separate permissions:</p>

<pre><code>$ :: ls -l
-rw-r--r--  2 machty  staff  0 Feb 11 06:08 a
-rw-r--r--  2 machty  staff  0 Feb 11 06:08 b

$ :: chmod 000 a
$ :: ls -l
----------  2 machty  staff  0 Feb 11 06:08 a
----------  2 machty  staff  0 Feb 11 06:08 b
</code></pre>

<h2>PXE, Cobbler</h2>

<p>PXE means Preboot Execution Environment, which uses UDP, DHCP, other
basic network stuff to boot a system pulling dynamic information /
images from some host.</p>

<p>Cobbler</p>

<p>http://www.cobblerd.org/about.html</p>

<h2><code>.dispose()</code> in Rx</h2>

<p>What has a dispose method?</p>

<p>Only observers (and subjects, which is an observer+observable).
Calling dispose on an observer immediately desubscribes any subscribers
and prevents the delivery of any additional messages, INCLUDING
termination messages.</p>

<p>Subscriptions also have <code>.dispose</code>.</p>

<p>Twist: a subscription IS an observer!</p>

<p>http://jsbin.com/zufeze/3/edit?js,console,output</p>

<p>TL;DR just like the <code>observer</code> passed to <code>Rx.Observable.create</code>, you can
call <code>.onNext</code> and <code>.onCompleted</code> to a subscription!!!!!</p>

<p>You push to observers/subscriptions. An observer is a subscription to a
stream of data. It expects notifications of additional values and
termination/error events.</p>

<h2><code>dematerialize</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var source = Rx.Observable
</span><span class='line'>    .from([
</span><span class='line'>        Rx.Notification.createOnNext(42),
</span><span class='line'>        Rx.Notification.createOnCompleted()
</span><span class='line'>    ])
</span><span class='line'>    .dematerialize();
</span><span class='line'>
</span><span class='line'>var subscription = source.subscribe(
</span><span class='line'>    function (x) {
</span><span class='line'>        console.log('Next: ' + x.toString());
</span><span class='line'>    },
</span><span class='line'>    function (err) {
</span><span class='line'>        console.log('Error: ' + err);
</span><span class='line'>    },
</span><span class='line'>    function () {
</span><span class='line'>        console.log('Completed');
</span><span class='line'>    });</span></code></pre></td></tr></table></div></figure>


<p>If <code>dematerialize</code> hadn&#8217;t been called here, you&#8217;d see
<code>Next: onCompleted</code> show up; dematerialize makes sure onErrors
and onCompleteds (available explicitly via <code>Rx.Notification</code>)
are treated as actual <code>onCompleted</code> and <code>onError</code> events rather
then <code>onNext</code> values.</p>

<p>The implementation is simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  observableProto.dematerialize = function () {
</span><span class='line'>        var source = this;
</span><span class='line'>            return new AnonymousObservable(function (o) {
</span><span class='line'>                    return source.subscribe(function (x) { return
</span><span class='line'>                    x.accept(o); }, function(e) { o.onError(e); },
</span><span class='line'>                    function () { o.onCompleted(); });
</span><span class='line'>                        }, this);
</span><span class='line'>              };</span></code></pre></td></tr></table></div></figure>


<p>Basically, <code>observer.accept</code> will look out for onCompletes and onErrors
and cause the recursion.</p>

<h3>Pausable/stubbable promises</h3>

<p>http://jsbin.com/jefawi/1/edit</p>

<p>TODO:</p>

<ul>
<li>finish example</li>
<li>stub the resolution of the promise, or replace the entire promise?</li>
<li>maybe we want a stubbableThen?</li>
</ul>


<p>You can make a promise stubbable via:</p>

<pre><code>new Promise.stubbable(function() {
}, requiredLabel);
</code></pre>

<p>this will give you a chance to complete override the resolver fn.</p>

<pre><code>someOtherPromise.then(..., ...);
</code></pre>

<p>you can stub in the middle of a chain via</p>

<pre><code>someOtherPromise.stubbable('label').then(..., ...);
</code></pre>

<p>this means the original promise will still run through</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I need ur luv]]></title>
    <link href="http://machty.github.com/blog/2015/02/04/i-need-ur-luv/"/>
    <updated>2015-02-04T05:45:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/04/i-need-ur-luv</id>
    <content type="html"><![CDATA[<h2>flatMapObserver</h2>

<p>Whereas flatMap merges the elements of the observable returned from the
mapping fn, flatMapObserver subscribes to each event of the incoming
observable via a similar API to observers, but the return of each fn is
an observable that gets merged/flatMapped.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmapobserver.md</p>

<p>NOTE: the observable returned from the onComplete handler does not
cause the generated stream to end; it&#8217;ll be merged with any (possibly
delayed) observables returned from onNext handler.</p>

<h2>State</h2>

<p>State a la Clojure/immutability separates value from
identity, value is a consistent concept over time, and once two values
are equal, they&#8217;re equal forever, because nothing is mutable.</p>

<p>So, what about app state where event handlers are set up? Say you&#8217;ve
done the functional/React-y thing and you have some leaf component that
fires an event into the ethos at some point in time, and you&#8217;ve fluxed
it into some event handler that <code>setState</code>s at the root level. This
event could happen after 10 seconds, 1000 seconds, or possibly
immediately. But if it&#8217;s immediately, is this fundamentally different
from a situation where things are <em>not</em> data down actions up? How is
this different from a two way binding with async settling?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watoozy]]></title>
    <link href="http://machty.github.com/blog/2015/01/26/watoozy/"/>
    <updated>2015-01-26T15:55:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/26/watoozy</id>
    <content type="html"><![CDATA[<h2>DAS</h2>

<p>&#8220;how and why to avoid nil&#8221;</p>

<p>I&#8217;d watched this before, but the last approach is most interesting:</p>

<ul>
<li>embrace immutability</li>
<li>embrace domain objects whose non-nullable properties are part of
their identity</li>
</ul>


<p>Other thoughts:</p>

<p>Block-less <code>it</code> rspec specs are considered pending; useful for writing
out a bunch of specifications at once and implementing them later.</p>

<p>&#8220;pushing complexity down&#8221;</p>

<p>When you&#8217;re writing a test whose behavior depends on dependencies (e.g.
MonthlyBilling class pushes the &#8220;who-to-charge&#8221; logic into the User
classes&#8217;s <code>charge</code> method), you&#8217;re writing a &#8220;systems test&#8221; /
integration test.</p>

<h2>Ebryn machtizzle</h2>

<p>Talking about the sideways problem</p>

<p>https://hackpad.com/Ebryn-Machty-Router-discussion-iRBXvKmKj5v</p>

<!--more-->


<h2>webkit-user-select screws input focusability</h2>

<p><code>use-select: none</code> disables selectability, which is often desirable in
mobile apps, hence:</p>

<pre><code>* {
  -webkit-user-select:none;
  user-select:none;
}
</code></pre>

<p>But on certain versions of iOS/Desktop Safari, it makes your inputs
unfocusable, so you fix with something ugly like:</p>

<pre><code>input[type="text"],
input[type="tel"],
input[type="email"],
input[type="user"],
input[type="password"],
input[type="search"] {
  -webkit-user-select: text;
  user-select: text;
}
</code></pre>

<h2>Banker&#8217;s rounding</h2>

<p>aka Round half to even</p>

<p>Round to nearest even neighbor when equidistant (5):</p>

<pre><code>$1.055 =&gt; $1.06
$1.045 =&gt; $1.04
</code></pre>

<p>It&#8217;s one of the main rounding algos for IEEE floating point.</p>

<h2>Rx Which to Use?</h2>

<p>Super useful.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/which-instance.md</p>

<h2>SSH dev ops respect</h2>

<p>Wanted a quick ssh script that a dev could use to deploy a wordpress
site. Really I just needed them to be able to log in and run a pull.</p>

<p>Solution:</p>

<ol>
<li>Use SSH Agent forwarding</li>
<li>Make the WP staging repo share the group of the remote user</li>
</ol>


<p>SSH Agent forwarding proxies your local SSH agent to the remote <code>sshd</code>,
so that remote <code>sshd</code> can use your local credentials to continue logging
into stuff. In this case, we wanted forwarding to grant access to the
GitHub repo we wanted to pull from.</p>

<h2>iOS: changing app permissions SIGKILLs them</h2>

<p>e.g. if you tell your user to grant previously-declined permissions by
going to Settings > Privacy > App and switch permissions, then you app
must restart. Makes sense I suppose.</p>

<h2>iOS: open Settings from app</h2>

<p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplication_Class/index.html#//apple_ref/c/data/UIApplicationOpenSettingsURLString">Only available in iOS 8+</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reekris]]></title>
    <link href="http://machty.github.com/blog/2015/01/13/reekris/"/>
    <updated>2015-01-13T17:06:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/13/reekris</id>
    <content type="html"><![CDATA[<h2>More on Rx state machines</h2>

<p>From https://github.com/logicalguess/rx-state-machine</p>

<pre><code>// Pattern:
// 1. start off with initial door state, 
// 2. scan the UI event stream with a initial door state and a
//    transforming function. The transforming function is the thing
//    that runs the UI event on the current state, and returns the next state.
//    In this case the transforming fn is `transition`.
events.scan(door, transition).map(doorStatus)
    .subscribe(function (value) {
        view.render(value);
    });
</code></pre>

<p>So what I want to do is expose an API where you can group related events
into states, possibly share events between states, get an actions stream,
and&#8230; somehow transition elsewhere after that?</p>

<pre><code>var state = {
  submitForm: function() {
    // this is just a normal callback handler, just like actions api
  },

  // but maybe if you decorate your handler in some way...
  $submitForm: function(stream) {
    // ... you get a stream of actions instead
    // What should this API look like? How to export another stream
    // or property? 
    // Goals:
    // - make it easy/possible to
    //   - derive flag/state from action progress
    //   - 
  }
};

&lt;form &gt;
  &lt;SubmitButton action='submitForm'&gt;
&lt;/form&gt;
</code></pre>

<h2>Harness</h2>

<p>I don&#8217;t think I&#8217;ve ever grokked the word &#8220;harness&#8221; in a computer science
context.</p>

<blockquote><p>a set of straps and fittings by which a horse or other draft animal is fastened to a cart, plow, etc., and is controlled by its driver.</p></blockquote>

<p>So, a horse harness, wrapped around a horse to control it. Or a
parachute harness that wraps around a person to levitate them. Or a
child-restraining harness.</p>

<pre><code>so in this case, it takes a compiled ember CLI app that can normally run by itself, adds some bootstrap code, and runs it in a different environment

wrapper is maybe a synonym

but with slightly different connotations

I think of a harness as "holding the software in place" so you can make modifications to it, then run it

whereas wrapper implies you're trying to hide the underlying software
</code></pre>

<p>So put the otherwise self-contained / self-sufficient software in a
harness so you can run a bunch of tests on it, run it in a different
environment.</p>

<!--more-->


<h2>BHO Butane Hash Oil</h2>

<p>http://www.reddit.com/r/CrappyDesign/comments/2sacxp/this_is_butane_fluid_why/</p>

<p>http://www.theweedblog.com/what-is-marijuana-butane-hash-oil-bho-and-is-it-safe/</p>

<p>You can push pure liquid butane through ground marijuana, which absorbs
the cannibinoids, and then the butane evaporates, leaving some extremely
rich THC honey.</p>

<h2>ClojureScript</h2>

<p>Came after Clojure, is a pretty faithful redesign of Clojure, targeting
JS runtime (way more faithful than the meaningless Java vs JavaScript).</p>

<p>Differences:</p>

<ul>
<li>ClojureScript internally builds on top of protocols; no type-based
dispatching like there is (internally) for Clojure/Java classes

<ul>
<li>side effect of this is that implementations for protocols can be
scattered all over the code; it doesn&#8217;t need to bloat the definition
of a polymorphic fn in one place where it doesn&#8217;t belong via
manual switch/type-based dispatching</li>
</ul>
</li>
</ul>


<p><code>-</code> in a method name is just another character in the name. Used for low
level cljs fns, has no special meaning (in the way that preceding <code>.</code>
does).</p>

<h2>Do nils still stuck in ClojureScript?</h2>

<p>Gary Bernhardt (and many, many others) have been vocal about the evil of
leaky <code>nil</code>s in your program. In Ruby it&#8217;s particularly rampant/evil
because <code>Hash#[]</code> just returns <code>nil</code> if the key isn&#8217;t present (hence
it&#8217;s a good practice to use <code>Hash#fetch</code> if you really expect the value
to be there, in, say, an options hash), and whatever that value is gets
passed around and it&#8217;s later on, far away from the original nil leak,
that you get a <code>NoMethodError</code> on <code>NilClass</code> because you had something
in your code that looks like:</p>

<pre><code>obj.meth
</code></pre>

<p>Clojure(Script) isn&#8217;t object oriented, so it&#8217;d be something like</p>

<pre><code>(some-fn obj)
</code></pre>

<p>and if you&#8217;re using protocols, you&#8217;d define <code>some-fn</code> as a function
(method?) of that protocol, and if you wanted to &#8220;guard&#8221; against nils,
you&#8217;d provide an implementation of that protocol for <code>nil</code>.</p>

<p>So there is one benefit over OO in this case which is that you can give
<code>nil</code> meaning in the protocol in question without having to stash a
duck-typed method on <code>NilClass</code> (and hope no one else clobbers it),
which means your code won&#8217;t throw an ugly exception in the case of
<code>(some-fn obj)</code>, when it would for <code>nil.meth</code>, but there&#8217;s still damage
done by a leaked nil: if it&#8217;s easy to produce a nil and have it
referenced elsewhere in your code at some later time, the fact that it&#8217;s
a class/datatype that you never expected means it&#8217;s a lot easier for
other expected datatypes to accidentally become nil, but your
compiler/runtime won&#8217;t raise a fuss about it because this universal nil
object implements your protocol. If you had an error in your code and
actually passed the wrong datatype to a protocol method (that didn&#8217;t
implement that datatype), you&#8217;d actually get a compiler error (which is
what you want).</p>

<p>TL;DR nil leaks still exist in Clojure(Script), they&#8217;re potentially less
damaging than in an OO setting because of protocols, but it&#8217;s still
problematic because of the universality of <code>nil</code> and the likeliness that
protocols will be implemented for <code>nil</code>, hiding the problem. It also
doesn&#8217;t help that <code>(seq empty-list)</code> returns <code>nil</code>, but I&#8217;d have to
think about this problem more to expand the scope of my criticism. :) :)
:)</p>

<p>Note: it&#8217;s also probably important to distinguish between
intentional/accidental nils: it&#8217;s already bad to intentionally
incorporate <code>nil</code>s into your software&#8217;s design, but accidentaly <code>nil</code>s
do to <code>#[]</code> is even worse.</p>

<p>Relevant David Nolen / Gary Bernhardt tweetoff:
https://twitter.com/swannodette/status/555548047837380608</p>

<h2>Ruby Enumerable#zip</h2>

<p>This was a nice pattern: I was looking for a way to combine two arrays
via some fn but couldn&#8217;t find it: the following seemed to work:</p>

<pre><code>expected.zip(actual).all? { |a,b| a.quantity == b.quantity &amp;&amp; a.scan_code == b.scan_code }
</code></pre>

<h2>KVO vs Immutable</h2>

<p>KVO is PLOP (Place Oriented Programming). Putting new values in the same
place that everyone&#8217;s referencing, clobbering any sort of history,
mutating &#8220;state&#8221;.</p>

<p>But the nice thing is if you change that value, everyone gets updated.
But the subscription model is KVO. There&#8217;s always a subscription model.
Publish by replacing the place.</p>

<p>Publishing immutable objects has different challenges. There&#8217;s no
&#8220;place&#8221;. Either there&#8217;s a stream of immutable values, or a setState. All
subscriptions must be one of those. React child components are
&#8220;subscribed&#8221; by nature of being, well, child components, and they get
notified by render/setState. Consumers of a stream.</p>

<p>So what about async on an immutable obj? You&#8217;d probably use a promise or
a stream, fire a publish event when it comes back. Just in the same way
you&#8217;d do for a synchronous immutable update. This is obvious shit.</p>

<h2>Clojure: rifle-oriented programming</h2>

<p>http://thinkrelevance.com/blog/2009/08/12/rifle-oriented-programming-with-clojure-2</p>

<p>TODO: read this</p>

<h2>CSP w JS generators:</h2>

<p>https://github.com/ubolonton/js-csp</p>

<p>What ClojureScript accomplishes with macros, this achieves with
generators. Hence it&#8217;s only in Chrome >= 28 (current version at time of
writing is 39) but it&#8217;s behind experimental flag, and Firefox >= 27.</p>

<h2>Slalom: Constraints, animations, touch interactions, etc</h2>

<p>http://iamralpht.github.io/constraints/</p>

<h2>Bitmapped vector tree</h2>

<p>https://www.youtube.com/watch?v=mS264h8KGwk&amp;feature=youtu.be</p>

<ul>
<li>random access</li>
<li>efficient push</li>
<li>based on Phil Bagwell&#8217;s mutable Hash Array Map trie</li>
<li>updates on a path only update that path. Everything else can get
shared.</li>
<li>branching factor; length of each segment. 32 is the empirically
derived Clojure default.

<ul>
<li>7 max hops before you reach the end of an array that you can keep in
memory</li>
</ul>
</li>
</ul>


<h2>Rx Begin and end</h2>

<p>I want to express &#8220;fire resize events while the app is running&#8221;. I guess
I&#8217;d have to create some observable that begins on app creation and ends
on app destruction&#8230; first stab:</p>

<pre><code>Rx.Observable.fromEvent(window, 'resize')
             .takeWhile(Rx.Observable.timer(2000))
             .forEach(function() {
    console.log("hello");
});
</code></pre>

<p>I&#8217;m getting some error because takeWhile expects a predicate. Maybe
takeUntil will do it?</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/takeuntil.md</p>

<p>HUZZAH: http://jsbin.com/colora/9/edit?html,js,console,output</p>

<p>Now I just need to create an observable&#8230;</p>

<h2>Rx Emberified</h2>

<p>Didn&#8217;t expect to see this in fromEvent code in the RxJS repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  if (!!root.Ember && typeof root.Ember.addListener === 'function') 
</span><span class='line'>    return fromEventPattern(
</span><span class='line'>      function (h) { Ember.addListener(element, eventName, h); },
</span><span class='line'>      function (h) { Ember.removeListener(element, eventName, h); },
</span><span class='line'>      selector);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>selectMany === flatMap</h2>

<p>nuff said. Why is selectMany a good name though?</p>

<h2>LINQ</h2>

<p>http://en.wikipedia.org/wiki/Language_Integrated_Query</p>

<p>It&#8217;s syntax introduced into .NET languages for querying lists,
relational databases, observables, etc. Meant to be used in conjunction
w Rx.</p>

<h2>mies cljs template</h2>

<p>https://github.com/swannodette/mies</p>

<pre><code>▾ out/
  ▾ cljs/
      core.cljs
      core.cljs.cache.edn
      core.js
      core.js.map
  ▾ clojure/
    ▾ browser/
        event.cljs
        event.cljs.cache.edn
        event.js
        event.js.map
        net.cljs
        net.cljs.cache.edn
        net.js
        net.js.map
        repl.cljs
        repl.cljs.cache.edn
        repl.js
        repl.js.map
  ▾ goog/
    ▾ array/
        array.js
    ▾ asserts/
        asserts.js
    ▾ async/
        delay.js
        nexttick.js
        run.js
    ▾ debug/
        debug.js
        entrypointregistry.js
        error.js
        logbuffer.js
        logger.js
        logrecord.js
    ▾ disposable/
        disposable.js
        idisposable.js
    ▾ dom/
        browserfeature.js
        dom.js
        nodetype.js
        safe.js
        tagname.js
        tags.js
    ▾ events/
        browserevent.js
        browserfeature.js
        event.js
        eventhandler.js
        eventid.js
        events.js
        eventtarget.js
        eventtype.js
        listenable.js
        listener.js
        listenermap.js
    ▾ functions/
        functions.js
    ▾ html/
        safehtml.js
        safestyle.js
        safeurl.js
    ▾ i18n/
        bidi.js
    ▾ iter/
        iter.js
    ▾ json/
        json.js
    ▾ labs/
      ▾ useragent/
          browser.js
          engine.js
          util.js
    ▾ log/
        log.js
    ▾ math/
        coordinate.js
        math.js
        size.js
    ▾ messaging/
        abstractchannel.js
        messagechannel.js
    ▾ mochikit/
      ▾ async/
          deferred.js
    ▾ net/
      ▾ xpc/
          crosspagechannel.js
          crosspagechannelrole.js
          directtransport.js
          frameelementmethodtransport.js
          iframepollingtransport.js
          iframerelaytransport.js
          nativemessagingtransport.js
          nixtransport.js
          transport.js
          xpc.js
        errorcode.js
        eventtype.js
        httpstatus.js
        wrapperxmlhttpfactory.js
        xhrio.js
        xhrlike.js
        xmlhttp.js
        xmlhttpfactory.js
    ▾ object/
        object.js
    ▾ promise/
        promise.js
        resolver.js
        thenable.js
    ▾ reflect/
        reflect.js
    ▾ string/
        const.js
        string.js
        stringbuffer.js
        typedstring.js
    ▾ structs/
        collection.js
        map.js
        set.js
        structs.js
    ▾ testing/
        watchers.js
    ▾ timer/
        timer.js
    ▾ uri/
        uri.js
        utils.js
    ▾ useragent/
        useragent.js
      base.js
      deps.js
  ▾ hello_world/
      core.cljs
      core.cljs.cache.edn
      core.js
      core.js.map
▸ scripts/
▸ src/
▾ target/
  ▾ cljsbuild-compiler-1/
    ▸ cljs/
    ▸ clojure/
    ▸ hello_world/
      constants_table.js
  hello_world.js
  hello_world.min.js
  index.html
  project.clj
  README.md
</code></pre>

<h2>Rx return vs of</h2>

<pre><code>Rx.Observable.of(1,2,3,4)
</code></pre>

<p>vs</p>

<pre><code>Rx.Observable.return(1)
// aliases
Rx.Observable.just(value, [scheduler])
Rx.Observable.returnValue(value, [scheduler])
</code></pre>

<p><code>of</code> accepts multiple values&#8230; return just does 1? Why does there n</p>

<h2>Windows, buffers</h2>

<pre><code>* @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
</code></pre>

<p>Basically, a buffer TODO TODO TODO</p>

<h2>Value vs identity</h2>

<p>In ClojureScript, something something TODO</p>

<p>Sharp distinction between value and identity. Identities are things like
refs or atoms and you have to deference them to get the value. You can
use <code>=</code> fn to test value equality, and once equal, ALWAYS equal, thanks
to immutability.</p>

<h2>Promise-aware Ember Chainwatchers implemented in Rx</h2>

<p>http://emberjs.jsbin.com/penuko/4/edit</p>

<h2>Elm lang</h2>

<p>FRP lang that compiles to JS.</p>

<p>http://elm-lang.org/Blog.elm</p>

<p>http://www.infoq.com/presentations/elm-reactive-programming</p>

<h2><code>-&gt;</code> vs <code>-&gt;&gt;</code></h2>

<p>The difference is where the rest of one expression gets passed into the
following form(s).</p>

<pre><code>(-&gt; 1
  (- 2))
-1
</code></pre>

<p>vs</p>

<pre><code>(-&gt;&gt; 
  (- 2))
1
</code></pre>

<h2>Cljsbin</h2>

<p>http://cljsfiddle.net/</p>

<h2>Chrome Script/Framework Blackboxing</h2>

<p>https://developer.chrome.com/devtools/docs/blackboxing</p>

<p>Seems pretty awesome. TL;DR: skip framework/minified code when you&#8217;re
stepping in/over/out of it. Especially useful for iteration/callbacks.</p>

<h2>Rx Event capture</h2>

<p>Goal: have something work like <code>window.alert()</code>, but animated and async,
and effortless.</p>

<p>Restrictions: literally everything needs to pass through (and get
buffered by Rx), except maybe mousemoves?</p>

<p>What are important stream windows?</p>

<ul>
<li>Views/Components

<ul>
<li>receive UI events when window is &#8220;active/focused/live&#8221;

<ul>
<li>e.g. NOT when view is animating</li>
<li>NOT when view is destroyed</li>
</ul>
</li>
</ul>
</li>
<li>Anything</li>
</ul>


<p>Realization: controller/store/websocket events probably don&#8217;t need to be
buffered/filtered in any way, given that 99% of the events you&#8217;d like to
block probably come from UI events. Exceptions to this rule? Perhaps
some instance where you have a <code>window.alert()-ish</code> thing and the pushed
websockets data can&#8217;t be acted upon until the alert is tapped. My head
hurts a lot. Quite a bit. Ah, what about timers within views/components?
What if they go off in the middle of a thing? They should kinda be
considered a UI event&#8230; maybe?</p>

<p>Idea: components are meant to have inputs and outputs. And then ideally
they have some logic within themselves that encapsulates some tricky bit
of UI. But there are problems with this:</p>

<ul>
<li>Should it really be up to a component to switch between clicks and
taps for desktop / mobile?</li>
<li>Should a UI event like a click even be considered as &#8220;originating&#8221;
from that component?</li>
</ul>


<p>It seems like we should make it possible to inject these UI event
dependencies somehow? jQuery is probably effed&#8230; but if you&#8217;re using
jQuery you&#8217;ve already lost.</p>

<ul>
<li>We can use Rx/bacon/FRP to provide these events?</li>
<li>Who are the gate keepers? Parent DOM? Parent components?</li>
<li>Can we still make DOM event delegation work?</li>
</ul>


<p>So I guess we do</p>

<h2>eventPhase</h2>

<p>https://developer.mozilla.org/en-US/docs/Web/API/event.eventPhase</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Event.NONE = 0
</span><span class='line'>Event.CAPTURING_PHASE = 1
</span><span class='line'>Event.AT_TARGET = 2
</span><span class='line'>Event.BUBBLING_PHASE = 3</span></code></pre></td></tr></table></div></figure>


<h2>React capture phase</h2>

<p>http://facebook.github.io/react/docs/events.html</p>

<p>React wraps native wrappers and provides a SyntheticEvent interface that
also does event delegation to keep things cheap. <code>nativeEvent</code> gives you
access to the (not-browser-unified) native event object.</p>

<p>You can also get capture-phase handlers to fire by adding <code>Capture</code> to
the name of the handler. Preeeetty clever I guess.</p>

<p>Still trying to find the cleverest way.</p>

<h2>Rx guidelines</h2>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/designguidelines/readme.md</p>

<h2>Rx 010101 series into windows</h2>

<p>http://jsbin.com/colora/15/edit</p>

<h2>oaijsd</h2>

<p>http://jsbin.com/sedeta/1/edit?html,js,output</p>

<h2>LayerVault</h2>

<p>git for design.</p>

<h2>Rx Schedulers</h2>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/schedulers.md</p>

<h2>Rx-ish integration in React</h2>

<p>TODO: research this</p>

<p>https://github.com/facebook/react/issues/2928</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A life of possibilities]]></title>
    <link href="http://machty.github.com/blog/2015/01/07/a-life-of-possibilities/"/>
    <updated>2015-01-07T14:07:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/07/a-life-of-possibilities</id>
    <content type="html"><![CDATA[<h2>More actions shit</h2>

<p>Scenario: mobile app, I have a back button, I don&#8217;t want it to cause
another transition if the app is in mid-transition.</p>

<p>Mid-transition means:</p>

<ul>
<li>data has already started loading for a target route, or</li>
<li>some animation is underway, e.g. liquid fire</li>
</ul>


<p>Present day Ember:</p>

<ul>
<li><code>willTransition</code> hook to check some &#8220;isTransitioning&#8221; state (which you
have to remember to properly set and unset (though ember could/should
probably provide this for you))</li>
<li>some other router reopen hook, override transitionTo behavior. Pretty
crappy.</li>
</ul>


<p>React w react-router:</p>

<pre><code>Router.run(routes, function (Handler) {
  // custom data-loading logic, construct your own chain of promises
  // ...
  // maybe use flatMapLatest so that you're only responding to the
  // most recent transition, and then eventually:
  // React.render(&lt;Handler/&gt;, document.body);

  // this could be modeled by a stream 
});
</code></pre>

<p>Hmm so I want to be able to push values into a stream (let&#8217;s call it raw
stream), but have it only come out the other side if some other&#8230;
stream? predicate? allows it.</p>

<h2>Rx/Bacon Diagrams</h2>

<ul>
<li>Bacon: <code>flatMapConcat</code> (or <code>flatMapWithConcurrencyLimit(1)</code>)</li>
<li>Rx: <code>concatAll</code></li>
</ul>


<p>Flatten, preserve order of previously started streams (buffers later streams)</p>

<pre><code>...{1}
......{2........3}
.........{}
............{4}
{...1..2........3.4}
</code></pre>

<ul>
<li>Bacon: <code>flatMap</code> (or <code>flatMapWithConcurrencyLimit(infinity)</code>)</li>
<li>Rx: <code>mergeAll</code></li>
</ul>


<p>Flatten, don&#8217;t preserve order (no buffering). (limiting concurrency
means buffering).</p>

<pre><code>...{1}
......{2........3}
.........{}
............{4}

produces
{...1..2.....4..3}
</code></pre>

<ul>
<li>Bacon: <code>flatMapLatest</code></li>
<li>Rx: <code>switchLatest</code></li>
</ul>


<p>Flatten, unsubscribe from previous streams, RIGHT when the new stream
begins, not on its first value!</p>

<pre><code>...{1}
......{2........3}
............{4}

produces
{...1..2.....4}
</code></pre>

<p>and</p>

<pre><code>...{1}
......{2........3}
............{.........4}

produces
{...1..2.....4}
</code></pre>

<h2>CircleCI uses ClojureScript/Om</h2>

<p>http://blog.circleci.com/local-state-global-concerns/</p>

<h2>MRR</h2>

<p>Monthly recurring revenue: a way to calculate monthly revenue based off
of multiple dissimilar subscription terms.</p>

<h2>Observable of 1 is a promise</h2>

<p>http://www.infoq.com/presentations/async-programming-netflix</p>

<p>Promises can&#8217;t be cancelled.</p>

<ul>
<li>Work is already being done (in flight)</li>
<li>No way to stop it</li>
</ul>


<p>Observables are lazy. You can build a giant nested logical chunk of
observable but nothing happens until, say, a <code>forEach</code> subscribes to the
result of an observable that all the internal logic kicks into place.
Not true for promises (unless someone implements a lazy thennable).</p>

<p>TODO: hot vs cold observables distinction? does this exist in bacon?</p>

<p>This is how the <code>retry</code> operator works&#8230; in the same way you can call
<code>forEach</code> N times on an observable and kick start all the internal
logic/event handlers, retry will internally do this until it gets a
non-error response.</p>

<p>This is unless promises, which have the <code>.then</code> operator:</p>

<ul>
<li>Regardless of whether you call <code>.then</code>, the promise logic has already started</li>
<li>Calling <code>.then</code> at the same time just subscribes to the single,
already running promise, and <code>.then</code> on an already resolved promise
just returns that.</li>
</ul>


<!--more-->


<h2>phone it in</h2>

<p>http://www.urbandictionary.com/define.php?term=phone+it+in</p>

<blockquote><p>Perform an act in a perfunctory, uncommitted fashion, as if it didn&#8217;t matter.</p>

<p>She sang the National Anthem, but she was just phoning it in as far as I could tell.</p></blockquote>

<h2>ENZ in Trojan ENZ</h2>

<p>https://answers.yahoo.com/question/index?qid=20070211111727AAnr6Kn</p>

<p>It refers to the reservoir tip at the end (ENZ = ends) to prevent fluids
from leaking from rubbing.</p>

<h2>Clojure: &#8220;classes&#8221; not coupled to namespace</h2>

<p>In Clojure, given you have, say, a Person record, you can extend Person
to two different protocols that have the same method name (so long as
those protocols are in two different namespaces. This is a nice because
in, say, Java, you might be implementing methods from N different
interfaces, yet (possibly unnecessarily) sharing the same private data
and other items on the same namespace.</p>

<h2>defrecord</h2>

<pre><code>(ns alex/wat)

(defprotocol ALEX (lol [a]))

(defrecord AlexThing [a b c]
  ALEX
  (lol [a] (println a)))
</code></pre>

<p>err clearly i&#8217;m doing something wrong&#8230; this is null pointer
exceptioning.</p>

<h2>can&#8217;t use recur and get polymorphism</h2>

<p>Unlikely to bite, but worth pointing out that whatever you pass as the
first arg to <code>recur</code> won&#8217;t dynamically dispatch, because <code>recur</code> is
really just a looping construct. I can&#8217;t see how this would actually
matter though? Maybe I don&#8217;t get it.</p>

<h2>ISeq, IPersistentStack</h2>

<p><code>I</code> stands for interface.</p>

<h2>Dynamic Dispatch</h2>

<p>Dynamic dispatch is the selection of which method to run in a
polymorphic setting. Which implementation of <code>foo</code> should run here?</p>

<pre><code>(foo thing)
</code></pre>

<p>From what I understand, Clojure will look for protocols that specify
<code>foo</code> and check if <code>thing</code> is part of that. If a protocol is found but
<code>thing</code> doesn&#8217;t implement it, then boom, but Clojure will also try and
find a multi-method. (TODO: figure out the order of resolution?)</p>

<p>Multimethods can be simple and dispatch on the type of some map
property, or it can run a more complicated functions to determine which
to run. I believe the difference between this and switch-on-type
inheritance is blah blah blah write this later.</p>

<h2>famo.us</h2>

<p>http://famo.us/university/</p>

<p>Baby&#8217;s first famous.</p>

<p>TODO: Engines, Contexts, and Surfaces.</p>

<p>Surfaces</p>

<ul>
<li>Seems to pos abs, 100% width and height by default; size actually
inherits from parent surface/context.</li>
</ul>


<p>State Modifiers</p>

<ul>
<li>seem to just wrap transform matrices</li>
</ul>


<p>http://devchat.tv/js-jabber/128-jsj-famo-us-with-steve-newcomb</p>

<ul>
<li>Rendering in the browser is faster than rendering in the browser

<ul>
<li>Multiplying matrices is CPU-bound</li>
<li>Browsers were meant to lay out text docs w links, etc., that&#8217;s
highly optimized</li>
<li>Layout engine optimized for matrix-based layouts; famo.us layout
engine &#8220;14x&#8221; faster than using CSS-based browser matrices. Why?
Because lots of browser layout stuff <em>isn&#8217;t</em> GPU stuff, but rather
the static text layout stuff that <em>is</em> highly optimized.</li>
</ul>
</li>
<li>Create the scene in JS

<ul>
<li>Post to DOM

<ul>
<li>used for context, text/titles</li>
</ul>
</li>
<li>Post to SVG</li>
<li>Post to WebGL

<ul>
<li>high end graphics</li>
</ul>
</li>
</ul>
</li>
<li>e.g. write in famo.us, use their render tree, render to each thing</li>
<li>vs ionic

<ul>
<li>ionic still relies on DOM</li>
<li>famo.us puts way more into JavaScript, render tree / physics engine
all lives in JS.</li>
<li>future-feasible to run ionic templates in famo.us</li>
</ul>
</li>
<li>rendering in famo.us

<ul>
<li>render the RenderTree</li>
<li>based on that, produce flattest dom possible

<ul>
<li>important to minimize DOM and manage it wisely, else reflow, frame
rate volatility</li>
</ul>
</li>
</ul>
</li>
<li>Physics Engines

<ul>
<li>Unreal / iOS</li>
<li>Native-feeling animations; prevent the feeling of html5</li>
</ul>
</li>
<li><p>Docker</p>

<ul>
<li>docker containers</li>
<li>containing a system, making it highly portable</li>
<li>famous wants a front-end container, e.g. write a carousel container,
implementations might swap as time goes on, fetching all the
libraries to present it happens automatically, etc.</li>
</ul>
</li>
<li><p>align</p>

<ul>
<li>sets anchor point on the element (defaults to upper left corner)</li>
</ul>
</li>
<li>origin

<ul>
<li>sets default 0,0 point that children will be inserted into.</li>
</ul>
</li>
</ul>


<h2>wtf is a graphics context</h2>

<p>Wtf is context is general. Is it unavoidable that this word be used all
the time?</p>

<p>https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_overview/dq_overview.html#//apple_ref/doc/uid/TP30001066-CH202-TPXREF131</p>

<p>It comes up in so many graphicsy shit. It kinda just means &#8220;where all
state is stored&#8221;.</p>

<p>You have an Engine, where all the API logic (and maybe hardware
interfacing logic) lives, and you have to feed it different contexts to
operate on.</p>

<p>Both Quartz and famo.us describe the context as a &#8220;drawing destination&#8221;;
in Quartz you could apply the same butterfly-drawing routines to both a
page that you want to print on, or a bitmap graphics context, or a
window context (obtained by your application from the window server).</p>

<h2>Opqaue Data Type</h2>

<p>A data type whose interface is incompletely specified, and only
internal, private fns/methods have access to its internals. e.g. the
Quartz 2D graphics context is an opaque data type; you don&#8217;t/can&#8217;t care
what its internals are but you know you have to supply it to all API
calls (or like OpenGL you might be able to swap out the current graphics
context).</p>

<p>Usually the context includes the canvas that you&#8217;re drawing to, current
fill color, depth of field settings, etc.</p>

<h2>Rx Marbles</h2>

<p>http://rxmarbles.com/</p>

<ul>
<li>sample: Use one stream to control the sample rate of another.</li>
<li>startWith: create a new stream that immediately emits a value</li>
<li>distinct: remember past values, prevent refires</li>
<li>distinctUntilChanged: pretty much just &#8220;uniq&#8221;? prevent duplicate
values in a row</li>
<li>findIndex: return the index of the stream</li>
<li>pausable: zip two stream, true/false values of one starts/stops the
flow of the other: HINT HINT HINT can totally use this for pausing
streams during animations / route transitions / any async shit!</li>
<li>pausableBuffered: remember/buffer the paused items, fire them once
&#8220;true&#8221; comes in!!!!!!!</li>
<li>skip/take: skips or takes the first N elements</li>
<li>skipLast/takeLast: skips or takes the last N elements of the stream;
is smart enough to start emitting values if the buffered size exceeds
N, rather than naively waiting for the stream to run to completeion</li>
<li>skipUntil: ignore shits until the thing comes in.</li>
</ul>


<h2>Reactive MVC</h2>

<p>http://futurice.com/blog/reactive-mvc-and-the-virtual-dom</p>

<ul>
<li>React inspired by reactive programming, ended up mix of interactive
and reactive patterns: TODO what is interactive?</li>
<li>If a change in <code>foo</code> affects <code>bar</code>, and <code>foo</code> is responsible for
telling <code>bar</code>, it&#8217;s interactive; reactive would be <code>bar</code> just
magically responding&#8230;</li>
<li>Interactive: &#8220;module X defines which others modules X affects&#8221;</li>
<li>Reactive: &#8220;module X defines which other modules affects X&#8221;

<ul>
<li>often implemented w EventEmitter (see below)</li>
</ul>
</li>
<li>Controllers are inherently interactive, so get rid of em</li>
<li>Models should export Observables, views should subscribe to model
events.</li>
<li>Fill the gap of controller:</li>
</ul>


<h2>EventEmitter</h2>

<pre><code>#!/usr/bin/env node

var EventEmitter = require('events').EventEmitter;

var ee = new EventEmitter();

ee.on('wattles', function(foo) {
  console.log("received some serious wattles", foo);
});

console.log("numlisteners:", ee.listeners('wattles').length)

setTimeout(function() {
  ee.emit('wattles', 123);
}, 2000);
</code></pre>

<h2>Kefir.js</h2>

<p>http://pozadi.github.io/kefir/</p>

<p>FRP JS lib based on Bacon and Rx but focused on high perf, low mem
usage.</p>

<p>Like Bacon, it distinguishes b/w Properties and EventStreams.</p>

<h2>Cycle.js</h2>

<p>https://github.com/staltz/cycle</p>

<p>This framework is based on the seminal blog
http://futurice.com/blog/reactive-mvc-and-the-virtual-dom</p>

<p>and these slides http://staltz.com/dont-react</p>

<h2>Ideas</h2>

<p>I believe Cycle.js has no concept of a component. The idea that even a
little business / stateful logic lives in the component riles that guy&#8217;s
feathers, but components are crucial for simplifying the mental model
and easily packaging / reusing things. Seems that nuts hasn&#8217;t been
cracked in Cycle.js yet.</p>

<p>UPDATE: components are custom elements in cycle.js
https://github.com/staltz/cycle/blob/master/src/custom-elements.js</p>

<p>(There&#8217;s also unanswered questions about minimizing use of globals,
dependency injection, etc.)</p>

<p>It also seems pretty bad that there&#8217;s lots of examples of reaching in
and grabbing the <code>data-wat-id</code> out of the event target.</p>

<p>So it still seems pretty good that the job of a component is to
translate DOM events into component domain events. A DayCellComponent
in a calendar should translate click/tap events&#8230;</p>

<h2>Taps/Clicks, who&#8217;s responsible?</h2>

<p>Is it up to a component to discern b/w a tap and a click? Some other way
of using input stream?</p>

<p>In Ember we could do something like override &#8220; to mean
different things in different contexts, tap vs click (which I use).</p>

<p>It&#8217;s pretty nice being able to do that; I guess in React you&#8217;d use
<code>withContext</code>?</p>

<p>This seems like a nice hookable thing for event delegation&#8230; oh wait it
already is in ember.</p>

<p>Maybe &#8220; should declare an input stream that you can hook into
n the component?</p>

<p>HERE IS a very concrete question I&#8217;d like to resolve:</p>

<p>Given:</p>

<ul>
<li>You have a list of items</li>
<li>Selecting an item expands an item</li>
<li>Only one item can be expanded at a time</li>
<li>In a desktop setting, &#8220;selections&#8221; happen via clicks, in a mobile
setting, &#8220;selections&#8221; happen via taps</li>
</ul>


<p>You&#8217;ll probably model this with:</p>

<ul>
<li>a ListComponent</li>
<li>ItemComponents</li>
</ul>


<p>My beef (and TODO list):</p>

<ul>
<li>Does it make sense for <code>ItemComponent</code>s to attach their own event
listeners?

<ul>
<li>What if they just got a stream of input? That means something
outside could:

<ul>
<li>decide whether taps or clicks were to be used for selection,
and child components would just receive a selectionEventStream
that they could respond to

<ul>
<li>Hmmm, but given the constraint</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Note that iOS let&#8217;s you suspend/resume touch interactions in general:
http://iosdevelopertips.com/event-handling/suspend-touch-events.html
But I think we want something more granular.</p>

<p>There seems to be a tug of war between re-render everything and
streamify everything. E.g. you diff the data and get per item stream
updates of isExpanded streams&#8230; so that you can re-render only those
items&#8230;? What&#8217;s the goal of this?</p>

<p>If you have virtual dom and re-render all the time, then when you do
want streams?</p>

<ul>
<li>Business logic, series of queries, async, and updating properties
along the way. Maybe UI isn&#8217;t much of a place for streams?
Unless I can show that there is UI not elegantly handled by virtual
DOM, I should drop trying to force streams into UI somehow&#8230;</li>
<li>It still seems like there&#8217;s a place for it though in app state in
general, particularly in actions management.

<ul>
<li>In particular, I never want to have to set some isLoading flag every
again. I should never have to check timerIds and cancel them ever
again. I should never have a bunch of transient properties every
again. Actions should jump start some process and you can listen to
their completion. Everything else: virtual dom (and virtual dom
can/should depend on these properties that you expose). Virtual DOM
state is explicit.</li>
</ul>
</li>
</ul>


<p>OK WE ARE GETTING CLOSE: handlebars/htmlbars templates have the benefit
of declaring loud and clear which properties are depended on for
rendering. If any of those properties change, it amounts to an implicit
setState. Otherwise there&#8217;s no need to re-render (this is all still
implying that KVO exists in Ember somehow).</p>

<pre><code>dismissStream = timer(2000).map(() =&gt; false)
newActionStreams = ... something that fires when a new event starts
// newActionStreams = filter(UIevents, () =&gt; actionIsUnderway???)
postActionMessageStream = race(dismissStream, newActionStreams)
</code></pre>

<p>OK OK OK so what I want is a way to express</p>

<ul>
<li>progression of time in a template</li>
<li>current values, certain flags, etc, without setting boolean properties</li>
</ul>


<p>Let&#8217;s say we have a stream of status on some complex multi-step async
process:</p>

<pre><code>observable = someUIEvent.flatMapLatest(some ajax with retries)
                        .followedBySomeOtherAsync
                        .followedBySomeOtherThing

// maybe...
observable = someUIEvent(someAjaxThing).flatMapLatest(some ajax with retries).state("stepOne")
                        .followedBySomeOtherAsync.state("stepTwo")
                        .followedBySomeOtherThing.state("stepThree")
</code></pre>

<p>There&#8217;s not really a nice mechanism for representing this in a
template without a lot of manual <code>.set</code>s. It&#8217;s like we want some kind of
switch statement?</p>

<pre><code>    &lt;h3&gt;Loading  items from server&lt;/h3&gt;

    &lt;p&gt;
      Here are all the step one things.
    &lt;/p&gt;

    &lt;h3&gt;Please select from the following options:&lt;/h3&gt;

    &lt;ul&gt;

        &lt;li &gt;&lt;/li&gt;

    &lt;/ul&gt;
</code></pre>

<p>Does this make sense? Maybe we just want / need a switch statement in
general. This would also have to work with LiquidFire as well&#8230;</p>

<p>But what the above demonstates is:</p>

<ul>
<li>scoped properties linked to progressive states within an
observable/promises</li>
<li>no global/manual flag management</li>
<li>no timer ids to set and reset</li>
</ul>


<p>TODO:</p>

<ul>
<li>Just have to find the sweet spot with plugging this stuff into ember
in a way people prefer.</li>
<li>How to you go back to a previous &#8220;state&#8221;? What is a &#8220;state&#8221;? How do
people normally model state machines in rx?</li>
</ul>


<p>https://github.com/logicalguess/rx-state-machine</p>

<h2>The silk road</h2>

<p>http://www.wired.com/2015/01/why-silk-road-trial-matters/</p>

<ul>
<li>Ross Ulbricht

<ul>
<li>aka Dread Pirate Roberts</li>
<li>accused of running silk road</li>
<li>accused of hiring hitmen for 2-6 killings, none which were carried out</li>
<li>defended by attorney Joshua Dratel, financed by a bitcoin mogul</li>
</ul>
</li>
<li>Silk Road

<ul>
<li>anonymized by bitcoin and Tor</li>
<li>copycat markets: Evolution and Agora</li>
</ul>
</li>
<li>Trial

<ul>
<li>Will highlight/expose vulnerabilities for other sites to learn from</li>
<li>Will highlight/set precedent of whether screenshots are admissible
for evidence</li>
</ul>
</li>
<li>Fourth amendment:

<ul>
<li>The Fourth Amendment (Amendment IV) to the United States Constitution is the part of the Bill of Rights that prohibits unreasonable searches and seizures and requires any warrant to be judicially sanctioned and supported by probable cause.</li>
<li>Warrantless searches apply</li>
<li>FBI pretty much admitted to hacking the site without warrant to
obtain IP, find dread pirate</li>
<li>FBI investigators likely to be questions, 4th amendment repeated again</li>
</ul>
</li>
<li>Linked in profile: https://www.linkedin.com/in/rossulbricht</li>
<li>Breaking Bad

<ul>
<li>Ulbricht first sold shrooms on silk road, then</li>
<li>expansion into anarchist community / drug market</li>
<li>hiring hitmen?</li>
</ul>
</li>
</ul>


<h2>React keys vs refs</h2>

<p>Clojure has a concept of refs (and similar concurrency primitives) to
add the concept of identity to a value that changes over time (given
that Clojure has immutable data types but still needs to synchronize
and share data b/w threads).</p>

<p>In React, you use keys to distinguish array values so that your
renders don&#8217;t do weird things; how would this work given immutable
datatypes?</p>

<ul>
<li>Well, if only the array changes but the items in that array are the
same, then you&#8217;re fine</li>
<li>But if, say, the selected item has modified, then the previous
reference is invalid/points to an older version of the thing</li>
</ul>


<p>Maybe there&#8217;s a sexy way we could handle this in ember&#8230; maintain a ref
to a changing value.</p>

<h2>Observables and Observables</h2>

<ul>
<li>Observable

<ul>
<li>changing values over time</li>
</ul>
</li>
<li>Observer

<ul>
<li>consumes observers</li>
</ul>
</li>
</ul>


<p>Observables don&#8217;t do anything on their own until they&#8217;re consumed in
some way. SO WEIRD. But the following doesn&#8217;t do anything&#8230;</p>

<pre><code>var obs = Rx.Observable.return('wat').do(function(a) {
    console.log("do", a);
});
</code></pre>

<p>until you add</p>

<pre><code>function K() {}
obs.forEach(K);
obs.forEach(K);
</code></pre>

<p>So what I&#8217;d like is a statemachine with its own stream events, w auto
desubscribe/dispose/etc</p>

<pre><code>var defaultState = {
};

var defaultState = {
};

var states = {
  defaultState: {
  },

  editingItem: function() {
    // TODO: define streams/actions for leaving this state
    // tapping another item leaves it....
  },

  savingItem: {
  }
};
</code></pre>

<h2>Bacon state machine</h2>

<p>http://jsbin.com/qihabo/2/edit?html,js,console,output</p>

<pre><code>Bacon.fromArray([1,2,3]).withStateMachine(0, function(sum, e) {
   if (e.hasValue()) {
       return [sum + e.value(), []];
   } else if (e.isEnd()) {
       return [sum, [new Bacon.Next(function() { return sum; }), e]];
   } else {
       alert("asd")
       return [sum, []];
   }
}).log();
</code></pre>

<p>TL;DR it&#8217;s a state machine only for computing the next value of stream,
it&#8217;s not some implementation of a state machine or anything like that.</p>

<p>Could be useful in the rare cases where you can&#8217;t represent what you
want in the form of other stream operators.</p>

<h2>Sequences of Coincidence</h2>

<p>http://www.introtorx.com/Content/v1.0.10621.0/17_SequencesOfCoincidence.html#SequencesOfCoincidence</p>

<p>I think this is what I&#8217;ve been looking for; handling actions differently
if they occur within the &#8220;window&#8221; of another event, e.g. &#8220;handle these
actions if they happen while a given route is active (and the router is
stable / not loading transitions)&#8221;.</p>

<p>Buffers are conceptually grouped with window operators:</p>

<p>It converts a stream of values into a stream of buffered arrays of
values, buffered according to time, or some buffer size, or whatever.
In other words buffer takes <code>IObservable&lt;T&gt;</code> and returns
<code>IObservable&lt;IList&lt;T&gt;&gt;</code>.</p>

<pre><code>source|-0-1-2-3-4-5-6-7-8-9|
result|-----0-----3-----6-9|
            1     4     7
            2     5     8
</code></pre>

<p>The analogy is that a window is open when Buffer receives first value,
and window closes when buffer&#8217;s full or time elapses.
Windows return <code>IObservable&lt;IObservable&lt;T&gt;&gt;</code></p>

<p>So the subscribe handler of a window passes you the observable, rather
than the already flattened List that Buffer would give to you.</p>

<p>So in rxjs: http://jsbin.com/colora/3/edit</p>

<pre><code>var source = Rx.Observable.timer(0, 50)
  .window(function () { return Rx.Observable.timer(125); })
  .take(4)
  .flatMap(function (x) { return x.toArray(); });

var subscription = source.subscribe(
  function (x) {
    console.log('Next: ' + x);
  },
  function (err) {
    console.log('Error: ' + err);
  },
  function () {
    console.log('Completed');
  });
</code></pre>

<p>produces</p>

<pre><code>"Next: 0,1,2"
"Next: 3,4,5"
"Next: 6,7"
"Next: 8,9,10"
</code></pre>

<p>Why 6,7? Because the initial timer w 50ms period never stops firing:</p>

<pre><code>starting timer: 0----50---100--150--200--250--300--350--400--450--500--550--600--650
close timer:    0-----------125----------250---------375----------500
window1:        0    1     2 |
window2:                        3    4   5|
window3:                                       6   7  |
window4:                                                 8   9  10|
</code></pre>

<p>The 50ms period never stops firing and it&#8217;s on the third iteration where
because of the relative late start of the next period timer firing after
the beginning of the 125ms close interval, it can only get 2 events in
before the stream closes.</p>

<p>SO WTF do I want to do with this: something about windows for
currently active route states? Does that make sense?</p>

<p>There&#8217;s apparently a version that lets you overlap windows&#8230; why would
this be useful? I don&#8217;t know! And it doesn&#8217;t seem like it&#8217;s implemented
in RxJS, but the idea is you provide an observable that fires when a
window should be opened, and a close observer that runs for each new
window, so if your close fires at a larger interval than opens happen,
then you&#8217;ll have overlapping streams, which I guess means, say, a &#8220;3&#8221; or
&#8220;4&#8221; might be fired on multiple streams sprung up.</p>

<h2>RxJs Joins</h2>

<p>Note that all of this is part of the <code>coincidence</code> lib of Rx.</p>

<p>Join operator joins too sequence; zip is kind of a join, but zip is based
on index, and join does sequences.</p>

<p>zip accepts</p>

<ul>
<li>a &#8220;left&#8221; observable: each value produced opens another window</li>
<li>a &#8220;right&#8221; observable: produces values that pair open with the values
of left, while left stream is still open.</li>
<li>a &#8220;left duration&#8221; fn: returns an observable whose first value or
closing will close the left-generated observable (note: it doesn&#8217;t
even matter what type the closing value/observable is)</li>
</ul>


<p>So &#8220;right&#8221; values that start after &#8220;left&#8221; values will still be joined
with cached, previously opened windows. e.g.</p>

<pre><code>L 0-1-2-3-4-5-
</code></pre>

<p>plus</p>

<pre><code>R --A---B---C-
</code></pre>

<p>produces</p>

<pre><code>0, A
1, A
0, B
1, B
2, B
3, B
0, C
1, C
2, C
3, C
4, C
5, C
</code></pre>

<p>Interesting:</p>

<blockquote><p>Now it seems fairly obvious that, if I immediately closed the window by returning Observable.Empty<Unit>, or perhaps Observable.Return(0), windows would never be opened thus no pairs would ever get produced. However, what could I do to make sure that these windows did not overlap- so that, once a second value was produced I would no longer see the first value? Well, if we returned the left sequence from the leftDurationSelector, that could do the trick. But wait, when we return the sequence left from the leftDurationSelector, it would try to create another subscription and that may introduce side effects. The quick answer to that is to Publish and RefCount the left sequence. If we do that, the results look more like this.</p></blockquote>

<p>In Rx the default is to always create a new subscription; it&#8217;s NOT like
a promise whereby a singleton promise has already started firing.
Solution: use Publish.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/publish.md</p>

<p>Publish allows for the sharing of subscriptions.</p>

<p>So my question is&#8230; does publishing on its own start its own
subscription? Naw, I think you need to call <code>connect</code> once you&#8217;ve added
all your subscribers.</p>

<p>http://jsbin.com/colora/6/edit</p>

<pre><code>var obs = Rx.Observable.return('wat').do(function(a) {
  console.log("do", a);
});

var p = obs.publish();

function K() {}
p.forEach(K);
p.forEach(K);gma


// uncomment this to actually fire side effects
//p.connect();
</code></pre>

<p>refCount is hard to describe&#8230;</p>

<p>http://stackoverflow.com/questions/7509503/how-can-i-create-an-rx-observable-which-stops-publishing-events-when-the-last-ob/7510245#7510245</p>

<p>Publish as in pub sub&#8230; you want to stop consuming resources once
everyone&#8217;s stopped subscribing?</p>

<p>http://www.zerobugbuild.com/?p=144</p>

<p>Publish creates a hot subscription, refCount makes it close when
subscribers are zero.</p>

<p>If you don&#8217;t do <code>refCount</code>, you have to do <code>connect</code>. If you don&#8217;t do
<code>connect</code> or <code>refCount</code>, I think the subscription never gets activated,
or something? I still don&#8217;t get it&#8230;</p>

<p>Anyway, back to join:</p>

<blockquote><p>The quick answer to that is to Publish and RefCount the left sequence. If we do that, the results look more like this:</p></blockquote>

<pre><code>left  |-0-1-2-3-4-5|
right |---A---B---C|
result|---1---3---5
          A   B   C
</code></pre>

<p>TL;DR once you start using right duration selector, you can implement
other operators.</p>

<p>TODO: watch
http://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-MinLINQ-The-Essence-of-LINQ</p>

<h2>console.log printf</h2>

<p>Saw this in Rx docs: https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/timer.md</p>

<pre><code>console.log("wat %s", 3);
</code></pre>

<p>Prints &#8220;wat 3&#8221; (but jsbin&#8217;s console.log override is not smart enough to
substitute).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everything and nothin]]></title>
    <link href="http://machty.github.com/blog/2015/01/04/everything-and-nothin/"/>
    <updated>2015-01-04T22:26:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/04/everything-and-nothin</id>
    <content type="html"><![CDATA[<h2>Indemnity</h2>

<p>http://en.wikipedia.org/wiki/Indemnity</p>

<p>Where indemnitor A pays B a sum of money to cover losses suffered by B
(regardless of whether A caused/was responsible for the loss).
Car insurance is an example. Life insurance is not, since the payout is
not based on any &#8220;valuation&#8221; of the life..</p>

<p>HMOs basically get involved with health care options to try and secure
efficient/cheap means of good healthcare, rather than traditional
indemnity insurance, which would, uhh, just pay out after the fact and
not get involved beforehand?</p>

<h2>HMO act of 1973</h2>

<p>http://en.wikipedia.org/wiki/Health_Maintenance_Organization_Act_of_1973</p>

<ul>
<li>signed by nixon</li>
<li>intended to curb medical inflation</li>
<li>provided grants/loans to start an HMO, removed certain state
restrictions for federally qualified HMOs</li>
<li>required employers w 25+ employees to offer federally certified HMO
options <em>if</em> the employer was already offering traditional insurance</li>
<li>did NOT require employers to offer health insurance</li>
<li>established/solidied the term HMO</li>
</ul>


<h2>Humble Bundle</h2>

<p>http://en.wikipedia.org/wiki/Humble_Bundle</p>

<p>Series of collections (bundles) of digital thingers, often games,
distributed via pay-what-you-want. The more you pay, the more that&#8217;s
opened up. Configurable, but most pay goes to developers, some to
charity, some to Humble.</p>

<h2>What is JLD in Empire Blue?</h2>

<p>JLD is a network code representing the Pathway Enhanced network of
doctors, pharmaceuticals, etc.</p>

<p>The ID number on the card is network + member ID.</p>

<p>1-866-755-2680 Tech support for the website.</p>

<p>Even though they don&#8217;t put it on the card this year, my co-pay is $30,
which I always pay. After I blast through deductible, co-insurance kicks
in. But preventative visits to PCP are freeeeee. But if it&#8217;s not
preventative, the doctor will submit it to insurance as a different
code, which I have to pay for out of deductible. Otherwise shit is
freeeee.</p>

<p>What&#8217;s the difference between Empire and Anthem?</p>

<p>There&#8217;s Empire BlueCross BlueShield and Anthem BlueCross BlueShield?</p>

<p>OK OK OK BlueCross BlueShield is a federation (bigass organization where
smaller groups have decent autonomy). Was originally Blue Cross in 1929,
and a separate Blue Shield in 1948, and they merged in 1982.</p>

<p>Anthem is their only publicly traded company, and within New York they
operate as &#8220;Empire&#8221; BlueCross. Jesus Christ these companies are too
fucking huge.</p>

<ul>
<li>Blue Cross Blue Shield

<ul>
<li>Anthem (publicly traded)

<ul>
<li>Empire Blue Cross Blue Shield (operates out of New York)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Difference b/w renter&#8217;s and home owner&#8217;s insurance</h2>

<p>http://coverhound.com/insurance-learning-center/homeowners-vs-renters-insurance-a-big-difference</p>

<ul>
<li>Renters

<ul>
<li>You insure belongings, not the building</li>
</ul>
</li>
<li>Homeowners

<ul>
<li>You insure the building, and the belongings

<ul>
<li>Hence it&#8217;s way more expensive</li>
</ul>
</li>
<li>Insurance is often mandatory if you have a mortgage, but probably
not legally required if you straight up own the whole thing.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniFocus et al]]></title>
    <link href="http://machty.github.com/blog/2015/01/02/omnifocus-et-al/"/>
    <updated>2015-01-02T16:27:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/02/omnifocus-et-al</id>
    <content type="html"><![CDATA[<h2>OmniFocus</h2>

<ul>
<li>Quick action add: ctrl+option+space</li>
<li>Send to inbox: Ctrl+F6

<ul>
<li>Note this is a Service that some reason not all apps implement?
But it works in Chrome so I think we&#8217;re good</li>
</ul>
</li>
<li>Once you assign an inbox item to a project, it&#8217;s removed from the project</li>
<li>Someday maybe:

<ul>
<li>Put in single action project, mark project as on hold.</li>
</ul>
</li>
<li>So projects can have an On Hold status&#8230; but there&#8217;s also a waiting context?

<ul>
<li>Ah, both projects and contexts can choose what status they are&#8230;
from the same list of possible statuses.</li>
</ul>
</li>
<li>How does the repeat work? &#8220;1 week&#8221;? Why does it say multiple values?

<ul>
<li>Ah I should probably do this one at a time. The way it works is once
you complete, it&#8217;ll immediately schedule another one.</li>
</ul>
</li>
</ul>


<p>OmniFocus is implements GDT: <a href="http://gettingthingsdone.com/">Getting Things Done</a></p>

<h2>Elephants in Trees</h2>

<p>Why do you never see elephants hiding in trees?</p>

<p>Because they&#8217;re very good at it.</p>

<!--more-->


<h2>ASasidoasidj</h2>

<p>http://www.consumerreports.org/cro/2013/12/do-you-need-to-register-new-products-you-buy/index.htm</p>

<p>http://abcnews.go.com/Business/register-product-christmas/story?id=21348313</p>

<p>For software it probably makes more sense since they&#8217;ll have your name
on file to let you know of any major security updates / breaches and
what not, but often warranties don&#8217;t actually require registering a
product. It&#8217;s decently likely the company just wants to sell info to
marketers, making money off of you and subjecting you to spam.</p>

<h2>DirectInput vs XInput</h2>

<p>http://en.wikipedia.org/wiki/DirectInput#DirectInput_vs_XInput</p>

<p>Relevant because I just got a wireless gamepad that may or may not work
with Mac. Apparently Mac only supports DirectInput, but either way these
shits are Microsoft API for interacting with input, DirectInput being
the deprecated one, XInput being the new.</p>

<p>This is the most useless shit I could have blogged / reminded myself
about. Why do I do it?</p>

<h2>Pulmonology</h2>

<p>http://en.wikipedia.org/wiki/Pulmonology</p>

<p>Medical specialty dealing in the heart.</p>

<h2>Insurance, carriers, etc</h2>

<p>What&#8217;s a carrier? What&#8217;s the relationship b/w carrier and, e.g.
BlueCross BlueShield? What&#8217;s a PPO?</p>

<p>http://www.ehealthinsurance.com/health-plans/ppo/</p>

<p>http://www.ehealthinsurance.com/health-plans/hmo/;</p>

<p>HMO: Health Maintenance Organization: broad network of healthcare
services; broader range of preventative care than something else. You
choose a Primary Care Physician, and they must refer you to specialists.</p>

<p>Managed care: http://en.wikipedia.org/wiki/Managed_care</p>

<p>It&#8217;s a US-only term describing a bunch of techniques to keep health care
costs down; incentives for physicians and patients alike, preventative
care, etc. Spurred on by HMO act of 1973</p>

<p>https://nfb.org/images/nfb/publications/vodold/mngdcare.htm</p>

<p>Managed care:</p>

<ul>
<li>explicit standards for selecting providers</li>
<li>formal programs for ongoing quality review / improvement</li>
<li>preventative care, keeping enrollees healthy to reduce use of services</li>
<li>financial incentives for enrollees to use providers and procedures
covered by the plan.</li>
</ul>


<p>Managed care integrates financing and delivery of health care services.
It is implemented/used/referenced by:</p>

<ul>
<li>HMOs (Health Maintenance Organizations): provides wide range of services
for fixed, periodic payment (like monthly insurance payments)</li>
<li>PPOs (Preferred Provider Organizations): groups of hospitals,
physicians, etc., who contract with insurer, employer, 3rd party
admin, etc, to provide health care to all insured</li>
<li>POS plans (point of service): combo of HMO+PPO&#8230;?</li>
</ul>


<p>Features common to managed care:</p>

<ul>
<li>pre-authorization (let insurer know before you do some surgery, etc)</li>
<li>rigorous utilization review&#8230;?</li>
<li>emphasis on use of primary physicians (why? what does this offer?)</li>
</ul>


<p>OK I TAKE THIS ALL BACK this was a shitty little abstract to link to.</p>

<p>Indemnity:</p>

<ul>
<li>security or protection against a loss or other financial burden</li>
<li>security against or exception of legal responsibility of one&#8217;s actions</li>
<li>payment to victor of war as a condition for PEACE</li>
</ul>


<h2>Family Medicine</h2>

<p>http://en.wikipedia.org/wiki/Family_medicine</p>

<p>It means a physician for people of all ages.</p>

<h2>Quorum</h2>

<p>the minimum number of members of an assembly or society that must be present at
any of its meetings to make the proceedings of that meeting valid.</p>

<p>e.g. House of Cards quorum.</p>

<h2>Random fucking World MasterCard benefits</h2>

<ul>
<li>Auto rental collision damage waiver

<ul>
<li>Must use applicable card for entire rental transaction</li>
<li>Decline rental company&#8217;s collision waiver</li>
<li>&#8220;For most cards, the coverage is secondary, meaning that if you have car insurance, you have to file a claim there first (and your premium may go up). But your credit card should step in and pick up where your auto insurer leaves off, paying the tab for your deductible, towing charges and other fees. However, as many frustrated cardholders have learned, the fine print can be tricky. Credit card companies have their own restrictions and exclusions and they, too, often refuse to pay some types of fees levied by car rental companies.&#8221;</li>
<li>If you <em>don&#8217;t</em> have primary insurance, you can use CDW as primary so
long as you have a notarized report at time of incident that you had
no insurance. Why notarized? Not just because Chase is a dick but
because people might not want to report to their primary insurance
because their rates will go up.</li>
</ul>
</li>
</ul>


<p>What&#8217;s a declaration page?</p>

<p>It&#8217;s info from the car insurance company summarizing benefits, which car
they apply to, which drivers, address of driver, summary of coverage,
liability limits.</p>

<ul>
<li><p>Purchase protection</p>

<ul>
<li>Items purchased w card covered in case of theft, damage, accidental loss</li>
<li>Will replace/repair/reimburse up to $500 per claim, $50,000 per account</li>
<li>Secondary&#8230; if you have preexisting applicable insurance, that must come first</li>
<li>Not covered:

<ul>
<li>plants/animals, antiques, boats/cars/autos/motorized vehicles,
software, items purchased for resale, &#8220;mysteriously disappearing&#8221;
items (where no evidence of wrongful act), <em>items lost by common
carrier (like USPS)</em>, jewelry/watches stolen from non-carry-on
luggage, items lost from war/terrorism/rebellion/confiscation/earthquakes,
medical equipment, perishables/consumables/perfumes/cosmetics,
travelers checks/cash/tickets, <em>used/pre-owned items</em></li>
</ul>
</li>
<li>Needed for reimbursement:

<ul>
<li>claim form</li>
<li>copy of card receipt</li>
<li>copy of itemized store receipt</li>
<li>copy of police report (made within 48 hours of incident), or
whatever kind of report</li>
</ul>
</li>
<li>If you have personal/primary insurance:

<ul>
<li>You must use it (homeowner&#8217;s/renter&#8217;s/automabile), and the CC
company will cover any leftover deductible, or even the item
itself if you&#8217;ve exhausted the insurance.</li>
</ul>
</li>
</ul>
</li>
<li><p>Trip Cancellation/Interruption</p>

<ul>
<li>Trip cancellation is before the trip starts, interruption is during, derp</li>
</ul>
</li>
<li><p>Price Protection:</p>

<ul>
<li>e.g you buy something, and then a printed ad lists it for less, then
within 90 days of purchase you can make a claim and get reimbursed
the difference.</li>
<li>Pretty cool, too lazy to describe the fine print</li>
</ul>
</li>
<li><p>Lost luggage</p>

<ul>
<li>Applies to both checked or carry on</li>
</ul>
</li>
<li><p>Baggage delay</p>

<ul>
<li>if baggage delayed 6+ hours</li>
<li>You&#8217;re reimbursed for the emergency purchase of &#8220;essential items&#8221;</li>
<li>Up to $100 per day, max 3 days</li>
<li>Emergency items:

<ul>
<li>clothing, toiletries, charging cables</li>
</ul>
</li>
<li>Not covered:

<ul>
<li>contacts, hearing aids, artificial teeth, cash, checks,
securities, jewelry,</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>By a person or persons</h2>

<p>Legalese. I wanna use this is a sentence.</p>

<h2>iOS app manager view</h2>

<p>It has Recent contacts at the top, and swipe it right and you can see
Favorites! Why don&#8217;t I use this? If you tap it, it reveals option to
Call or Message. SO GOOD.</p>

<h2>What&#8217;s Rust named after?</h2>

<p>A RobUST fungus:</p>

<p>http://www.reddit.com/r/rust/comments/27jvdt/internet_archaeology_the_definitive_endall_source/</p>

<h2>Sky Ferreira and Charli XCX doin shit</h2>

<p>http://www.musictimes.com/articles/10302/20140916/sky-ferreira-reveals-charli-xcx-collaboration-will-sound-very-tatu.htm</p>

<p>t.A.T.u. is a Russian duo.</p>

<p>http://en.wikipedia.org/wiki/T.A.T.u.</p>

<p>Sky Ferreira, Charli XCX, and Grimes. They&#8217;re all buds.</p>

<h2>A skillet is a fucking frying pan</h2>

<p>And the difference between a fry(ing) pan/skillet and a saute pan is
that saute pans have 90 degree angle sides, where&#8217;s skillets are sloped.
Skillets aren&#8217;t designed to hold a lot of liquid and are optimized for
reaching in and flipping shit, like eggs and pancakes n stuff.</p>

<p>Some people think there <em>is</em> a difference b/w skillet and frying pan,
that pans are flimsy but skillets are thick.</p>

<h2>Colanders and Strainers</h2>

<p>Colanders are the often plastic bowls with holes for draining noodles
and rice. I can&#8217;t believe I didn&#8217;t know that. <code>say colander</code>. Colanders
usually stand up on their own; they have a <em>footed base</em>.</p>

<p>Strainers are generally wire mesh, have a handle, and are used for, say,
catching lemon seeds when squeezing a lemon.</p>

<h2>Sinecure</h2>

<p>a position requiring little or no work but giving the holder status or financial benefit.</p>

<p>Reference: http://consultingbyrpm.com/blog/2014/12/timid-guys-finish-last.html</p>

<p>Cushy sinecures. White guys getting cushy sinecures.</p>

<p>Sinecure : sine cura : &#8220;without care&#8221;</p>

<h2>Easy ass awesome spicy noodles</h2>

<p>http://www.budgetbytes.com/2012/08/spicy-noodles/</p>

<h2>JSCS</h2>

<p>JSHint is going to get rid of style rules, and just test things like
shadowing, hoisting, syntactical things.</p>

<p>Enter JSCS to fill in the style spot.</p>

<p>https://github.com/jscs-dev/node-jscs</p>

<h2>Instacart</h2>

<p>https://www.instacart.com</p>

<p>Seems pretty badass? I guess? Shop from multiple</p>

<h2>AWOL</h2>

<p>Absent Without Official Leave.</p>

<h2>kip</h2>

<p>British for &#8216;nap&#8217;.</p>

<h2>The spirit is willing</h2>

<p>but the flesh is weak, or spongey and bruised.</p>

<p>http://biblehub.com/matthew/26-41.htm</p>

<blockquote><p>&#8220;Watch and pray so that you will not fall into temptation. The spirit is willing, but the flesh is weak.&#8221;</p></blockquote>

<h2>MFA</h2>

<p>Museum of Fine Arts in Boston.</p>

<p>http://www.mfa.org/about</p>

<h2>My dumb thing</h2>

<p>12 seconds gold</p>

<p>6 second repetition, so use the gold one&#8217;s motor/governor.</p>

<h2>Bacon.js</h2>

<ul>
<li>EventStream: distinct events that happen over time</li>
<li>Property: value that changes over time</li>
</ul>


<p>TODO: Why have both?</p>

<ul>
<li>EventStreams have no initial value</li>
</ul>


<p><code>combine</code>: basically map two streams/properties into a Property (why not
event stream? what&#8217;s the EventStream equivalent?). You can pass a method
name as the second arg and it&#8217;ll be called on the&#8230; I don&#8217;t know. In
the case of <code>.scan</code> it&#8217;s the accumulator. What makes sense for combine?
Proably on the first arg, but that&#8217;s weird. NO it&#8217;s not, it gets called
on the current property of course. Let&#8217;s test this theory.</p>

<p>Actually no this makes no sense, they have an example</p>

<pre><code>var out = a.combine(b, ".concat")
</code></pre>

<p>It makes sense that it&#8217;d use the current value of the output property to
call <code>.concat</code> on, such as an array, but <code>.concat</code> mutates the
underlying array&#8230; is that ok? Seems fucky, seems like someone who got
a previous value from <code>out</code>, array, might have their array value
mutated. Let&#8217;s find out why this would not be the case&#8230;</p>

<p>Fuck it too lazy right now.</p>

<p>Convert promise to EventStream: <code>Bacon.fromPromise</code>.</p>

<p>So, flat map exists whenever you&#8217;d like to map to some asynchronous
value where order can&#8217;t be preserved&#8230; so for instance if you had a
serialize of values and you wanted to map them to some other value that
could be determined synchronously, you&#8217;d just map, but if you can&#8217;t
return something synchronously, each &#8220;map&#8221; should essentially return a
new stream, case in point: AJAX-based auto-completes. You translate text
field updates into ajax queries, each of which have their own unique
async.</p>

<pre><code>textUpdate -&gt; map -&gt; map -&gt; mapToAjax
                                -&gt; ajax promise
                                -&gt; ajax promise
                                -&gt; ajax promise
</code></pre>

<p>Need to reconcile these back into a single stream.</p>

<p>The pattern is expand into async via ajax and coalesce back into values
with flatMap.</p>

<ul>
<li><code>flatMap</code>: does NOT preserve ordering</li>
<li><code>flatMapLatest</code>: discards/forgets previous values if new ones come
back first</li>
</ul>


<p>Question: is there a flatMap that preserves order without discarding?</p>

<p><code>fromBinder</code>: create your own custom stream. The callback accepts a
<code>sink</code> function which is how you emit events.</p>

<p>What does <code>sink</code> mean? I guess it means a consumer of a stream? Why the
stream sinks into.</p>

<p><code>interval</code> vs <code>fromPoll</code>:</p>

<ul>
<li><code>interval</code> returns a stream that emits an optional value that you pass
to it.</li>
<li><p><code>fromPoll</code> has no concept of a value, it just runs your callback</p>

<p>  var stream = Bacon.fromBinder(function(sink) {</p>

<pre><code>sink([new Bacon.Next("2nd"), new Bacon.Next("3rd")])
sink(["4th", "5th"])
sink(["6th", new Bacon.Next("7th")])
sink([new Bacon.Next("8th"), "9th"])
return function() {
   // unsub functionality here, this one's a no-op
}
</code></pre>

<p>  })
  stream.log()</p></li>
</ul>


<p>Output:</p>

<pre><code>2nd
3rd
["4th", "5th"]
6th
7th
[b, "9th"]
</code></pre>

<p>You can use <code>Bacon.Next</code> to convert an array into sequentially emitted
values, rather than the value emitted being an array. It&#8217;s like a
flatten decided by the emitter?</p>

<p>Bus: https://github.com/baconjs/bacon.js#bus</p>

<p>A Bus an an EventStream that you can push values into.
I think: <code>promise:defer::eventStream:bus</code>, except that Deferreds
don&#8217;t have the promise&#8217;s <code>.then</code> api whereas a Bus <em>is</em> an event stream
with the same event stream API, plus a <code>.push</code> method.</p>

<p>Properties have optional starting values.</p>

<p>If provided, <code>onValue</code> emits a value immediately, else it only updates
on the first thing.</p>

<ul>
<li><code>EventStream.toProperty()</code>: convert to property</li>
<li><code>Property.change()</code>: convert to event stream</li>
</ul>


<p><code>Bacon.update</code>: create Property from initial value, update value based
on multiple inputs.</p>

<p>INTERESTING. This is kinda what we&#8217;ve been talking about in Emberland.
EXCEPT that <code>Bacon.update</code> doesn&#8217;t expose the means of updating the
property, it just encapsulates all updates into a single property, and
you need to provide the write-able buses via some other mechanism.</p>

<p>I <em>think</em> Property and EventStreams are both Observables. c/d?</p>

<h2>Synchronizing streams, Bacon.when</h2>

<p>You&#8217;d like to zip together streams into a single stream, but when do you
fire an event? When both have since fired? When only one? <code>Bacon.when</code>
to the rescue to disambiguate and let you decide!</p>

<pre><code>Bacon.when(seed
</code></pre>

<h2>Braindumpin</h2>

<p>http://baconjs.github.io/tutorials.html#content/tutorials/4_Building_Applications_Out_Of_Bacon</p>

<p>Goal: understand Ember action bubbling vs Flux dispatcher pattern among
other things, grand unifying FRP theory.</p>

<p>Mutable state is an oxymoron, it&#8217;s hard to reason about programs with
mutable data structures, hence React is nice because renders are
stateless, allowing functional/immutability patterns.</p>

<p>It&#8217;s more and more frowned upon to do</p>

<p>and allow <code>x-foo</code> to directly change <code>blah</code>, which in present-day/legacy
Ember style would flow the data back upward. The data-down-actions-up
approach would involve:</p>

<p>and <code>updateBlah</code> would perform the set. It&#8217;s really just moving the
<code>set</code> back up to the parent so in that way it might just seem like
needless indirection, but this allows:</p>

<ul>
<li>easier reasonability/testability</li>
<li>can override <code>updateBlah</code> to do whatever and asyncly update <code>value</code>,
after some validation. It&#8217;s reaaaally hard/awkward/annoying to sub out
the <code>set</code> behavior</li>
</ul>


<h2>Flux et al</h2>

<p>What are the core concepts?</p>

<pre><code>Views ---&gt; (actions) ----&gt; Dispatcher ---&gt; (registered callback) ---&gt; Stores -------+
Ʌ                                                                                   |
|                                                                                   V
+-- (Controller-Views "change" event handlers) ---- (Stores emit "change" events) --+
</code></pre>

<p>First off, a store is like what&#8217;s traditionally called a model; it has
app state and app logic. A store might directly represent a single model
(i.e. what might be called a UserStore might just be a User model in
other MVCs), but in general stores can represent many objects, scoped to
a particular domain of the application.</p>

<p>If you click a button in a component, it never directly invokes some
method on a store. Why? Because it would be hard to trace the
dependencies? Any new component could come along and start calling
methods on some random store? Yes, confirm, you don&#8217;t want to do that.
You want a message bus. The dispatcher is that bus.</p>

<pre><code>action ---&gt;
action ---&gt;
action ---&gt;---&gt; dispatcher
action ---&gt;
action ---&gt;
</code></pre>

<p>So in your tests you can stub the dispatcher and assert that expected
methods were called on it. Easy peasy I guess? Doesn&#8217;t it mean
you&#8217;ll have some giant switch statement that&#8217;s gotta divvy out events in
the dispatcher? Often: yes, it does, which is desirable for small enough
stuff, issues with scalability though.</p>

<p>The dispatcher model does have the benefit of being able to intercept
events and filter/debounce/coalesce them; this would be a nice place to
ensure that a stray tap in the middle of a sideways transition in a
mobile app didn&#8217;t fire some event.</p>

<p>Anyway, calling action helper fns on a dispatcher doesn&#8217;t do anything if
stores haven&#8217;t subscribed to dispatcher events.</p>

<h2>Reflux</h2>

<p>https://github.com/spoike/refluxjs</p>

<p>Seems like an improvement; gets rid of the switch statements; makes
actions listenable; makes stores listenable in case some stores depend
on others (replaces <code>waitFor</code>)</p>

<p>The actions being listenable is good because it gets rid of stores
receiving ALL actions and having to selectively respond to them via big
switch statement matching by string name.</p>

<p>Actions are functors, you can call them directly and that passes through
the payload to everyone listening.</p>

<pre><code>var statusUpdate = Reflux.createAction();
statusUpdate(data); // Invokes the action statusUpdate
statusUpdate.triggerAsync(data); // same effect as above
</code></pre>

<p>or</p>

<pre><code>var statusUpdate = Reflux.createAction({ sync: true });
statusUpdate(data); // Invokes the action statusUpdate SYNChronously
statusUpdate.trigger(data); // same effect as above
</code></pre>

<p>var Actions = Reflux.createActions([
  &#8220;statusUpdate&#8221;,
  &#8220;statusEdited&#8221;,
  &#8220;statusAdded&#8221;
]);</p>

<p>There&#8217;s lots of features for async and converting an action into async
based on its children.</p>

<p>Blah blah blah back to other ideas:</p>

<p>So if you wanted to do something like Flux in Ember, you&#8217;d have to do
something like</p>

<p>TODO: https://github.com/spoike/refluxjs#joining-parallel-listeners-with-composed-listenables</p>

<p>So my whole better actions idea was so that you could quickly reason
about action state.</p>

<pre><code>var TopLevelComponent = Ember.Component.extend({

  // Better Actions API
  submitForm: action(function() {
    return ajaxPromise(whatever);
  })
});
</code></pre>

<p>This worked <em>ok</em> ish but was horrible for lists because it&#8217;s a
singleton.</p>

<p>Use case: TODO MVC with slow async deletes; additional deletes should be
prevented if animating out of this route. There is a loading spinner if
at least one item is being deleted. Version 1 lets you delete multiple
items at the same time, Version 2 prevents this.</p>

<p>My goals is that I want to see how stream composition can address the
actions problem. Got async actions? Don&#8217;t want them firing at the same
time? Debounce those shits, or flatmap latest. (TODO: what&#8217;s the stream
approach for letting a previous action finish first before starting
another one? I think the answer is flatMapFirst)</p>

<p>For the &#8220;additional deletes should be prevented if animating out&#8221;
requirement, there should be some concept of an EventStream that
dilineates the start and end of when a route is active. If you&#8217;re using
LiquidFire this should be after a route has finished transitioning in
and right before the route has started transitioning out
(animation-wise). The idea being that by default actions are filtered
through that window. But how do you do that?</p>

<p>You want a stream that only emits events per some predicate&#8230;</p>

<p>Actually this is probably a good use case for takeWhile&#8230; takeWhile
route is active. http://jsbin.com/tuzifo/2/edit</p>

<p>But given that we might have components already being displayed, but
we&#8217;re not ready to receive their actions, we need to figure out how to
hook them up&#8230;</p>

<p>So what the fuck does <code>&lt;button &gt;Click me&lt;/button&gt;</code>
do?</p>

<pre><code>TopLevelComponent
  MidLevelComponent
    LeafComponent
      &lt;button &gt;Click me&lt;/button&gt;
</code></pre>

<p>Maybe components implicitly pass down an actions stream? And
route-driven components just get a decorated one from the router? And
then Liquid Fire could provide one for components rendered within an
outlet?</p>

<p>actually expands to</p>

<p>&#8230;?</p>

<p>What am I trying to accomplish here? I&#8217;m so lost.</p>

<p>TODO: replace bullshit with something more meaningful.</p>

<p>https://github.com/baconjs/bacon.js#observable-zip</p>

<p>zip only fires when both streams produce a value, else
backpressure/buffering can occur. Difference between these two is that
back pressure occurs when consumers/sinks can&#8217;t consume fast enough;
buffering can occur for other reasons on the source side of things, e.g.
only one stream in zip is producing values and hence buffering up
values. This can be alleviated by choosing a different join pattern than
the zip default.</p>

<p>Use Bacon.when biaaatch.</p>

<h2>Blood pressure</h2>

<p>110/70. What&#8217;s it mean.</p>

<blockquote><p>If your blood pressure is 120/80, 120 represents systolic pressure, or the pressure of blood against artery walls when the heart beats. Eighty represents diastolic pressure, or the pressure between beats.</p></blockquote>

<p>So it&#8217;s like a max min range, pressure will be the highest in the middle
of a heart beat, lowest between.</p>

<p>Systolic = during heart beat. Diastolic = pressure between beats. High
systolic is generally more serious.</p>

<h2>Make no promises</h2>

<p>http://swannodette.github.io/2013/08/23/make-no-promises/</p>

<h2>Buses as an anti-pattern</h2>

<p>http://baconjs.github.io/tutorials.html#content/tutorials/4_Building_Applications_Out_Of_Bacon</p>

<pre><code>var shoppingCartBus = new Bacon.Bus()
$.ajax('/api/cart').done(cart =&gt; shoppingCartBus.push(cart))
...
shoppingCartBus.onValue(cart =&gt; renderCart(cart))
</code></pre>

<p>What happens if the ajax push occurs before the <code>onValue</code> is set? It&#8217;s
missed, nothing gets rendered. It&#8217;s the same as</p>

<pre><code>var wat = new Wat();
// ...
wat.foo = new Foo();
</code></pre>

<p>What if someone does something depending on <code>.foo</code> being present? Boom.</p>

<p>Solution: inject your dependencies. Pass in buses. Pass in your inputs.
Pass in your actions.</p>

<p>This is kinda fucky:</p>

<pre><code>function ShoppingCartView(cart) {
  return {
    cartView: ...
    removeItemStream: $('#shopping-cart').asEventStream('click', '.remove-item')
      .map(function(e) { return $(e.currentTarget).data('id') })
}
</code></pre>

<p>So creating a view not only just creates the view but also returns the
&#8220;outputs&#8221; of the view, e.g. the actions being emitted from the view.
But this causes cyclic dependencies because you want to pass in a cart
model which provides inputs to the view but you want to provide the
outputs of that view back to the model, but also avoid the temporal
construction issues.</p>

<h2>RX vs Bacon</h2>

<p>https://github.com/baconjs/bacon.js#for-rxjs-users</p>

<p>Bacon offers EventStreams and Properties, subclasses of Observables,
whereas RxJS just has Observables. So how do current values work in RxJS
or do you always have to save it to some state?</p>

<h2>RX hot/cold observables</h2>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/creating.md#cold-vs-hot-observables</p>

<p>TODO read about this.</p>

<h2>Hemipenes</h2>

<p>http://en.wikipedia.org/wiki/Hemipenis</p>

<p>Snakes have two penises, or penes, called hemepenes. Only one is used.
It&#8217;s a spiky weird thing that bloats out when aroused. Other similarly
animals have them, like lizards. Sharks have two &#8220;penises&#8221; but they&#8217;re
called claspers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learnin Clojure]]></title>
    <link href="http://machty.github.com/blog/2014/12/17/learnin-clojure/"/>
    <updated>2014-12-17T12:52:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/12/17/learnin-clojure</id>
    <content type="html"><![CDATA[<h2>Joy of Clojure</h2>

<ul>
<li>Imperative

<ul>
<li>a sequence of statements mutates program state</li>
</ul>
</li>
<li>maenad (maenadic): wild and unrestrained: a female follower of
Bacchus, traditionally associated with divine possession and frenzied
rites</li>
<li>expression problem

<ul>
<li>&#8220;The Expression Problem is a new name for an old problem. The
goal is to define a datatype by cases, where one can add new cases
to the datatype and new functions over the datatype, without
recompiling existing code, and while retaining static type safety
(e.g., no casts).&#8221;</li>
<li>Java requires these to be declared up front, suffers</li>
<li>Why the &#8220;expression&#8221; problem? &#8216;The label &#8220;Expression Problem&#8221; puns on expression = &#8220;how much can your language express&#8221; and expression = &#8220;the terms you are trying to represent are language expressions&#8221;.&#8217;</li>
</ul>
</li>
</ul>


<!--more-->


<h2>Protocols</h2>

<p>Almost like defining global functions but require that first arg(?)
adheres to a given protocol.</p>

<pre><code>(defprotocol Searchable
  (search [this query]))
</code></pre>

<p>then</p>

<pre><code>(extend-type String
  Searchable
  (search [this] 
    (search [this query]
      (someshit))))
</code></pre>

<blockquote><p>The resulting functions dispatch on the type of their first argument, and thus must have at least one argument</p></blockquote>

<p>MAKES SENSE.</p>

<h2>Expression Problem</h2>

<p>You have</p>

<ul>
<li>a set of abstract methods you&#8217;d like to implement&#8230;</li>
<li>&#8230;for an existing concrete class&#8230;</li>
<li>&#8230;without changing the code for either the existing abstract methods
or the concrete class</li>
</ul>


<p>Ruby&#8217;s solution means reopening the class, possibly monkey patching.
Clojure&#8217;s solution is protocols&#8230; defining functions that dispatch
based on the type of the first arg.</p>

<p>Ruby suffers a namespacing issue, hence the danger of monkey patching.
In Ruby everything is a message, easy to accidentally overwrite a method
handler. Maybe there&#8217;s a namespace issue in Clojure too, if you&#8217;re not
careful, but whatever I just need to learn more shit.</p>

<h2>Clojure: namespaces</h2>

<p><code>(ns dumb.shit)</code></p>

<p>and you have <code>defn-</code> macros to declare private methods.</p>

<p>Namespaces encapsulate, but you can also use lexical closures for
encapsulation.</p>

<h2>Keywords</h2>

<p><code>:asd</code> is not a symbol, it&#8217;s a &#8220;keyword&#8221;. <code>asd</code> is a symbol, and is
substituted with some underlying value.</p>

<h2>Collections</h2>

<h3>Lists</h3>

<p><code>(a b c)</code> is just a list. When it gets evaluated, <code>a</code> will be treated
as a function, macro, or operator.</p>

<p>Vectors&#8230; don&#8217;t get evaluated? Why don&#8217;t they make a bigger deal about
this?</p>

<pre><code>[1 2 3]
(vector 1 2 3)
</code></pre>

<h2>Commas are whitespace</h2>

<pre><code>user=&gt; { 1 1 2, 2 }
{1 1, 2 2}
</code></pre>

<h2>prefix/infix</h2>

<pre><code>+ 1 2 3 4 5 6 7
</code></pre>

<p>vs</p>

<pre><code>1 + 2 + 3 + 4 + 5 + 6 + 7
</code></pre>

<p>Prefix allows any number of args.</p>

<p>Also, when everything is prefix, no question of operator precedence.</p>

<h2>Vars</h2>

<p>don&#8217;t need to be bound</p>

<pre><code>user=&gt; (def y)
#'user/y
user=&gt; y
#&lt;Unbound Unbound: #'user/y&gt;
</code></pre>

<h2>Special form</h2>

<p>A Clojure expression that&#8217;s part of core language but not created via
normal functions, types, or macros.</p>

<h2>Lisp</h2>

<p>stands for &#8220;LISt Processing&#8221;</p>

<h2>def defn</h2>

<p><code>def</code> associates a symbol w Clojure data (could be some primitive, or a
function, or whatever).</p>

<pre><code>(def a (fn [] (println "wat")))
</code></pre>

<p><code>defn</code> is a macro that wraps the above (and also lets you apply
documentation).</p>

<pre><code>(defn a "i am a stupid fn" [] (println "wat"))
(defn a [] (println "wat"))
</code></pre>

<p>You can use <code>defn</code> for multi-arity fns</p>

<pre><code>user=&gt; (defn a ([a] #{a}) ([a b] #{a b}))
#'user/a
user=&gt; (a 2)
#{2}
user=&gt; (a 2 3)
#{3 2}
user=&gt; (a 2 3 4)
ArityException Wrong number of args (3) passed to: user/a  clojure.lang.AFn.throwArity (AFn.java:429)
</code></pre>

<p>What&#8217;s weird about this is <code>([n] #{n})</code>&#8230; if you&#8217;re evaluating this,
won&#8217;t it try to immediate run <code>[n]</code> as if it were a fn? Yes! But we&#8217;re
not evaluating&#8230; we&#8217;re in a macro! Eval rules don&#8217;t apply while shit is
getting reorganized by the macro code. Kiiiinda fuckin weird.</p>

<p>Multi-arity accomplished via</p>

<pre><code>(defn a [&amp; x] (apply vector x))
</code></pre>

<h2>Homoiconicity</h2>

<p>http://en.wikipedia.org/wiki/Homoiconicity</p>

<p>It means your program&#8217;s AST is the same as its syntax, basically.
Homoiconicity is a feature of Clojure.</p>

<h2>Reader features</h2>

<p>Like C++ preprocessor macros, rearrange shit (but somehow isn&#8217;t a
macro?). <code>#()</code> is an inplace function reader feature that gets replaced
with special form <code>def</code>.</p>

<pre><code>user=&gt; (def a #(vector %1 %3))
#'user/a
user=&gt; (a 1 2 3)
[1 3]
</code></pre>

<p>The above example shows that you can skip an numbered arg and still wind
up with an arity of 3.</p>

<pre><code>(def a #(vector % % %))
user=&gt; (a 1)
[1 1 1]
</code></pre>

<h2>Blocks</h2>

<p>do blocks, usually side-effecty</p>

<pre><code>user=&gt; (do
  #_=&gt; (println "wat")
  #_=&gt; (println "omg")
  #_=&gt; 3)
wat
omg
3
</code></pre>

<h2>Locals (not variables)</h2>

<p>Useless:</p>

<pre><code>(let [] (println "wat"))
</code></pre>

<p>Useful</p>

<pre><code>(let [a 5] (println "a is" a))
</code></pre>

<p>Why a vector and not a map? I guess because let internally needs to loop
through each thing?</p>

<p>Note the use of &#8220;form&#8221;. It&#8217;s <code>let</code> form, it&#8217;s a <code>do</code> form. <code>def</code> is a
special form&#8230; still need to tease this out. I guess form just means
language pattern building block that depends on basic Closure types
(functions, primitives, etc).</p>

<h2>Loops</h2>

<p>Use tail recursion. <code>recur</code> is a special form.</p>

<p>BEFORE I MENTION THAT THOUGH I figured out how to rewrite a fn that runs
a callback twice</p>

<pre><code>user=&gt; (defn twice ([some-fn] (twice some-fn true)) ([some-fn first] (some-fn) (when (true? first) (twice some-fn false) ) ))
#'user/twice
user=&gt; (twice #(println "hello"))
hello
hello
</code></pre>

<p>Could have also used special form <code>fn</code>:</p>

<pre><code>(twice (fn [] (println "hello")))
</code></pre>

<h2>Android camera bug</h2>

<p>Only on Nexus 5, we had a bug where switching between front and back
camera failed, reason being something to do with the fact that there&#8217;s
no guarantee that front and back will have the same aspect ratio /
resolution, so you need to reinitialize some shits. ISN&#8217;T ANDROID
FUN?!?!?!?!?!</p>

<h2>Clojure <code>set!</code></h2>

<pre><code>(def a (java.awt.Point. 0 0))
(.-x a)
; 0
(set! (.-x a) 1)
; 1
(.-x a)
; 1
</code></pre>

<p>So you can think of <code>(.-x a)</code> as a descriptor that <code>set!</code> can operate
on. Hmm does that mean <code>set!</code> is a macro?</p>

<p>http://clojure.org/java_interop#Java%20Interop-The%20Dot%20special%20form-%28set!%20%28.%20Classname-symbol%20staticFieldName-symbol%29%20expr%29</p>

<p>Apparently it&#8217;s a special form.</p>

<h2>Abstract Window Toolkit</h2>

<p>java.awt stands for Abstract Window Toolkit.</p>

<h2>Capture output</h2>

<pre><code>(with-out-str (println "fuckles"))
; "fuckles"
</code></pre>

<p>You can also use this to capture the output of <code>doc</code>, which gets
docstring:</p>

<pre><code>(defn a "a dumb thing" [] (println()))
(doc a)
(with-out-string (doc a))
</code></pre>

<h2>What are all the special forms?</h2>

<p>They&#8217;re like special hooked-into compiler macros that do special things
you couldn&#8217;t do with macros.</p>

<pre><code>clojure.lang.Compiler/specials
{&amp; nil, monitor-exit #&lt;Parser clojure.lang.Compiler$MonitorExitExpr$Parser@14483946&gt;, case* #&lt;Parser clojure.lang.Compiler$CaseExpr$Parser@3826c025&gt;, try #&lt;Parser clojure.lang.Compiler$TryExpr$Parser@1a54177e&gt;, reify* #&lt;ReifyParser clojure.lang.Compiler$NewInstanceExpr$ReifyParser@5d473d44&gt;, finally nil, loop* #&lt;Parser clojure.lang.Compiler$LetExpr$Parser@770f1aba&gt;, do #&lt;Parser clojure.lang.Compiler$BodyExpr$Parser@86b7485&gt;, letfn* #&lt;Parser clojure.lang.Compiler$LetFnExpr$Parser@5e223ed2&gt;, if #&lt;Parser clojure.lang.Compiler$IfExpr$Parser@10668c26&gt;, clojure.core/import* #&lt;Parser clojure.lang.Compiler$ImportExpr$Parser@3636d04a&gt;, new #&lt;Parser clojure.lang.Compiler$NewExpr$Parser@39c8704e&gt;, deftype* #&lt;DeftypeParser clojure.lang.Compiler$NewInstanceExpr$DeftypeParser@17f1292f&gt;, let* #&lt;Parser clojure.lang.Compiler$LetExpr$Parser@59c6d8f0&gt;, fn* nil, recur #&lt;Parser clojure.lang.Compiler$RecurExpr$Parser@75c7b6d7&gt;, set! #&lt;Parser clojure.lang.Compiler$AssignExpr$Parser@77a7ed63&gt;, . #&lt;Parser clojure.lang.Compiler$HostExpr$Parser@615e29b9&gt;, var #&lt;Parser clojure.lang.Compiler$TheVarExpr$Parser@7c8deca3&gt;, quote #&lt;Parser clojure.lang.Compiler$ConstantExpr$Parser@79dce7a9&gt;, catch nil, throw #&lt;Parser clojure.lang.Compiler$ThrowExpr$Parser@cbff27f&gt;, monitor-enter #&lt;Parser clojure.lang.Compiler$MonitorEnterExpr$Parser@567fbf5a&gt;, def #&lt;Parser clojure.lang.Compiler$DefExpr$Parser@3a450e&gt;}
</code></pre>

<p>Or just</p>

<pre><code>(sort (keys clojure.lang.Compiler/specials))
(&amp; . case* catch def deftype* do finally fn* if let* letfn* loop* monitor-enter monitor-exit new quote recur reify* set! throw try var clojure.core/import*)
</code></pre>

<h2>Java <code>..</code> interop macro</h2>

<pre><code>(.. (java.util.Date.) toString (endsWith "2014"))
</code></pre>

<p>Could also write</p>

<pre><code>(.. (java.util.Date.) (toString) (endsWith "2014"))
</code></pre>

<p>TLDR the <code>..</code> macro will unwrap each argument and treat as fn
invocation.</p>

<h2>ligsigsegv</h2>

<p>http://www.gnu.org/software/libsigsegv/</p>

<p><code>clisp</code> uses this&#8230; it&#8217;s a way you can implement virtual memory in user
space. Probably some clever shit that clisp and other zany interpreters
use.</p>

<h2>Namespace</h2>

<p>Cutting to that Chase™.</p>

<h2>What is &amp;?</h2>

<pre><code>user=&gt; [&amp; asd]
CompilerException java.lang.RuntimeException: Unable to resolve symbol: &amp; in this context, compiling:(NO_SOURCE_PATH:0:0)
</code></pre>

<p>so when can you use it?</p>

<pre><code>(fn [&amp; asd])
</code></pre>

<p>this is a fn that takes any number of args:</p>

<pre><code>((fn [&amp; asd]))
((fn [&amp; asd]) 1)
((fn [&amp; asd]) 1 2)
</code></pre>

<p>Basically fn is a macro and can rearrange &amp;, which is just a symbol.</p>

<h2>Anaphoric Macros</h2>

<p>http://amalloy.hubpages.com/hub/Unhygenic-anaphoric-Clojure-macros-for-fun-and-profit</p>

<p>TL;DR useful in some cases for code generation.</p>

<p>Basically you should always use backtick <code>\`` (for fully qualified
symbols) rather thaaaaaaan boring ol single quote</code>&#8217;`.</p>

<h2>Destructuring</h2>

<p>Programming language concept of breaking apart some data structure into
assigned variables. Pattern matching in Haskell is a form of this.
Ruby&#8217;s array destructuring assignment has</p>

<pre><code>a,b = [1,2]
</code></pre>

<p>Apparently even Firefox has some o dat shit</p>

<pre><code>var a,b;
[a,b] = [1,2];
</code></pre>

<p>In Clojure, you don&#8217;t have pattern matching a la Haskell but you still
have parameter destructuring, the difference being (I think) that
vanilla Clojure won&#8217;t match an argument signature and decide which
version of the fn to run (unless you add the <code>core.match</code> module, which
might be a core feature at some point).</p>

<p>Basically Clojure has similar features to Ruby.</p>

<h2>npm pretest</h2>

<pre><code>"pretest": "ember build",
"test": "bin/run-tests.js",
</code></pre>

<p>TL;DR when testing ember repo (and the server is already running), just
directly run <code>/bin/run-tests.js</code>.</p>

<h2>:keys</h2>

<pre><code>{:keys [a b c]}
</code></pre>

<p>This isn&#8217;t meaningful on its own; it&#8217;s just a map. But it matches one of
the patterns expected by the <code>let</code> macro.</p>

<pre><code>(let [{:keys [a b c]} {:a "wat" :b "the" :c "hell"}]
  (println a b c))
</code></pre>

<p>That doesn&#8217;t rename anything, but if you wanna do that:</p>

<pre><code>(let [{x :a y :b z :c} {:a "wat" :b "the" :c "hell"}]
  (println x y z))
</code></pre>

<p>The key thing to remember is that the symbol needs to be on the left:
<code>{x :a y :b z :c}</code>.</p>

<p>Means you could also do</p>

<pre><code>(defn a [{a :first-name b :last-name} h]
  (println "HAHA" a " " b))
</code></pre>

<p>WRONG because of <code>h</code>. These are fn params, not <code>let</code> args that are
presented up front, so we actually want:</p>

<pre><code>(defn a [{a :first-name b :last-name}]
  (println "HAHA" a " " b))
</code></pre>

<p>followed by</p>

<pre><code>(a {:first-name "Wat" :last-name "McMatchneer"})
</code></pre>

<h2>rationalize</h2>

<p>Converts, say, a float to a fraction.</p>

<h2>Clojure keywords as fns</h2>

<pre><code>user=&gt; (def a { :a 123 })
#'user/a
user=&gt; (:a a)
123
</code></pre>

<p>If a keyword is in fn position, it does a lookup of itself on the hash
arg passed to it. Otherwise you&#8217;d have to do:</p>

<pre><code>user=&gt; (get a :a)
123
</code></pre>

<h2>So many seqs</h2>

<p><code>Collection</code>: a composite data type: sequence, map, or set.</p>

<p><code>Sequential</code>: ordered series of values (as opposed to, say, a set or a
map)</p>

<p><code>Sequence</code>: a sequential collection that may or may not exist yet, e.g.
it could be a vector or it could be a lazy-seq of yet-to-be-computed
thunks.</p>

<p><code>Seq</code>: an API for navigating collections: <code>first</code>, <code>rest</code>, nil, and
<code>()</code>. Basically, vectors, lists, PersistentLists are all <code>seq</code>s.</p>

<p><code>seq</code>, of <code>clojure.core/seq</code>, is a fn that returns an object
implementing <code>Seq</code> API, or nil if collection is empty. <code>seq</code> returns &#8220;an
immutable variant of an iterator/enumerator`</p>

<h2>Equality partition</h2>

<p>Collections are partitioned into the following categories:</p>

<ul>
<li>Sequentials</li>
<li>Map</li>
<li>Set</li>
</ul>


<p><code>(=)</code> of two objects from different partitions is always false; e.g.
vector compared w hash w same objs is false.</p>

<p>Within a partition, different concrete types might equal each other:</p>

<pre><code>(= [:a :b :c] '(:a :b :c))
true
</code></pre>

<h2>cons-cell</h2>

<p>Two-cell structure upon which Lisps build their data types. Maps to
first and rest in Clojureland.</p>

<p>Pretty sure this is how sequences are implemented (immutable/persistent
data structures).</p>

<h2>(class) and .getClass</h2>

<p>Same thing? Maybe?</p>

<pre><code>user=&gt; (class (java.awt.Point.))
java.awt.Point
user=&gt; (.getClass (java.awt.Point.))
java.awt.Point
</code></pre>

<h2>map</h2>

<p>GOD this shit is so cool.</p>

<p><code>map</code> takes a fn and any number of collections afterward, applies a
function to the first items, then second items, etc.</p>

<p>It&#8217;s like a zip. But with a map. SO COOL.</p>

<pre><code>(map #(apply + %&amp;) [1 2 3] [4 5 6] '(7 8 9))
</code></pre>

<p>or</p>

<pre><code>(map vector (range 5) (range 6) (range 7))
([0 0 0] [1 1 1] [2 2 2] [3 3 3] [4 4 4])
</code></pre>

<h2>vec or vector</h2>

<pre><code>user=&gt; (vec [1 2 3 4 5])
user=&gt; (apply vector '(1 2 3 4 5))
</code></pre>

<p>Basically <code>vec</code> accepts a single collection arg whereas <code>vector</code> accepts
multiple args. Both create vectors.</p>

<p>Hence</p>

<pre><code>(vec (map char (range 65 76)))
</code></pre>

<p>Many ways to look up a value in vector.</p>

<ul>
<li>nth</li>
<li>get</li>
<li>vector as fn</li>
</ul>


<p>BARF BARF BARF</p>

<pre><code>user=&gt; (assoc [4 5 6] 0 "wat")
["wat" 5 6]
</code></pre>

<p>REMEMBER that defn let&#8217;s you define multiple fn bodies per arity.
You see this when the arg vector doesn&#8217;t immediately follow the name,
but a list (starting w arg vector) does.</p>

<p>e.g.</p>

<pre><code>(defn mach-inc
  ([n] (mach-inc n 1))
  ([n i] (+ n i)))
</code></pre>

<p>So now I&#8217;ve made an inc fn that takes an optional increment amount, but
defaults to 1. If it were just a single-body fn, it&#8217;d be all</p>

<pre><code>(defn mach-inc-single [n]
  (+ n 1))

user=&gt; (mach-inc-single 5)
6
</code></pre>

<p>How to curry? Use partial. This adds two to everything.</p>

<pre><code>(map (partial + 2) (range 10))
</code></pre>

<p>Rad. Radsauce!</p>

<p>Vectors as stacks: <code>conj</code> and <code>pop</code>. Use <code>peek</code> a lot since <code>pop</code>
returns new immutable fucker.</p>

<h2><code>map</code> in Lisps, conj vs cons</h2>

<p>Apparently Clojure&#8217;s mapping over collections is more efficient because
it kinda lets you cheat w vectors. In Lisps without vectors you just
have lisps, and as you push to an accumulator</p>

<p>Ah ok let&#8217;s talk about cons vs conj.</p>

<p><code>cons</code> unshifts and returns a seq (or a <code>clojure.lang.Cons</code>?):</p>

<pre><code>user=&gt; (cons 4 [1 2 3])
(4 1 2 3)
user=&gt; (class (cons 4 [1 2 3]))
clojure.lang.Cons
</code></pre>

<p>Same thing if you pass in a list</p>

<pre><code>ArityException Wrong number of args (1) passed to: core/cons  clojure.lang.AFn.throwArity (AFn.java:429)
user=&gt; (cons 4 `(1 2 3))
(4 1 2 3)
</code></pre>

<p>WAAT apparently backtick does some implicit cons</p>

<pre><code>user=&gt; (class '(1 2 3))
clojure.lang.PersistentList
user=&gt; (class `(1 2 3))
clojure.lang.Cons
user=&gt; (class (quote (1 2 3)))
clojure.lang.PersistentList
</code></pre>

<p>Anyyyyway, <code>conj</code> returns a collection as close to the input collection
as possible. And it &#8220;push&#8221;es.</p>

<pre><code>user=&gt; (conj #{1 2 3} 4)
#{1 4 3 2}
user=&gt; (conj [1 2 3] 4)
[1 2 3 4]
user=&gt; (conj '(1 2 3) 4)
(4 1 2 3)
</code></pre>

<p>Ah HAH! In fact it DOESN&#8217;T always push&#8230; it inserts at the end that
makes the most sense given the data type (&#8220;in the most efficient way&#8221;):</p>

<pre><code>user=&gt; (conj [1 2 3] 4)
[1 2 3 4]
user=&gt; (conj '(1 2 3) 4)
(4 1 2 3)
</code></pre>

<p>SOOO</p>

<ul>
<li>cons

<ul>
<li>NOT homogeneous; no guarantee <code>next</code> chain will be list</li>
<li>only guarantee is that <code>next</code> is a seq. Which means you can append
to the beginning of any stupid thing. That&#8217;s why there&#8217;s
<code>clojure.lang.Cons</code> as its own type; it could point to anything.
<code>(class (next some-cons))</code> could be aaaany number of things
depending on how you composed the <code>cons</code>.</li>
</ul>
</li>
<li>conj

<ul>
<li>homogeneous: <code>next</code> is always the same type as wha you created it
with, whether list or vector or chunked seq from a vector, etc.</li>
<li><code>nil</code> starting list defaults to a PersistentList (but an empty vec
will be a vec, lol)</li>
</ul>
</li>
</ul>


<p>Unfortunately all seqs print w parentheses, but they could by all sorts
of different types of shit.</p>

<pre><code>user=&gt; (class (seq [1 2 3]))
clojure.lang.PersistentVector$ChunkedSeq
user=&gt; (class (seq '(1 2 3)))
clojure.lang.PersistentList
</code></pre>

<h2>recur</h2>

<p>http://clojure.org/special_forms#recur</p>

<blockquote><p>Note that recur is the only non-stack-consuming looping construct in Clojure. There is no tail-call optimization and the use of self-calls for looping of unknown bounds is discouraged. recur is functional and its use in tail-position is verified by the compiler.</p></blockquote>

<p>Interesting.</p>

<h2>No shift/unshift</h2>

<p>Why? Because internally the fns that manipulate the left side of a
vector return <code>seq</code>s, not vectors, which severs the ability to use
vector fns in an optimized way, reusing datastructures, etc.</p>

<p>So if you have</p>

<pre><code>user=&gt; (vec (range 5))
[0 1 2 3 4]
</code></pre>

<p>then doing</p>

<pre><code>user=&gt; (rest (vec (range 5)))
(1 2 3 4)

user=&gt; (class (rest (vec (range 5))))
clojure.lang.PersistentVector$ChunkedSeq
</code></pre>

<p>So you have a sequence <em>based</em> on a vector, but it&#8217;s not the original
vector, so you don&#8217;t have the same vetor fns available. If you want to
convert to vector again to get all those tasty shits, it&#8217;ll be O(n),
probably both time and space.</p>

<p>You can&#8217;t subvec a vec unexpect the original vec to be garbage collected
because subvec maintains a reference.</p>

<h2>PersistentList</h2>

<ul>
<li>singly-linked</li>
<li>every node knows distance from end</li>
<li><p>can only traverse from left to right</p>

<p>  (defmethod print-method clojure.lang.PersistentQueue</p>

<pre><code>[q w]
(print-method '&lt;- w)
(print-method (seq q) w)
(print-method '-&lt; w))
</code></pre></li>
</ul>


<h2>Shitty things</h2>

<p>It doesn&#8217;t seem like Clojure will yell at you if you mess up and use the
wrong kind of function for a collection. e.g. <code>rest</code> and <code>pop</code> do
similar things to a PersistentQueue, but <code>rest</code> yields a <code>seq</code>, and
<code>pop</code> yields a Queue, the former which gets rid of a lot of performance
improvements. The behavior you&#8217;ll see, since all <code>seq</code>s seem to
implement the same fns</p>

<h2>What the hell</h2>

<pre><code>(some #( if (even? %) % nil ) [1 3 4])
</code></pre>

<p>Sets and maps can behave like predicates.</p>

<pre><code>(#{4 9 10} 9)
9
user=&gt;     (#{4 9 10} 11)
nil
</code></pre>

<p>So you can use this idiom:</p>

<pre><code>(some #{:b} [:a 1 :b 2])
</code></pre>

<p>this runs through each collection on the right and checks to see if each
element is in the collection on the left, because the collection on the
left acts like a predicate.</p>

<h2>APR</h2>

<p>Annual Percentage Rate. Based on prime rate, e.g. add 12.74% to prime
rate to determine purchase annual percentage rate.</p>

<p>You can have a credit card and not pay interest if you pay in full all
the time. You must always pay the minimum rate, or else you get a
penalty. But the idea is that you can pay your minimum rate, and
anything above that is subject to an APR. Penalty APR might apply
indefinitely. Again, doesn&#8217;t matter (other than a shitty credit score)
if you always pay the full balance after that (APR only affects the
unpaid balance).</p>

<p>Balance transfers are transferring outstanding balances between cards,
likely from one w a higher APR to one w lower. New cardholders might be
offered 0% balance transfer API with the idea that you&#8217;ll transfer money
to it right away because you&#8217;re so hopelessly in debt. APR applies
differently to different types of debits on your account, and balance is
one kind of debit, so if you had a balance transfer APR 5% higher than
purchase APR, that&#8217;s basically discouraging you from putting balance
transfers into that new account (makes sense, it&#8217;s kind of a risky thing
if you&#8217;re just adopting new CCs and constantly transferring balances to
them; then again it&#8217;ll also be limited by your max credit line. There&#8217;s
also per-transaction fees, e.g. <code>max($5, 3%)</code>.</p>

<p>Cash transfer is when you debit one card, credit another. Different than
balance transfer because in one you&#8217;re trading a debt, in the other
you&#8217;re trading credit (cash). Per-transaction fee is <code>max($10, 3%)</code>.</p>

<p>Overdraft Advance is the ability to automatically withdraw from a credit
card if your debit card / check bounces. You have to go through the
hoops and set it up online, linking to a checking account.</p>

<p>US Prime Rate is 300 points above federal funds rate.</p>

<blockquote><p>In general, the United States prime rate runs approximately 300 basis points (or 3 percent) above the federal funds rate. The Federal Open Market Committee (FOMC) meets eight times per year wherein they set a target for the federal funds rate. Other rates, including the prime rate, derive from this base rate.</p></blockquote>

<p>Credit cards actually talk about referencing the prime rate printed in
the Wall Street Journal; &#8220;If WSJ stops publishing the Prime Rate, we
will select a similar preference rate.&#8221;</p>

<p>Variable rate just means it might change if the prime rate changes, or
other reasons.</p>

<p>Cash advances mean ATM withdrawals among other things.</p>

<p>Any amount over the minimum payment account gets applied to payment APR
first, and descending to other APR types (which might be higher or
lower). It trickles down.</p>

<h2>Interest charges</h2>

<p>Daily balance approach is common:</p>

<ul>
<li>take starting balance and add

<ul>
<li>interest charge from prior day (compounding interest)</li>
<li>new transactions/debits</li>
</ul>
</li>
<li>subtract payments/credits</li>
<li>daily balance = max(0, balance) (net credit balance treated as zero)</li>
<li>Daily interest rate = APR/365.</li>
<li>Multiply each type of APR by applicable balance type (payments are
different than balance transfers, etc)</li>
<li>If interest > 0, interest = max(MinimumInterest, interest)

<ul>
<li>MinimumInterest is often 0</li>
</ul>
</li>
</ul>


<h2>Clojure: into</h2>

<p>Pour values into collections:</p>

<pre><code>(into {} {:a 1 :b 2})
{:b 2, :a 1}
(into {} [[:a 1] [:b 2]])
{:a 1, :b 2}
</code></pre>

<p>The latter stems from the fact that providing a map to <code>seq</code> generates a
shit:</p>

<pre><code>(seq {:a 1 :b 2})
([:b 2] [:a 1])
</code></pre>

<h2>Clojure maps</h2>

<p><code>{}</code> is actually ArrayMap, but most common is HashMap:</p>

<pre><code>(hash-map :a 123)
</code></pre>

<p><code>zipmap</code> takes a keys and values array</p>

<pre><code>(zipmap [:k0 :k1] [:v0 :v1])
{:k1 :v1, :k0 :v0}

(zipmap [:k0 :k1] [:v0 :v1 :v2])
{:k1 :v1, :k0 :v0}

(zipmap [:k0 :k1 :k2] [:v0 :v1])
{:k1 :v1, :k0 :v0}
</code></pre>

<p>The latter two demonstrate that it stops at the smallest array.</p>

<h2>second</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (doc second)
</span><span class='line'>-------------------------
</span><span class='line'>clojure.core/second
</span><span class='line'>([x])
</span><span class='line'>  Same as (first (next x))</span></code></pre></td></tr></table></div></figure>


<h2>invariant</h2>

<p>Assertions in functional land.</p>

<h2>equality</h2>

<p>Meaningless in a mutable system. If you&#8217;re not guaranteed to be equal to
another object forever, then you&#8217;re not equal.</p>

<p>Ooo unrelated by <code>let</code> locals can refer to previous ones in the same let
binding vector:</p>

<pre><code>(let [v [4 5 6] a (first v)] (println a))
4
</code></pre>

<p>Anyway, immutable objects share data:</p>

<pre><code>(let [v [4 5 6] v0 (cons 1 v) v1 (cons 2 v)] (= (rest v0) (rest v1)))
</code></pre>

<p>aaaaand they&#8217;re actually identical:</p>

<pre><code>(let [v [4 5 6] v0 (cons 1 v) v1 (cons 2 v)] (identical? (rest v0) (rest v1)))
false
</code></pre>

<p>WHOOPSY DAISY: this is apparently wrong because I&#8217;m using a vector and
not a list&#8230; why? Let&#8217;s see what class they are</p>

<pre><code>(let [v [4 5 6] v0 (cons 1 v) v1 (cons 2 v)] (map class (map next [v0 v1])) )
(clojure.lang.PersistentVector$ChunkedSeq clojure.lang.PersistentVector$ChunkedSeq)
</code></pre>

<p>So <code>cons</code> casts the provided collection to a <code>seq</code>, and the vector
obliges by giving it a chunked sequence, which loses all the vector-y
stuff about it. No casting needs to take place if it&#8217;s already a seq
though, hence lists work.</p>

<p>CONFUSING SHIT:</p>

<pre><code>user=&gt; (def h {:a 1})
#'user/h
user=&gt; (h :a)
1
user=&gt; (:a h)
1
</code></pre>

<p>Basically, both keywords and collections themselves can behave like fns.</p>

<h2>&#8220;changes&#8221; in immutable structures</h2>

<p>A new root &#8220;node&#8221; is always returned, whether you&#8217;re pushing to a
vector, etc, but it might point to the same things.</p>

<h2>lazy-seq, thunks</h2>

<p>A thunk is a description of an operation, usually one step in an
iteration. Lazy-seq presumably rearranges your eager seq operations
into lazy thungs.</p>

<p>If you hold onto the head of a lazy sequence though, you can lose all
the benefits because the head (and the rest of the sequence) won&#8217;t be
garbage collected. <code>lazy-seq</code> is only useful when intermediate
calculations can be forgotten, hence the difference between the
following:</p>

<pre><code>(let [r (range 1e10)]
  (first r) 
  (last r))

(let [r (range 1e10)]
  (last r)   ; r still needed for following calc, so clojure doesn't clear it
  (first r))
</code></pre>

<p>Basically we broke the rule of holding onto to the head, which means
things might not get garbage collected the way we&#8217;d like; this can
happen in any case where we do bindings, whether let or fn arg bindings.</p>

<p>So while Clojure&#8217;s smart enough to aggressively clear out (for GC)
locals it no longer needs, it won&#8217;t rearrange code for us because it has
no way of knowing whether <code>first</code> and <code>last</code> are pure, which might make
it unsafe to re-order; note that Haskell doesn&#8217;t have this problem
because it&#8217;s purely functional.</p>

<h2>iterate</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (doc iterate)
</span><span class='line'>-------------------------
</span><span class='line'>clojure.core/iterate
</span><span class='line'>([f x])
</span><span class='line'>  Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects</span></code></pre></td></tr></table></div></figure>


<p>Ah so x doesn&#8217;t even need to be a liast, could just be a number.</p>

<pre><code>(second (iterate inc 1))
2 
</code></pre>

<h2><code>-&gt;</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clojure.core/-&gt;
</span><span class='line'>([x & forms])
</span><span class='line'>Macro
</span><span class='line'>  Threads the expr through the forms. Inserts x as the
</span><span class='line'>  second item in the first form, making a list of it if it is not a
</span><span class='line'>  list already. If there are more forms, inserts the first form as the
</span><span class='line'>  second item in second form, etc.</span></code></pre></td></tr></table></div></figure>


<p>I have no fucking idea.</p>

<h2>take</h2>

<pre><code>user=&gt; (take 5 (iterate inc 1))
(1 2 3 4 5)
user=&gt; (take 5 (range))
(0 1 2 3 4)
user=&gt; (take 5 (filter even? (range)))
(0 2 4 6 8)
</code></pre>

<p>Ruby/Rails kept making me thing something like <code>.first(5)</code>, but <code>take</code>
is the functional thing I was looking for.</p>

<p>Unrelated, but</p>

<pre><code>user=&gt; (/ 5)
1/5
</code></pre>

<blockquote><p>If no denominators are supplied, returns 1/numerator,</p></blockquote>

<h2>Quicksort</h2>

<p>I forgot quicksort, so here I go remembering it:</p>

<ul>
<li>Take your array and choose an element in the array (the pivot)</li>
<li>loop through O(n) and swap elements such that all <code>&lt;</code> elements are to
the left of the pivot and all <code>&gt;=</code> elements are to the right.</li>
<li><p>Recurse into the unsorted partitions and do to the same thing.</p>

<p>  4 9 1 3 7 2 8</p>

<pre><code>          P
        &lt; P
      &lt;   P
    &lt;     P
  &lt;       P
&gt;         P
2       8 9
</code></pre>

  4 2 1 3 7 8 9
  &lt;         P

<pre><code>        |
        | 9   -- sorted
    &lt; P |
  &lt;   P |
&lt;     P |
</code></pre>

  &lt;       P |
  4 2 1 3 7 8 9

<pre><code>  &lt; P | |
&lt;   P | |
</code></pre>

<blockquote><pre><code>P | |
</code></pre>

<p>  1 2 3 4 | |
  &#8230;blahblahblah&#8230;
  1 2 3 4 7 8 9</p></blockquote></li>
</ul>


<p>It is sorrrrted. Divide and conquer babeh, like mergesort.</p>

<h2><code>list</code> and <code>list*</code></h2>

<pre><code>user=&gt; (list 1 2 3 4)
(1 2 3 4)
user=&gt; (list [1 2 3 4])
([1 2 3 4])
user=&gt; (list (range 5))
((0 1 2 3 4))
user=&gt; (apply list (range 5))
(0 1 2 3 4)
user=&gt; (list* () () () ())
(() () ())
user=&gt; (list* () () () '(6 7 8))
(() () () 6 7 8)
user=&gt; (list* 3 2 1 '(6 7 8))
(3 2 1 6 7 8)
</code></pre>

<p>So <code>list*</code> is just <code>list</code> where the final arg is a sequence.</p>

<p>unrelated:</p>

<pre><code>user=&gt; (let [a 3 fn #(&lt; % a)] (filter fn '(1 2 3 6)))
(1 2)
user=&gt; (let [a 3 fn #(&lt; % a)] (remove fn '(1 2 3 6)))
(3 6)

(defn sort-parts [work]
  (lazy-seq
    (loop [[part &amp; parts] work]
      (println "work:" work)
      (println "part:" part)
      (if-let [[pivot &amp; xs] (seq part)]
        (let [smaller? #(&lt; % pivot)]
          (recur (list*
            (filter smaller? xs)
            pivot
            (remove smaller? xs)
            parts)))
      (when-let [[x &amp; parts] parts]
        (cons x (sort-parts parts)))))))

(sort-parts (list [9 1 4 2 6]))

work: ([9 1 4 2 6])
part: [9 1 4 2 6]
work: ([9 1 4 2 6])
part: (1 4 2 6)
work: ([9 1 4 2 6])
part: ()
work: ((4 2 6) 9 ())
part: (4 2 6)
work: ((4 2 6) 9 ())
art: (2)
work: ((4 2 6) 9 ())
part: ()
work: (() 4 (6) 9 ())
part: ()
work: ((6) 9 ())
part: (6)
work: ((6) 9 ())
part: ()
work: (() 9 ())
part: ()
work: (())
part: ()
</code></pre>

<p>AH HAH this is fucked up because I was thinking <code>recur</code> was going to
somehow rewrite the value of <code>work</code>. It won&#8217;t. It&#8217;ll change the
&#8220;l-values&#8221;, whereas <code>work</code> is just meant as the initial value of the
&#8220;l-values&#8221;. So it should actually be:</p>

<pre><code>(defn sort-parts [work]
  (lazy-seq
    (loop [[part &amp; parts] work]
      (println "part/recur'd min:" part)
      (println "parts:           " parts)
      (if-let [[pivot &amp; xs] (seq part)]
        (let [smaller? #(&lt; % pivot)]
          (recur (list*
            (filter smaller? xs)
            pivot
            (remove smaller? xs)
            parts)))
      (when-let [[x &amp; parts] parts]
        (println "FULLRECURSE this has been sorted:" x)
        (cons x (sort-parts parts)))))))

(sort-parts (list [9 1 4 2 6]))
</code></pre>

<p>Ahh so the final <code>(cons x (sort-parts parts))</code> is how we return one
sorted element at a time, because <code>cons</code> returns a Cons and is capable
of being lazy. Can you do a lazy-seq with a recur? Probably not, since
recur is almost just a looping construct. The cons as a return value
makes sense, because it returns (cons x lazy-seq).</p>

<p>REMEMBER: destructuring means the &#8220;rest&#8221; list will be nil if nothing&#8217;s
there.</p>

<pre><code>user=&gt; (let [[x &amp; xs] '(1)] (println xs))
nil
</code></pre>

<p>What&#8217;s the difference between a PersistentList <code>()</code> and a seq?</p>

<p>A seq is any collection that implements the <code>Seq</code> api, i.e. you can call
<code>first</code> and <code>rest</code> on it.</p>

<pre><code>user=&gt; (class (seq '(1)))
clojure.lang.PersistentList
user=&gt; (class '(1))
clojure.lang.PersistentList
</code></pre>

<p>Sometimes collections need to be cast in some way into some derivative
class to efficiently implement <code>seq</code>, e.g. vectors:</p>

<pre><code>user=&gt; (class (seq [1]))
clojure.lang.PersistentVector$ChunkedSeq

user=&gt; (class (rest [1 2 3 4]))
clojure.lang.PersistentVector$ChunkedSeq
</code></pre>

<p>So that <code>recur (list *...</code> bit&#8230; <code>list*</code> won&#8217;t flatten the args you
pass to it, so if the filters/removes yield <code>()</code>, then it might recur
with <code>() 5 ()</code>, which then gets split into <code>part=() parts=(5 ())</code>.
Then the <code>if-let</code> will fail because <code>(seq ())</code> yields nil, and then
when-let does&#8230; wait</p>

<p>What&#8217;s the difference between <code>if</code> and <code>when</code>?</p>

<p>https://groups.google.com/forum/#!topic/clojure/WDIZ6VDhSr0</p>

<p>Basically, <code>if</code> is sa special form with format <code>(if test then else?)</code>.
You must always pass a <code>then</code>, but <code>else</code> is optional, but else is
always the arg right after then. So if you wanted to do multiple things
in <code>then</code>, you&#8217;d need to use a <code>do</code>. e.g.</p>

<pre><code>(if true
  (do
    (println "holy")
    (println "shit")))

(if false
  (do
    (println "holy")
    (println "shit"))
  (println "FALSE!!!"))
</code></pre>

<p>But the format of <code>when</code> doesn&#8217;t have an else based on the number of
args because there&#8217;s an implicit do. It&#8217;s a macro. <code>(source when)</code>:</p>

<pre><code>(defmacro when
  "Evaluates test. If logical true, evaluates body in an implicit do."
  {:added "1.0"}
  [test &amp; body]
  (list 'if test (cons 'do body)))
</code></pre>

<h2>cond :else</h2>

<p>http://stackoverflow.com/a/6323249/914123</p>

<p>Things to remember:</p>

<ol>
<li>:else only seems to idiomatically show up with <code>cond</code></li>
<li><p>:else could be replaced by any truthy thing; Clojure / cond don&#8217;t
specifically look out for it, but because it&#8217;s truthy, it&#8217;ll get
evaluated.</p>

<p> user=>     (cond true 123 true 456)
 123
 user=>     (cond false 123 true 456)
 456</p>

<p> user=> (cond (= 4 5) &#8220;haha&#8221; (= 7 9) &#8220;lol&#8221; :else &#8220;HORSES ASS&#8221;)
 &#8220;HORSES ASS&#8221;
 user=> (cond (= 4 5) &#8220;haha&#8221; (= 7 9) &#8220;lol&#8221; :IAMAMONKEYSASSHOLE &#8220;HORSES ASS&#8221;)
 &#8220;HORSES ASS&#8221;
 user=> (cond (= 4 5) &#8220;haha&#8221; (= 7 9) &#8220;lol&#8221; false &#8220;HORSES ASS&#8221;)
 nil</p></li>
</ol>


<h2>Moscow Mule</h2>

<p>A vodka + ginger beer + lemon juice mixed drink in a copper mug.</p>

<p>http://en.wikipedia.org/wiki/Moscow_mule</p>

<p>Invented in the 50s. There was a vodka craze in the 50s.</p>

<p>http://www.thenibble.com/reviews/main/cocktails/vodka-history.asp</p>

<p>Apparently The Mule kicked off the vodka craze. Then came 60s Bond
saying Vodka Martini, shaken not stirred.</p>

<h2>A fish rots from the head down</h2>

<p>I guess it means that whoever&#8217;s in charge sets the example.</p>

<p>http://www.zdnet.com/article/lennart-poetterings-linus-torvalds-rant/</p>

<blockquote><p>&#8220;If Linux had success, then that certainly happened despite, not because of this [Torvald&#8217;s] behavior. I am pretty sure the damage being done by this is quite obvious, it not only sours the tone in the Linux community, it is also teaches new contributors to adopt the same style, but that&#8217;s only if it doesn&#8217;t scare them away in the first place. In other words: A fish rots from the head down.&#8221;</p></blockquote>

<p>Or &#8220;When an organization or state fails, it is the leadership that is
the root cause.&#8221;</p>

<p>And it&#8217;s not true; guts rot before anything near the fish&#8217;s head.</p>

<h2>We aren&#8217;t all comely young women</h2>

<p>http://www.reddit.com/r/pics/comments/2qdubq/we_arent_all_comely_young_women_some_of_are_old/</p>

<p>comely: pleasant to look at</p>

<h2>systemd</h2>

<p>http://en.wikipedia.org/wiki/Systemd</p>

<p>systemd replaces the <code>init</code> daemon, but also refers to the suite of low
level software surrounding this low level tool for</p>

<h2>Clojure: seq cons list</h2>

<ul>
<li>(seq): returns a seq on the passed-in collection. A seq is just
something that&#8217;s guaranteed to implement <code>first</code> and <code>rest</code>, which is
all you need to iterate through a collection. KEY THING: it doesn&#8217;t
append anything, it just converts to a seq. Note that seq returns
whatever&#8217;s passed to it if it&#8217;s already a seq:
<code>(let [a []] (= (seq a) (seq (seq a))))</code></li>
<li><p>(cons): returns a new seq where x is first el and seq is the rest.</p>

<p>  user=> (def a (lazy-seq (range)))
  user=> (class a)
  clojure.lang.LazySeq</p></li>
<li><p>(list) isn&#8217;t just an API of first/rest but is an actual datatype, a
singly linked list where every item knows its distance from the end.</p>

<p>  user=> (let [a (list 1)] (= a ( seq (seq a))))
  true</p></li>
</ul>


<p>Ughhh how is this possible? It seems like a list is already a seq and
hence doesn&#8217;t need to change in any way to be a seq? A list is a
concrete implementation of seq, one that is so close that no translation
needs to take place in the way a vector would.</p>

<h2>Collections as functions</h2>

<pre><code>([6 7 8] 2)
({:a 123} :a)
</code></pre>

<p>Collections act as functions. Not only can collections act as functions,
but functions can act as data, dem FIRST CLASS SHITS.</p>

<p>First class means</p>

<ul>
<li>createable on demand</li>
<li>can be stored in data structure</li>
<li>can be passed into a fn</li>
<li>can be returned from fn</li>
</ul>


<p>Compose w comp</p>

<pre><code>(def fifth (comp first rest rest rest))
</code></pre>

<p>Create on demand nth fn</p>

<pre><code>(defn fnth [n]
  (apply comp
     (cons first
           (take (dec n) (repeat rest)))))

((fnth 5) '[a b c d e])
</code></pre>

<p>So why is this ok?</p>

<pre><code>user=&gt; (class '[123])
clojure.lang.PersistentVector
user=&gt; (class [123])
clojure.lang.PersistentVector
</code></pre>

<p>Basically the quote means things won&#8217;t be evaluated. You&#8217;re quoting.
Which means you can return symbols without them being evaluated.</p>

<p>Anyway, you apply to comp a cons of (first rest rest rest rest)</p>

<pre><code>user=&gt; (map {:a 3 :b 5} [:a :b])
(3 5)
user=&gt; (map (comp keyword #(.toLowerCase %) name) '(a B C))
(:a :b :c)
</code></pre>

<h2>CURRYING in clojure</h2>

<p>Use <code>partial</code>, but partial isn&#8217;t exactly what you might think.
Specifically, it is not currying because currying keeps returning new
functions until concrete args have been provided for all of its args,
whereas with partial, there&#8217;s no concept of a fixed number of args, but
once you&#8217;ve constructed a function with partial, once you invoke that
partial, it immediately tries to evaluate.</p>

<h2>Complement</h2>

<pre><code>((complement even?) 3)
((comp not even?) 3)
(#(not (even? %)) 3)
</code></pre>

<h2>metadata</h2>

<pre><code>(defn join
  {:test (fn []
            (assert
              (= (join "," [1 2 3]) "1,3,3")))}
  [sep s]
  (apply str (interpose sep s)))
</code></pre>

<p>That&#8217;s kinda rad. There&#8217;s also shorthand:</p>

<pre><code>(defn ^:woot ^:yeah fn-name [] (println "yeah"))

(defn fn-name 
  { :woot true, :yeah true }
  [] (println "yeah"))
</code></pre>

<h2>Higher order fn</h2>

<p>one that either</p>

<ul>
<li>takes 1+ fns as args</li>
<li>returns a fn</li>
</ul>


<h2>holy shit</h2>

<pre><code>user=&gt;    (sort-by second [[:a 7] [:c 31] [:b 21]])
([:a 7] [:b 21] [:c 31])
</code></pre>

<p>or comparing different types as if they were strings</p>

<pre><code>(sort-by str [:b :a {} 5 1 2 "c" "a"])
</code></pre>

<p>or treating keywords as fns</p>

<pre><code>(sort-by :lastname [{ :lastname "Match" } { :lastname "Borf" } { :lastname "Sally" }])
</code></pre>

<p>Remember the function-like things! Like keywords.</p>

<h2>EFT</h2>

<p>Electronic Funds Transfer, a means of payment for various sites that
often just means withdrawing from your checking account, so you gotta
enter routing number account number blah blah blah.</p>

<h2>Pure fn</h2>

<ul>
<li>always returns same result given same arguments</li>
<li>no side effects</li>
</ul>


<h2>referential transparency</h2>

<p>The reference to the function is transparent to time. Time has no
effect. It always does the same thing. But if it changes some internal
(or external) state, then you lose it.</p>

<h2>recursion</h2>

<ul>
<li>mundane: explicitly named recursion, rather than mutual or recur</li>
<li>linear: e.g. one stack per iteration</li>
</ul>


<p>Tail-recursive pow</p>

<pre><code>(defn pow [base exp]
  (letfn [(kapow [base exp acc]
             (if (zero? exp)
                acc
                (recur base (dec exp) (* base acc))))]
         (kapow base exp 1)))
</code></pre>

<p>Two techniques for mundane recursion to tail recursion:</p>

<ul>
<li>use internal helper fn</li>
<li>helper fn uses an accumulator</li>
</ul>


<p>Another way to avoid stack overflow exceptions with mundane recursion is
to pair w lazy-seq.</p>

<h2>Arrow</h2>

<p>The &#8220;thread-first&#8221; macro (AKA &#8220;thrush&#8221; operator?)</p>

<pre><code>http://clojuredocs.org/clojure.core/-%3E

user=&gt; (+ 3 (+ 4 (+ 5)))
12
user=&gt; (-&gt; 5
  #_=&gt;     (+ 4)
  #_=&gt;     (+ 3))
12
</code></pre>

<p>It basically inverts nestings:</p>

<pre><code>user=&gt; (-&gt; "a b c d" 
           .toUpperCase 
           (.replace "A" "X") 
           (.split " ") 
           first)
</code></pre>

<p>Useful for pulling values out of deeply nested shits:</p>

<pre><code>user=&gt; (let [h {:a {:b {:c 123}}}] (-&gt; h :a :b :c))
123
</code></pre>

<h2>Partition</h2>

<pre><code>user=&gt; (partition 2 [1 2 3])
((1 2))
user=&gt; (partition 2 [1 2 3 4])
((1 2) (3 4))
</code></pre>

<p>It&#8217;s like <code>in_groups_of</code>.</p>

<h2>letfn</h2>

<p>Special form. Like <code>let</code> (also a special form), but let bindings are
serial (later bindings can refer to previous bindings, but there are no
forward bindings). <code>letfn</code> bindings can all refer to each other.</p>

<pre><code>(letfn [(a [] (b)) 
        (b [] (println "b"))] 
          (a))
</code></pre>

<p>Prints &#8216;b&#8217;.</p>

<h2>trampoline</h2>

<p>If you have an algo where you&#8217;d like to keep returning 0-arity fns until
finally it returns a non-fn value, trampoline is your source for
non-stack-consuming mutual recursion. Mutual recursion means rather <code>a</code>
calling <code>a</code>, <code>a</code> might call <code>b</code> might call <code>a</code> might call <code>b</code>, etc.
It&#8217;s actually not that crazy of a fn to understand via <code>(source trampoline)</code>.</p>

<pre><code>(defn trampoline
  ([f]
     (let [ret (f)]
       (if (fn? ret)
         (recur ret)
         ret)))
  ([f &amp; args]
     (trampoline #(apply f args))))
</code></pre>

<p><code>trampoline</code> is meant to accept a 0-arity fn. The 2 lines at the bottom
just convert a 2+arity call to trampoline to a call with a zero-arity
fn. Trampoline will</p>

<ul>
<li>call <code>f</code> (with supplied args)</li>
<li>if value returned is a fn, recur (preventing stack consumption)</li>
<li>else return value</li>
</ul>


<p>Wow preeeeeetty freakin simple, and recur makes stuff pretty obvious.</p>

<p>So if I do</p>

<pre><code>(defn do-some-crap []
  (letfn [(a [x] (b x))
          (b [x] (c x))
          (c [x] (d x))
          (d [x] x) ]
            (trampoline a 123)))
</code></pre>

<p>This returns 123 and the chain of a-b-c-d only consumes one stack frame.
Pretty cool. Ahh nevermind I&#8217;m an idiot, i&#8217;m returning values, not
functions, fixed:</p>

<pre><code>(defn do-some-crap []
  (letfn [(a [x] #(b x))
          (b [x] #(c x))
          (c [x] #(d x))
          (d [x] x) ]
            (trampoline a 123)))
</code></pre>

<p>Useful for implementing state machines.</p>

<h2>identity</h2>

<p>Returns its arg:</p>

<pre><code>(identity 5)
</code></pre>

<h2>FICO</h2>

<p>FICO credit scores. Fair Isaac Corporation. Started in 58. Fannie and
Freddie started using their scores in 95. Ubiquitous as fuck.</p>

<p>http://en.wikipedia.org/wiki/FICO</p>

<p>FICO score introduced in 89, based on 3 credit files</p>

<ul>
<li>Experian</li>
<li>Equifax</li>
<li>TransUnion</li>
</ul>


<p>(so people don&#8217;t refer to FICO, but rather FICO polls the 3 above?)</p>

<p>http://en.wikipedia.org/wiki/Credit_score_in_the_United_States#mediaviewer/File:Credit-score-chart.svg</p>

<p>Score composed of</p>

<ul>
<li>35% payment history, presence of derogatory info (defaults, bankruptcies)</li>
<li>30% debt burden, including credit card debt to limit ratio (e.g. if
I&#8217;m $100 in credit card debt, the FICO penalty is smaller if I have a
higher limit).</li>
<li>15% length of credit history: average age of accounts, and age of
oldest account (hence a new CC might temporarily lower score since it
decreases average age).</li>
<li>10% types/diversity of credit:</li>
<li>10% recent searches

<ul>
<li>hard inquiries:

<ul>
<li>applications for loans/CCs count against you, but then again these
are coalesced within 30-45 days as a single query if you&#8217;re &#8220;rate
shopping&#8221;</li>
</ul>
</li>
<li>soft inquiries:

<ul>
<li>consumer queries</li>
<li>applying to rent an apartment</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Hard inquiries look bad because maybe you&#8217;re desperate for credit or
maybe they&#8217;re so frequently because past hard inquiries led to your
rejection. Limit to 1-2 times a year to minimize penalty.</p>

<p>When people say triple credit score, they mean they&#8217;ll show you your
Experian, Equifax, and TransUnion scores.</p>

<p>FICO scores are out of 850. 280 is shitty, 700 is &#8220;good&#8221;, 760+ is
excellent.</p>

<h2>Mortgage</h2>

<p>http://en.wikipedia.org/wiki/Mortgage_loan</p>

<p>The distinguishing characteristic is that real or personal property is
put up as collateral for the loan in the case of default.</p>

<p>Real property refers to legally defined property mixed with human
effort, e.g. houses, roads, etc. Usually means &#8220;land and anything
affixed to it&#8221;, vs private property (&#8220;clothing, furniture, money&#8221;).</p>

<h2>Alternative Financial Services</h2>

<p>http://en.wikipedia.org/wiki/Alternative_financial_services</p>

<p>Pawn shops, paycheck advancements.</p>

<p>In impoverished countries, microfinancing also falls under this
category.</p>

<h2>Catfish</h2>

<p>http://www.urbandictionary.com/define.php?term=catfish</p>

<blockquote><p>A catfish is someone who pretends to be someone they&#8217;re not
using Facebook or other social media to create false identities,
particularly to pursue deceptive online romances.</p></blockquote>

<h2>Installment Credit / Fixed Credit</h2>

<p>Installment: type of credit that has fixed no of payments.</p>

<p>Revolving credit: no fixed payments, can withdraw from balance,
transfer, etc, e.g. credit cards.</p>

<h2>Clojure riddle</h2>

<pre><code>(take 1 (map (fn [a] (println a)) (range)))
(take 32 (map (fn [a] (println a)) (range)))
</code></pre>

<p>Both of these print 0 to 31.</p>

<pre><code>(take 32 (map (fn [a] (println a)) (range)))
</code></pre>

<p>This prints 0-63. Why? I think it has something to do with 32 legged
tries something something. Or chunks. Or something.</p>

<h2>IRAs</h2>

<p>Individual Retirement Account</p>

<p>http://www.rothira.com/traditional-ira-vs-roth-ira</p>

<p>Traditional IRA:</p>

<ul>
<li>deposit pre-tax assets</li>
<li>no income limits</li>
<li>started in 1974 in some congressional act</li>
</ul>


<p>Roth IRA:</p>

<ul>
<li>deposit post-tax assets</li>
<li>early withdraw has 10% penalty, with some exceptions for first house,
education expenses, etc</li>
<li>maximum income enforced of 114k-128k before you can&#8217;t contribute</li>
<li>desirable if you think you&#8217;ll be in a higher tax bracket if you&#8217;re
older (relative to IRA where you&#8217;re taxed when you withdraw, so if
you&#8217;re withdrawing at a higher tax bracket then you&#8217;re boned).</li>
<li>largely targets younger, lower income</li>
<li>established in 1997 after proposed in 89 by someone and senator
William Roth</li>
</ul>


<p>In general there&#8217;s penalties for early withdraw until 59.5 years of age
(who decides this shit?).</p>

<p>401k is where an employee deducts from employee&#8217;s paycheck (optionally
matching) and makes a tax-free deposit. Withdraws are taxed though, like
a traditional IRA.</p>

<p>401k different from IRAs in it&#8217;s a plan optionally provided by an
employer. eg A freelancer can&#8217;t take advantage of a 401k, and not all
employees can take advantage of a company&#8217;s 401k.</p>

<p>All of this to encourage people to save and invest and prepare ourselves
for retirement.</p>

<p>Both IRAs and 401ks have the minimum penalty distribution (withdrawals)
age of 59 1/2 years.</p>

<p>IRAs have limits like $5,500 per a given year. This might change from
year to year though.</p>

<h2>Smart Folder</h2>

<p>http://www.cultofmac.com/48911/100-tips-19-what-are-smart-folders/</p>

<p>AMAZINGLY I have no idea what this is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xorblasm]]></title>
    <link href="http://machty.github.com/blog/2014/12/10/xorblasm/"/>
    <updated>2014-12-10T11:04:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/12/10/xorblasm</id>
    <content type="html"><![CDATA[<h2>Frameless App</h2>

<p>Chromeless app, nothing more than a webview really, for quick
prototyping of mobile web apps.</p>

<p>https://itunes.apple.com/us/app/frameless-full-screen-web/id933580264?mt=8</p>

<h2>Servo</h2>

<p>Parallel browser project written in Rust for parallel execution, memory
safety, etc. Doesn&#8217;t intend to be a full on user-facing browser, but
intends to have other folk build on top of it.</p>

<p>http://blog.servo.org/</p>

<h2>&#8220;use strict&#8221;; as opposed to sloppy</h2>

<p>Non <code>"use strict";</code> mode is AKA sloppy mode.</p>

<h2>Safari inspector learnings</h2>

<p>There are THREE TABS:</p>

<ul>
<li>Resources (ctrl + 1)</li>
<li>Timelines (ctrl + 2)</li>
<li>Debugger (ctrl + 3)</li>
</ul>


<p>They control the middle view, but when active they can be clicked again
to remove the left panel. THAT IS KINDA FUCKED UI, PEOPLE.</p>

<p>Pressing Escape a bunch of times always yields Console, for which there
is a full on console tab, but in Resources (1) and Debugger (2) you can
open a debugger on the bottom, but on Timelines I guess it doesn&#8217;t make
sense to embed that console. Alt+Command+C opens the full on console.
Functionality on full screen console and embedded console seems the
same.</p>

<p>Filter vs Search resources:</p>

<ul>
<li>filter: filename only</li>
<li>search: searches file contents</li>
</ul>


<h2>TIL <code>sessionStorage</code></h2>

<p>Ridiculous, why is this useful? Why is this fundamentally different than
a global var?</p>

<h2>(Safari) Webarchive</h2>

<p>http://en.wikipedia.org/wiki/Webarchive</p>

<p>Save all resources associated w a document, used by Safari.</p>

<p>You can go to Resources tab and click the down arrow to download a
webarchive.</p>

<h2>Tiled Rendering</h2>

<p>Android and pretty much everyone uses tiled rendering.</p>

<p>http://en.wikipedia.org/wiki/Tiled_rendering#cite_note-1</p>

<p>&#8220;Show composited layer borders&#8221; in chrome will show you all the layers
that get uploaded to the GPU, after which the GPU does compositing. So
you paint w CPU and then composite on the GPU.</p>

<h2>Continuous Repaint</h2>

<p>Repaints don&#8217;t happen all the time, but you still might want to identify
which parts of the page are slow to paint, so you can force the renderer
to repaint all the things all the time by enabling this setting, showing
and removing sections.</p>

<p>https://developer.chrome.com/devtools/docs/rendering-settings</p>

<h2>Chrome Timeline Counters</h2>

<ul>
<li>Listeners: [1:4]</li>
</ul>


<p>means that at the start of listening, there was 1 listener, and at the
end, there were 4.</p>

<h2>Sysdig</h2>

<p>http://www.sysdig.org/</p>

<blockquote><p>Think of it as strace + tcpdump + lsof + awesome sauce.</p></blockquote>

<h2>Gradle daemon and parallel</h2>

<p>Add this to your <code>gradle.properties</code>:</p>

<pre><code>org.gradle.daemon=true
org.gradle.parallel=true
</code></pre>

<p>IT DOES WHAT YOU THINK IT DOES.</p>

<h2>Comme de Garcons</h2>

<p>http://en.wikipedia.org/wiki/Comme_des_Gar%C3%A7ons</p>

<p>Heart with eyes logo.</p>

<h2>Cul-de-sac</h2>

<p>http://en.wikipedia.org/wiki/Cul-de-sac</p>

<p>It just means a fucking dead end. DEAD END.</p>

<p>One of these shits:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/b/b2/Cul-de-Sac_cropped.jpg" alt="cul de sac" /></p>

<h2>Live updates in Cordova</h2>

<ul>
<li>HTTP caching

<ul>
<li>Make sure the WebView is set up to cache</li>
<li>Do we have control over that though? What if webview ejects these
items from cache? Can we prevent that?</li>
<li>Assuming full, non-forgetting HTTP caching is an option:

<ul>
<li>user session GET query returns assets that the user should use</li>
<li>webview downloads them; assets are aggressively cached</li>
</ul>
</li>
<li>But what about</li>
</ul>
</li>
</ul>


<h2>HTMLBars attr interpolation</h2>

<pre><code>&lt;div attr=&gt;
</code></pre>

<p>vs
,[</p>

<pre><code>&lt;div attr=""&gt;
</code></pre>

<p>The rule is that quotes ALWAYS means string interpolation. Even if the
above evals to the same thing, the latter goes through a layer of string
interpolation.</p>

<h2>Broccoli funnel</h2>

<p>subset of a tree, matched by regex.</p>

<p>https://www.npmjs.com/package/broccoli-funnel</p>

<h2>Ember-cli-addons</h2>

<p>Hahah of course, just including an ember-cli addon doesn&#8217;t mean</p>

<h2>No property syntax in ES6 class syntax</h2>

<p>This is intentional. You have to set all your properties in the
<code>constructor()</code>.</p>

<h2>popState, router stuff</h2>

<p>I need to fix this:</p>

<p>https://github.com/emberjs/ember.js/pull/9752</p>

<p>Transitions need to be undoable.</p>

<ul>
<li>pushState transition from &#8216;foo&#8217; -> &#8216;bar&#8217;

<ul>
<li>undo: popState</li>
</ul>
</li>
<li>replaceState transition from &#8216;foo&#8217; -> &#8216;bar&#8217;

<ul>
<li>undo: replaceState(&#8216;bar&#8217;)</li>
</ul>
</li>
</ul>


<p>No such support for back button w HashLocation.</p>

<blockquote><p>Clicking back and then clicking forward, and aborting the transition in the willTransition is still broken. The reason is that when I hit back I now the previous route, but when I hit back and then forward again I don&#8217;t have that info.</p></blockquote>

<p>You don&#8217;t have &#8220;forward&#8221;. Like, the URL you&#8217;re going to?</p>

<h2>onpopstate fires for all changes?</h2>

<p>https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#The_popstate_event</p>

<p>Weird.</p>

<p>http://jsbin.com/coxega/1#foo</p>

<p>Poorly named?</p>

<blockquote><p>Browsers tend to handle the popstate event differently on page load. Chrome (prior to v34) and Safari always emit a popstate event on page load, but Firefox doesn&#8217;t.</p></blockquote>

<h2>.npmignore defaults to .gitignore</h2>

<p>nuff said.</p>

<h2>How do preview a publish?</h2>

<p><code>npm pack</code></p>

<p>Then inspect the tgz.</p>
]]></content>
  </entry>
  
</feed>

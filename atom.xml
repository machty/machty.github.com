<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[machty's thoughtz]]></title>
  <link href="http://machty.github.com/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2014-05-12T14:56:35-04:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/12/daily-journal/"/>
    <updated>2014-05-12T13:14:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/12/daily-journal</id>
    <content type="html"><![CDATA[<h2>Ruby <code>Module#===</code></h2>

<p>Ran into <a href="https://github.com/hassox/warden/blob/master/lib/warden.rb#L33-L34">this piece of
code</a>
from the Warden repo:</p>

<pre><code>def self.test_mode!
  unless Warden::Test::WardenHelpers === Warden
    Warden.extend Warden::Test::WardenHelpers
    Warden::Manager.on_request do |proxy|
      unless proxy.asset_request?
        while blk = Warden._on_next_request.shift
          blk.call(proxy)
        end
      end
    end
  end
  true
end
</code></pre>

<p>I hadn&#8217;t seen this usage of <code>===</code> before; I&#8217;m mostly familiar with it as
an unidiomatic alias of <code>is_a?</code>, e.g.:</p>

<pre><code>Array === []    #=&gt; true
[].is_a?(Array) #=&gt; true
</code></pre>

<p><code>#===</code> is the Case Equality operator or
<a href="http://stackoverflow.com/questions/4527220/3-equals-or-case-equality-operator"><em>subsumption</em> operator</a>;
it is overridden by subclasses to provide context-specific / semantic
meaning, for example:</p>

<ul>
<li><code>Regexp === /asd/</code> #=> true</li>
<li><code>Fixnum === 5</code> #=> true</li>
<li><code>Object === {}</code> #=> true</li>
</ul>


<p>Important things to keep in mind about <code>===</code>:</p>

<ol>
<li>It is not commutative (A===B does not imply B===A)</li>
<li>It is a method of the object on the left side of an expression,
e.g. <code>A===B</code> is shorthand for <code>A.===B</code> or <code>A.send(:===, //)</code></li>
<li>It has nothing to do with equality; beware, JavaScripters.</li>
</ol>


<p>ANYWAY: back to the Warden example: in this case, the <code>Module</code> class has
an instance method <code>===</code> that returns if the object on the right side
has extended the methods on the Module that <code>===</code> is called on, so:</p>

<pre><code>module M; end
class Foo; end

f = Foo.new
M === f #=&gt; false

# reopen
class Foo
  include M
end

M === f #=&gt; true
</code></pre>

<p>So we turned <code>===</code> from false to true by including <code>M</code> on class <code>Foo</code>.
The Warden example is similar, except that the way the module&#8217;s methods
were mixed in was via <code>extend</code> vs <code>include</code>. <code>extend</code> is a somewhat more
direct form of <code>include</code> in that it can be called on instances to put
methods directly on that instance, rather than having to open an
instance&#8217;s class and add an <code>include</code> statement, which adds all of those
methods to subclasses.</p>

<p>So when we check</p>

<pre><code>  Warden::Test::WardenHelpers === Warden
</code></pre>

<p>this is the same as <code>WardenHelpers.=== Warden</code>, which translates to
&#8220;return true if Warden has all of WardenHelpers&#8217; methods&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/04/daily-journal/"/>
    <updated>2014-05-04T10:11:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/04/daily-journal</id>
    <content type="html"><![CDATA[<h2>Vim surround</h2>

<p>https://github.com/tpope/vim-surround</p>

<ul>
<li>ysiw] : surround a word in ]</li>
<li>ysiW] : surround a chunk word in ]</li>
<li>cs&#8221;&#8217; : change surrounding &#8221; to &#8217;</li>
<li>ds&#8221; : delete surrounding &#8221;</li>
<li>yss( : wrap line in parens</li>
</ul>


<h2>DAS: Conflicting Principles</h2>

<ul>
<li>User/profile/account

<ul>
<li>All this other stuff that relates to that single giant model</li>
</ul>
</li>
<li>User

<ul>
<li><code>disable!</code></li>
<li><code>send_disable_notication</code></li>
</ul>
</li>
<li>Law of demeter

<ul>
<li>Motivation for decomposition</li>
<li>move controller logic to model <code>enforce_good_standing!</code></li>
</ul>
</li>
<li>User model will get huge; lots of complexity there.</li>
<li>Pull out service classes, e.g. GoodStandingPolicy, or
AccountStandingPolicy

<ul>
<li><code>#initialize(user)</code></li>
<li><code>enforce!</code>

<ul>
<li>still breaks law of demeter.</li>
<li>change <code>cards.all?(&amp;:invalid?)</code> to <code>all_cards_invalid?</code></li>
<li>but this breaks Tell Don&#8217;t Ask

<ul>
<li>TDA means asking an object about properties and deciding what to
do instead of telling it to do things and giving it enough info
to do so.</li>
</ul>
</li>
<li>TDA vs Single Responsibility Principle (SRP)?

<ul>
<li>If you follow TDA, you end up putting responsibility back into
User class, but now User class has much responsibility</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Pick one: SRP often makes sense</li>
</ul>


<h2>DAS: Wrapping Third Party APIs</h2>

<ul>
<li>e.g. accepting Braintree payment from secure redirect back to your
site with data in QPs</li>
<li>BrainTree API objects are deeply nested, causes handling code to suffer</li>
<li>Goal: move traversal of these objs to a different class.</li>
<li>Spec

<ul>
<li>Had to stub deeply nested crap</li>
</ul>
</li>
<li>TDD

<ul>
<li>it &#8220;konws the newest credit card&#8221;</li>
<li>qp is a stub</li>
</ul>
</li>
</ul>


<h2>Pend-out an Rspec test</h2>

<pre><code>it "does something" {}
</code></pre>

<p>can be made pending via <code>xit</code></p>

<pre><code>xit "does something" {}
</code></pre>

<h2>Cisgender</h2>

<p>http://en.wikipedia.org/wiki/Cisgender</p>

<blockquote><p>Cisgender and cissexual (often abbreviated to simply cis) describe
related types of gender identity where an individual&#8217;s experience of
their own gender matches the sex they were assigned at birth.</p></blockquote>

<h2>Hypermedia API</h2>

<p>Hyper = above</p>

<p>Media = well, media, but not just hypertext because more things than
just text can be conveyed</p>

<p>Examples:</p>

<ul>
<li>http://jsonapi.org/</li>
<li>HAL - Hypermedia Application Language</li>
</ul>


<p>Why JSON API over HAL? http://jsonapi.org/faq/</p>

<ul>
<li>HAL embeds child docs recursively; JSON API flattens the entire graph
at the top level.</li>
<li>JSON API uses IDs for linkage (as opposed to HAL&#8217;s what)?</li>
<li>See <a href="https://github.com/dgeb">Dan Gebhart</a>&#8217;s response here re linkage:
https://github.com/json-api/json-api/pull/123/files#r12265234</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal 2]]></title>
    <link href="http://machty.github.com/blog/2014/05/01/daily-journal-2/"/>
    <updated>2014-05-01T22:46:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/01/daily-journal-2</id>
    <content type="html"><![CDATA[<h2>Cryptoballs</h2>

<pre><code>openssl speed rsa
openssl speed aes
</code></pre>

<h3>RSA</h3>

<p>Encryption key is public. Decryption key is secret.
Used for generating symmetric key in TLS.</p>

<p>AES is way faster.</p>

<h2>Active-model serializers</h2>

<p>How do tell an attribute to use a serializer?</p>

<p>Trick question: you don&#8217;t; rather, if it has a serializer, it&#8217;s probably
an association, not an attribute, so you probably want something like</p>

<pre><code>has_many :action_items, serializer: ActionItemSerializer
has_one :originator, serializer: OriginatorSerializer
</code></pre>

<p>and in both cases you can probably remove <code>serializer</code> once you de-stub
<code>action_items</code> and <code>originator</code>.</p>

<h2>QUnit filter</h2>

<p>In Mocha JS test suites if you click a suite header, it&#8217;ll run tests
only from that module or children by way of a <code>grep=blahlbahbl</code> query
param. I&#8217;m using <a href="https://github.com/square/qunit-bdd">qunit-bdd</a>, which
is a layer over QUnit, which generates a bunch of concatenated module
names based on the nested <code>describe</code>s and <code>context</code>s, which doesn&#8217;t let
you easily run all the nested child modules of a top-level describe if
you&#8217;re used to using the Module dropdown on the upper right.</p>

<p>If you want to run a family of describe modules, you can manually
provide a <code>filter</code> query param, e.g.:</p>

<pre><code>http://localhost:4200/tests?filter=LiveQuery
</code></pre>

<p>This runs all modules w &#8220;LiveQuery&#8221; is part of their name.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/01/daily-journal/"/>
    <updated>2014-05-01T08:59:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/01/daily-journal</id>
    <content type="html"><![CDATA[<h2>Normalize / Denormalize</h2>

<p>From <a href="http://en.wikipedia.org/wiki/Database_normalization">Wikipedia</a>:</p>

<p>Database normalization is the process of organizing the fields and
tables of a relational database to minimize redundancy.</p>

<p>Source: Gary Bernhardt saying &#8220;we denormalize by passing in
<code>person_name</code> in addition to the person object&#8221;. Normalizing means
keeping all the data in one place, reducing redundancy. Denormalizing
means redundancy, which normally affords</p>

<p><a href="http://en.wikipedia.org/wiki/Denormalization">Denormalization</a>:</p>

<blockquote><p>In computing, denormalization is the process of attempting to
optimize the read performance of a database by adding redundant
data or by grouping data. In some cases, denormalization
is a means of addressing performance or scalability in relational
database software.</p></blockquote>

<p>Generally speaking, denormalizing means you&#8217;ve duplicated some piece of
data for some reason, probably optimization.</p>

<h2>Stub a method in ruby</h2>

<p>As simple as</p>

<pre><code>def stubbed_method(*args)
  # accept any number of args, do nothing with them.
end
</code></pre>

<h2>Use <code>fetch</code>, not <code>[]</code> for <code>Hash</code> / <code>Array</code></h2>

<p>I already know this, just keep on forgetting to use it;</p>

<pre><code>{}[123] # =&gt; nil
{}.fetch(123) # =&gt; KeyError: key not found: 123
</code></pre>

<h2>Directory stack: <code>pushd</code> / <code>popd</code></h2>

<p>Forgot about this from my Bloomberg days; use <code>pushd</code> and <code>popd</code> for
saving which directory you&#8217;re in (<code>pushd</code>) so that you can screw around,
change directories, and then ultimately <code>popd</code> back to whichever directory
you were in before you ran <code>pushd</code>.</p>

<pre><code>cd /foo/bar/baz
pushd /some/other/dir
pwd # =&gt; /some/other/dir
cd /go/to/some/strange/land
popd
pwd # =&gt; /foo/bar/baz
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/04/28/daily-journal/"/>
    <updated>2014-04-28T14:11:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/28/daily-journal</id>
    <content type="html"><![CDATA[<h2><code>npm install</code> git repos</h2>

<p>NOTE: this section is not complete; placeholding for later.</p>

<p>After many abortive attempts to find the right syntax for running
<code>npm install</code>, I figured I&#8217;d delve into what URL syntax it actually
expected, and why.</p>

<p>Here&#8217;s a bunch of stuff that didn&#8217;t work:</p>

<pre><code>npm install git+ssh@github.com:stefanpenner/ember-cli.git
npm install https://github.com/stefanpenner/ember-cli.git
</code></pre>

<p>Why couldn&#8217;t <code>npm install</code> just figure out what I meant? Well, I don&#8217;t
know, but here&#8217;s a breakdown of the above.</p>

<p><em>This is a helpful resoure: https://help.github.com/articles/which-remote-url-should-i-use</em></p>

<p>Basically, you can clone GitHub repos either with HTTPS or SSH urls. SSH
urls require an SSH keypair to generated on your computer and registered
to your GitHub accounts.</p>

<p>So here&#8217;s the first thing I tried:</p>

<pre><code>https://help.github.com/articles/using-ssh-agent-forwarding
</code></pre>

<p>This is an HTTPS url.</p>

<p>Q: Why does/did GitHub even require a password for cloning a repo?
What&#8217;s insecure about that read info? Possible answer: even if you don&#8217;t
have read access to a repo, a man in the middle might tell you you do,
and then you&#8217;re sending priv data, blah blah blah.</p>

<h2><code>Gdiff</code>, diffing in vim</h2>

<p>This was a very helpful resource:</p>

<p>http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/</p>

<pre><code>:Gdiff
:ls # list all the open buffers in their names
:diffget BUFSPEC # when inside a conflict region,
                 # say which buffer to get content from
:diffput BUFSPEC # when inside a conflict region,
                 # say which buffer to get content from
:only # close all buffer except this one
</code></pre>

<p>I ended up adding the following to my <code>.vimrc.after</code>:</p>

<pre><code>:nnoremap &lt;Leader&gt;dg :diffget &lt;CR&gt;
:nnoremap &lt;Leader&gt;dp :diffput &lt;CR&gt;
</code></pre>

<p>Note that this arg-less form is useful when diffing between local
changes and your last checkin; I use it a bunch for <code>ember-cli</code> when I
call <code>ember init</code> to reset my app structure to the latest <code>ember-cli</code>
blueprint (note that this process is still pretty miserable).</p>

<h2>Broccoli <code>ignoredModules</code> and <code>legacyFilesToAppend</code></h2>

<p>These options come from the <code>broccoli-es6-concatenator</code>.</p>

<ul>
<li><code>ignoredModules</code>: don&#8217;t transpile this module or add it to the list of
importable modules. This is useful when you have a file that&#8217;s already
in AMD format (not ES6), and you want to be able to es6 <code>import</code> that
module, so you put it in <code>ignoredModules</code> so it&#8217;s not treated as an
es6 file that needs to be imported.</li>
<li><code>legacyFilesToAppend</code>: non-es6 files (global libraries) that should be
appended to the end of the final output JS file.</li>
</ul>


<p>Note: <code>loaderFile</code> is automatically added as a legacy files, why, duh,
because the loader file obviously needs to be a global, non-module file.</p>

<p>So, wtf does this mean (the latest iteration of the blueprint
Brocfile.js from ember-cli):</p>

<pre><code>if (app.env !== 'production') {
  push.apply(app.ignoredModules, [
    'qunit',
    'ember-qunit'
  ]);

  push.apply(app.legacyFilesToAppend, [
    'test-shims.js',
    'ember-qunit/dist/named-amd/main.js'
  ]);
}
</code></pre>

<p>Well, thanks to the geniuses in freenode IRC <code>#ember-cli</code>, I&#8217;ve learned
that:</p>

<ul>
<li>This shouldn&#8217;t be in the blueprint Brocfile.js, but rather should be
in the ember-cli lib <code>EmberApp</code> abstraction over the Brocfile.js, but
anyway:</li>
<li>The intent is that by specifying an <code>ignoredModules</code> item, you&#8217;re
basically saying &#8220;I intent to import a module with this name, and
because I&#8217;m opting out of generating it now via an ES6 file, I&#8217;ll be
adding an AMD module for this file later&#8221;</li>
</ul>


<p>And if you try to <code>import something from 'nonexistent-module'</code>, you&#8217;ll
get a loader error.</p>

<p>This all seems really obvious, right? Naw, it&#8217;s really freaking hard for
me to keep in my dumb brain. :(</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/04/26/daily-journal/"/>
    <updated>2014-04-26T14:49:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/26/daily-journal</id>
    <content type="html"><![CDATA[<h2>JavaScript: <code>Object#constructor</code></h2>

<pre><code>function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
console.log(new B().constructor); // "[Function: A]"
</code></pre>

<p>That&#8217;s not what we want. If we use <code>Object.create</code> on a parent class&#8217;s
prototype, you need to also do</p>

<pre><code>B.prototype.constructor = B;
console.log(new B().constructor); // "[Function: B]"
</code></pre>

<p>TL;DR, you must manually set <code>constructor</code> on a subclass&#8217;s prototype to
point to that subclass&#8217;s constructor function, or else <code>.constructor</code>
will refer to a parent class&#8217;s constructor.</p>

<h2>Duck duck go</h2>

<p>Search engine that I should be using.</p>

<h2><code>tree</code></h2>

<p><code>tree</code> is a command you can install with <code>brew install tree</code> that
gives you a visual, recursive display of a folder. Output looks like
this:</p>

<pre><code>app/routes
├── ad.js
├── application.js
├── builds
│   ├── form.js
│   ├── index.js
│   ├── select
│   │   └── index.js
│   └── select.js
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/04/21/daily-journal/"/>
    <updated>2014-04-21T09:41:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/21/daily-journal</id>
    <content type="html"><![CDATA[<p>This is a half-finished journal. Most of the value lies in the fact that
there&#8217;s a crap-ton of flashcards associated with what I learned.</p>

<h2>Unicorn <code>before_fork</code>, <code>after_fork</code>, and <code>preload_app</code></h2>

<p>In a Unicorn setting, shared resources like database connections
need to be disconnected in Unicorn&#8217;s <code>before_fork</code> hook and reconnected
in <code>after_hook</code>. This is so that you don&#8217;t wind up in a situation where
two forked instances of your server try to write to a DB socket at the
same time, which can result in a Protocol Error. This makes sense; if
two protocol-adhering processes write to the socket at the same time,
the message delivered to the other side obviously won&#8217;t adhere to the
protocol. TODO: at what point does this actually break? How bout writing
a quick Ruby script to prove this :) :) :)</p>

<p>Resources:</p>

<ul>
<li>https://devcenter.heroku.com/articles/concurrency-and-database-connections</li>
</ul>


<h2>The difference between a process and a thread</h2>

<p>A Process has:</p>

<ul>
<li>A group of resources</li>
<li>A Thread of Execution</li>
</ul>


<p>The group of resources includes:</p>

<ul>
<li>Address space where program text and data lives in memory</li>
<li>Global variables</li>
<li>Open files</li>
<li>Child processes</li>
<li>Pending alarms</li>
<li>Signals and signal handlers</li>
<li>Accounting information</li>
</ul>


<p>A Thread (of Execution) has:</p>

<ul>
<li>Program counter</li>
<li>Registers (of course these aren&#8217;t shared b/w threads; that&#8217;s crazy)</li>
<li>Stack</li>
<li>State</li>
</ul>


<p>A Thread must execute in a Process, but they are separate entities.</p>

<p>There are multiple types of threads:</p>

<ul>
<li>User-space threads: super-fast thread switching because no kernel trap
is required. Fine-grain control over thread scheduling. Unable to do
blocking I/O though, since this blocks the entire process and all
user threads.</li>
<li>Kernel-threads: can using blocking IO, defers scheduling to the OS,
but each thread switch means a slow kernel trap, but then again if
you&#8217;re blocked by IO you&#8217;re probably in the kernel anyway.</li>
<li>Combined: multiple kernel threads have multiple userspace threads.</li>
</ul>


<p>Resources:
  - http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread/19518207#19518207
  - http://www.amazon.com/dp/0136006639/?tag=stackoverfl08-20
  - http://www.igvita.com/2010/03/22/untangling-evented-code-with-ruby-fibers/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/04/16/daily-journal/"/>
    <updated>2014-04-16T13:31:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/16/daily-journal</id>
    <content type="html"><![CDATA[<h3>Heroku + Unicorn + Rails Logging</h3>

<p>We&#8217;re using Unicorn on Heroku and would like to log just about
everything, particularly incoming JSON request payloads, but it seemed
like the Heroku logs (which we forward to Papertrail) weren&#8217;t properly
logging everything the way they do with <code>rails server</code>.
<a href="http://dave.is/unicorn.html">This article</a> points out the problem and
offers the solution; specifically, <code>rails s</code> adds
<code>Rails::Rack::LogTailer</code> middleware which tails the log files and prints
their contents to <code>stdout</code>, but if you run your server via <code>unicorn</code>,
that middleware doesn&#8217;t get added, so if you want a Unicorn-driven Rails
server to have the same logging behavior as <code>rails s</code>, you&#8217;ll have to
configure the Rails logger to print to STDOUT in
<code>config/application.rb</code>:</p>

<pre><code>config.logger = Logger.new(STDOUT)
config.logger.level = Logger.const_get(
  ENV['LOG_LEVEL'] ? ENV['LOG_LEVEL'].upcase : 'DEBUG'
)
</code></pre>

<h5>Update 4/17/14: Use TaggedLogging</h5>

<p>Actually, if you want to use <code>config</code> options like <code>log_tags</code>, you&#8217;ll
want to use an instance of <code>TaggedLogging</code> instead of <code>Logger</code>:</p>

<pre><code>config.logger = ActiveSupport::TaggedLogging.new(Logger.new($stdout))

# Prepend all log lines with the following tags.
config.log_tags = [
  :uuid,
  -&gt; request {
    request.env["HTTP_USER_AGENT"]
  }
]
</code></pre>

<p>Vanilla <code>Logger</code> doesn&#8217;t make use of the <code>log_tags</code> config, among other
config vars.</p>

<h3>Prevent expensive debug logs</h3>

<p>This is coming from an old ass Railscast, but thought it was cool: if
you do <code>logger.debug "some #{expensive_calc}"</code>, it&#8217;ll only print this
out if your log level is <code>:debug</code>, but the <code>expensive_calc</code> is still
performed; to actually prevent the calculation unless you&#8217;re on
<code>:debug</code>, you can write this as:</p>

<pre><code>logger.debug { "some #{expensive_calc}" }
</code></pre>

<h3><code>Hash#values_at</code></h3>

<p>In Ruby, use <code>Hash#values_at</code> to query a Hash for multiple and return an
array of those values, e.g.</p>

<pre><code>hash = { some: "value", other: "lame value" }
hash.values_at(:some, :other) # =&gt; ["value", "lame value"]
</code></pre>

<p>This plays nicely with multiple assignment:</p>

<pre><code>some,other = hash.values_at(:some, :other)
# now some and other have been assigned values from the hash
</code></pre>

<p>This is the Ruby equivalent of <code>Ember.getProperties(obj, vals)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Flashcards]]></title>
    <link href="http://machty.github.com/blog/2014/04/12/blog-flashcards/"/>
    <updated>2014-04-12T20:38:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/12/blog-flashcards</id>
    <content type="html"><![CDATA[<p>I&#8217;m a very forgetful person and have been looking for a way to integrate
flashcards into my daily routine as a means of keeping track of the
random dev-related things I learn throughout the day, and I think I&#8217;ve
finally cracked the nut:</p>

<p>I&#8217;ve built flashcards into this blog: specifically, for each entry in
this Jekyll/Octopress-based static site, I can optionally specify a list
of flashcards in the YAML configuration, and these flashcards get
compiled at site generation/deployment time and uploaded to
<a href="http://Cram.com">Cram</a>, a free site for hosting flashcards (they also
have nice iOS/Android apps).</p>

<p>The point of all of this is that part of the blog-writing process will
be to jot down some quick flashcards for myself and everyone else who
might be interested in having a quizzable TL;DR for each entry. Of
course, it all comes down to how committed I remain to writing regular
blog entries, but I think it&#8217;s a pretty cool idea and I&#8217;d love it if
other bloggers I followed did something similar (or accepted pull
requests from community flashcard-writers).</p>

<p>You can check out all the flashcards associated with this blog
<a href="http://www.cram.com/flashcards/alexmatchneercom-4692833">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember CLI and NPM fights]]></title>
    <link href="http://machty.github.com/blog/2014/04/12/ember-cli-and-npm-fights/"/>
    <updated>2014-04-12T18:30:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/12/ember-cli-and-npm-fights</id>
    <content type="html"><![CDATA[<p>Daily Journal: 4/12/14</p>

<p>I&#8217;ve been giving <a href="https://github.com/stefanpenner/ember-cli">ember-cli</a>
a whirl the last few days; it&#8217;s still extremely alpha but it&#8217;s extremely
cool. It leverages <a href="https://github.com/joliss/broccoli">Broccoli</a> as a
highly performant build tool, which minimifies the amount of rebuilding
that must occur when a file changes in your project; in this way it&#8217;s a
major improvement over previous iterations of Ember tooling, such as
<a href="https://github.com/stefanpenner/ember-app-kit">Ember App Kit</a>, which
falls prey to all of the gotchas involved with teaching Grunt, a
JavaScript task runner, to act like a build tool, but because Grunt
doesn&#8217;t have any built-in primitives for describing/tracking
dependencies between files, or any other primitives convenient for use
as a build tool without a plethora of plugins/addons, it&#8217;s very
difficult to arrive at a Grunt setup that:</p>

<ol>
<li>Minimizes rebuilding in response to file changes</li>
<li>Has configuration that is easy to reason about</li>
<li>Locks your server during rebuilds (so that you&#8217;re not serving
files from a half-compiled project folder)</li>
</ol>


<p>Anyway, onward to stuff I actually learned.</p>

<!-- more -->


<h3><code>npm link</code> to locally develop <code>ember-cli</code></h3>

<p><code>npm install -g ember-cli</code> installs <code>ember-cli</code> globally so that its
binaries are installed and accessible to the whole system. But what
about if you&#8217;re contributing to <code>ember-cli</code> and want to test the binary
you&#8217;re actively developing?</p>

<pre><code>git clone https://github.com/stefanpenner/ember-cli
cd ember-cli

# Point ember-cli binaries to this project folder
npm link
</code></pre>

<p>Now when you run the <code>ember</code> command it&#8217;ll run the code in your local
development <code>ember-cli</code>. I verified this by doing
<code>git checkout SOME_OLD_TAG</code> and running <code>npm link</code> again, and then
when I ran <code>ember --version</code>, it spat out the version I&#8217;d just checked
out. Baby stuff, right? Maybe, but I find the node world mysterious and
frightening and this was a nice sanity check.</p>

<p>Now, if you create a new Ember project via <code>ember new some-proj</code>, it may
come as a surprise that <code>ember-cli</code> libraries installed in
<code>some-proj/node_modules</code> is not the local <code>ember-cli</code> that you
<code>npm link</code>&#8216;ed; this seems ok to me as a default, but if you also want
your <code>ember new</code>-generated project to internally use your local
<code>ember-cli</code> code, <code>cd</code> into <code>some-proj</code> and then run
<code>npm link ember-cli</code>, which will install symlinks in <code>node_modules</code>
pointing <code>ember-cli</code> to the same place that your development <code>ember-cli</code>
was linked into:</p>

<pre><code>some-proj:: ls -l node_modules/ember-cli
lrwxr-xr-x  1 machty  staff  37 Apr 12 17:05 node_modules/ember-cli -&gt; /usr/local/lib/node_modules/ember-cli
</code></pre>

<p>I find the overloading of <code>npm link</code> here extremely confusing; the
present/absence of the last param to <code>npm link</code> causes the command to
do drastically different things, but maybe that&#8217;s just me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily thoughts]]></title>
    <link href="http://machty.github.com/blog/2014/04/12/daily-thoughts/"/>
    <updated>2014-04-12T18:16:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/12/daily-thoughts</id>
    <content type="html"><![CDATA[<p>Long time no blog, been busy with Ember stuff. Much has transpired since
the last post, including getting added to Ember Core, making the Ember
router reasonable, and other things. About time I get back into the
blog-groove. Don&#8217;t expect quality; I&#8217;m probably gonna use this to jot
down daily learnings because I am immensely forgetful, which rears its
ugly head when I spend hours / days on a hard problem, only to forget
the various realizations that would prevent me from having to solve the
same shit over and over again. It&#8217;s gotten pretty bad; hopefully this
will help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Jeopardy]]></title>
    <link href="http://machty.github.com/blog/2013/03/29/ember-jeopardy/"/>
    <updated>2013-03-29T15:36:00-04:00</updated>
    <id>http://machty.github.com/blog/2013/03/29/ember-jeopardy</id>
    <content type="html"><![CDATA[<p>At last night&#8217;s <a href="http://www.meetup.com/EmberJS-NYC/events/106490682/">NYC Ember Meetup</a>,
I led the gang through a somewhat enduring session of Jeopardy,
featuring a ton of different Ember.js trivia questions. The app itself
was written in Ember.js and the source code is mostly good, and
certainly well-commented. Have a look see:</p>

<p><a href="http://ember-jeopardy.herokuapp.com/">Ember Jeopardy</a></p>

<p><a href="https://github.com/machty/ember-jeopardy">Source code</a></p>

<p>It&#8217;s (somewhat needlessly) hosted within a Rails app, but you can find the
Ember-specific code in <code>app/assets/javascripts/</code>. It presently only
works on non-retina Safari/Chrome, given all the 3D stuff going on, but
if you can figure out how to slay the remaining CSS3 demons, I&#8217;d
definitely appreciate a pull request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbing Date::valueOf for Benefit of Make Great Good Determinism]]></title>
    <link href="http://machty.github.com/blog/2013/03/24/stubbing-date-valueof-for-benefit-of-make-great-good-determinism/"/>
    <updated>2013-03-24T13:20:00-04:00</updated>
    <id>http://machty.github.com/blog/2013/03/24/stubbing-date-valueof-for-benefit-of-make-great-good-determinism</id>
    <content type="html"><![CDATA[<p>Quick thing: if you ever find yourself in the situation of writing
JavaScript test cases that involve <code>setTimeout</code> or some other timer
logic where the order of timers firing is the subject of testing, you
might find this trick handy to get rid of brittle, non-deterministic
test cases.</p>

<p>In short, you can stub out the <code>Date</code> class&#8217;s <code>valueOf</code> method to return
a value you expect for the duration of the test case.</p>

<!-- more -->


<h2>The Problem</h2>

<p>I recently did some work on Ember.js&#8217;s run loop, particularly improving
a few oddities about <code>Ember.run.later</code>, and adding better coverage to
their run loop test suite. But we were noticing that one of my test
cases would very occasionally fail, most often when the testing
workstation was under heavy computational load. The problem, boiled down
to its essence, was that I&#8217;d made the poor assumption that consecutive
calls to <code>+ new Date()</code>, a shorthand for returning the number of
milliseconds from 1970, would return the same value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456789 &lt;-- boom</span>
</span></code></pre></td></tr></table></div></figure>


<p>Duh, right? Time does have a weird OCD habit of elapsing, but I needed,
for the assumptions of
<a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-metal/tests/run_loop/later_test.js#L114">this particular test</a>,
the JavaScript clock to return the same value for consecutive calls to
<code>+ new Date</code>.</p>

<h2><code>Date::valueOf</code></h2>

<p>Turns out that the function ultimately called when using the <code>+ new Date</code>
shorthand is the <code>valueOf</code> function on the <code>Date</code> class. That&#8217;s where
the numeric millisecond return value comes from.</p>

<p>The solution to the test case&#8217;s brittleness was to force all the
consecutively-run timer-dependent code to all get the same numeric
millisecond value from their own internal calls to <code>+ new Date</code>. To do
this, I stubbed the <code>valueOf</code> function as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">originalDateValueOf</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">;</span>
</span><span class='line'><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">valueOf</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">now</span> <span class="p">};</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456788</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... it will continue to return this value until</span>
</span><span class='line'><span class="c1">// I return `valueOf` back to its original native function.</span>
</span><span class='line'><span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">valueOf</span> <span class="o">=</span> <span class="nx">originalDateValueOf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// 123456789</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, there you have it when you need it; stubbed determinism when futzing
with JavaScript timers.
<a href="https://github.com/emberjs/ember.js/pull/2341/files">Here&#8217;s</a> how it
looked in the fixed Ember.js run loop test case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NYC Ember.js Meetup Run Loop Slides]]></title>
    <link href="http://machty.github.com/blog/2013/02/28/nyc-ember-dot-js-meetup-run-loop-slides/"/>
    <updated>2013-02-28T21:22:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/02/28/nyc-ember-dot-js-meetup-run-loop-slides</id>
    <content type="html"><![CDATA[<p>Just did a talk on the Ember run loop at the
<a href="http://www.meetup.com/EmberJS-NYC/">NYC Ember.js Meetup</a>.
You can check them out
<a href="http://machty.github.com/blog/ember_run_loop_talk">here</a>.
There&#8217;s also a blurb on the <code>ember-source</code>, <code>handlebars-source</code> stuff
I <a href="http://machty.github.com/blog/2013/02/27/gemifying-ember-dot-js-slash-handlebars-dot-js-slash-etc-dot-js/">wrote about
yesterday</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slaying the Ember/Handlebars JS-RB Dependency Demons with Gem Wrappers]]></title>
    <link href="http://machty.github.com/blog/2013/02/27/gemifying-ember-dot-js-slash-handlebars-dot-js-slash-etc-dot-js/"/>
    <updated>2013-02-27T23:28:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/02/27/gemifying-ember-dot-js-slash-handlebars-dot-js-slash-etc-dot-js</id>
    <content type="html"><![CDATA[<p>Ember.js devotees may have noticed a series of related commits that I
put in recently with reference to &#8220;removing vendored .js files in favor
of ember-source, handlebars-source, etc&#8221;, or something of the like.
They&#8217;re all checked in now, and I think they&#8217;ve gone a long way towards
alleviating the dependency hell stemming from multiple gems packaging
vendored .js files.</p>

<p>For a better understanding of the motivation behind these
changes and how they might affect you, read on.</p>

<!--more-->


<h2>The Problem</h2>

<p>You&#8217;re using <code>ember-rails</code> to build an Ember v1.0.0.pre4 app hosted by your Rails
server. Your Handlebars (or <a href="http://emblemjs.com">Emblem</a>) templates are
being precompiled by the <a href="https://github.com/tchak/barber">barber gem</a>
used by <code>ember-rails</code>, which uses Handlebars.js rc2.</p>

<p>You wisely decide to upgrade to Ember v1.0.0.rc1, only to find that
Ember rc1 now depends on Handlebars rc3 (instead of rc2). Even though
you&#8217;ve overridden <code>ember-rails</code> to serve the latest Ember and Handlebars
to the browser, the <code>barber</code> gem is still using its Handlebars rc2 to
compile your templates, and when you run your app, you&#8217;re greeted with
the following error.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ember Handlebars requires Handlebars 1.0.0-rc.3 or greater</span></code></pre></td></tr></table></div></figure>


<p>You hurriedly submit a pull request to <code>barber</code> with a freshly bundled
handlebars rc3 along with 8 other people, but Parisian Paul won&#8217;t be
awake for another 8 hours to merge the PR, so you duck-punch your way to
temporary solution, cluttering your app with its very own vendored
Handlebars.js.</p>

<p>The situation normalizes in a few days, only to repeat itself for the
next backwards-incompatible version bump.</p>

<h2>Lightweight Gem Wrappers around JS Libs</h2>

<p>To prevent this sort of thing from happening in the future, there&#8217;s a
now a lightweight gem wrapper for the following:</p>

<ul>
<li><a href="https://rubygems.org/gems/handlebars-source">handlebars-source</a></li>
<li><a href="https://rubygems.org/gems/ember-source">ember-source</a></li>
<li><a href="https://rubygems.org/gems/ember-data-source">ember-data-source</a></li>
<li><a href="https://rubygems.org/gems/emblem-source">emblem-source</a></li>
</ul>


<p>These gems contain nothing more than .js files and just enough Ruby code
to help you determine an absolute path to the .js file contained within
the gem. Example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;handlebars/source&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">context</span> <span class="o">=</span> <span class="no">ExecJS</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">Handlebars</span><span class="o">::</span><span class="no">Source</span><span class="o">.</span><span class="n">bundled_path</span><span class="p">))</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">context</span><span class="o">.</span><span class="n">call</span> <span class="s1">&#39;Handlebars.precompile&#39;</span><span class="p">,</span> <span class="s1">&#39;{{hello}}&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="c1"># function (Handlebars,depth0,helpers,partials,data) {</span>
</span><span class='line'><span class="c1">#   this.compilerInfo = [2,&#39;&gt;= 1.0.0-rc.3&#39;];</span>
</span><span class='line'><span class="c1">#   helpers = helpers || Handlebars.helpers; data = data || {};</span>
</span><span class='line'><span class="c1">#   var stack1, functionType=&quot;function&quot;, escapeExpression=this.escapeExpression;</span>
</span><span class='line'><span class="c1"># </span>
</span><span class='line'><span class="c1">#   if (stack1 = helpers.hello) { stack1 = stack1.call(depth0, {hash:{},data:data}); }</span>
</span><span class='line'><span class="c1">#   else { stack1 = depth0.hello; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }</span>
</span><span class='line'><span class="c1">#   return escapeExpression(stack1);</span>
</span><span class='line'><span class="c1">#   }</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the time of writing, most of the gems you&#8217;d ever use for your Ember
projects use these gems, and since they don&#8217;t specify dependencies upon
any particular versions of these gems, the app using these gems has full
control over which versions of the JS libs these gems will use for
precompiling, asset packaging, etc.</p>

<p>So, coming back to the dependency hell scenario above, if you&#8217;re writing
an app in Ember rc1, and Ember rc2 comes out with a dependency on a
new, backwards incompatible Handlebars, all you have to do to upgrade to
the latest Ember/Handlebars and have your precompilation /
asset-packaging libs do the same is put the following in your Gemfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'ember-source', '1.0.0.rc2'</span></code></pre></td></tr></table></div></figure>


<p>And run <code>bundle update ember-source</code>. <code>ember-source</code> has a dependency on
a particularly version range of <code>handlebars-source</code>, so that&#8217;ll be
updated to an appropriate version as well, and all the gems that use
<code>ember-source</code> and <code>handlebars-source</code> will magically start using the
new .js files.</p>

<h2>Caveat</h2>

<p>The versions chosen for the <code>____-source</code> gems match as closely as possible
the current version of the bundled JS lib. The only problem with this is
that the latest Ember and Handlebars versions are release candidates,
and the letters in the versions (e.g. <code>1.0.0.rc1</code>) trigger special
(annoying) pre-release version resolution logic for both RubyGems and
Bundler.  All this means is that you have to be very specific about
the version of <code>____-source</code> you want to use, and you won&#8217;t be able to
use the pessimistic <code>~&gt;</code> version operator, since that&#8217;ll kick out to the
nearest non-pre-release version of the gem it can find, rather than
staying within the bounds of an <code>rc</code> sub-version. So, TL;DR, do the
following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;ember-source&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0.rc1.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This won&#39;t work.</span>
</span><span class='line'><span class="c1"># gem &#39;ember-source&#39;, &#39;~&gt; 1.0.0.rc1.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Appendix: Getting the .js files out of the <code>___-source</code> gems</h2>

<p>Handlebars:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;handlebars-source&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Code</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;handlebars/source&#39;</span>
</span><span class='line'><span class="no">Handlebars</span><span class="o">::</span><span class="no">Source</span><span class="o">.</span><span class="n">bundled_path</span> <span class="c1"># =&gt; &quot;/Users/.../handlebars.js&quot;</span>
</span><span class='line'><span class="no">Handlebars</span><span class="o">::</span><span class="no">Source</span><span class="o">.</span><span class="n">runtime_bundled_path</span> <span class="c1"># =&gt; &quot;/Users/.../handlebars.runtime.js&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ember / Ember Data:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;ember-source&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;ember-data-source&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Code</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ember/source&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ember/data/source&#39;</span>
</span><span class='line'><span class="no">Ember</span><span class="o">::</span><span class="no">Source</span><span class="o">.</span><span class="n">bundled_path_for</span><span class="p">(</span><span class="s2">&quot;ember.js&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;/Users/.../ember.js&quot;</span>
</span><span class='line'><span class="no">Ember</span><span class="o">::</span><span class="no">Data</span><span class="o">::</span><span class="no">Source</span><span class="o">.</span><span class="n">bundled_path_for</span><span class="p">(</span><span class="s2">&quot;ember-data.js&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;/Users/.../ember-data.js&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emblem.js - Indented templating targeting Handlebars.js and Ember.js]]></title>
    <link href="http://machty.github.com/blog/2013/01/27/emblem-dot-js-indented-templating-targeting-handlebars-dot-js-and-ember-dot-js/"/>
    <updated>2013-01-27T14:13:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/01/27/emblem-dot-js-indented-templating-targeting-handlebars-dot-js-and-ember-dot-js</id>
    <content type="html"><![CDATA[<p>I wrote a templating language called
<a href="https://github.com/machty/emblem.js">Emblem</a> which you can use instead
of Handlebars to write templates for your views in Ember.js (and soon,
in any other setting). It&#8217;s still very new, and I definitely have more
planned as far as syntax enhancements/refinements, but what&#8217;s there is
pretty solid and I hope you&#8217;ll take it for a test drive and give me some
feedback, or better yet submit a PR or two.</p>

<p>You can check out a zany little demo <a href="http://jsbin.com/ulegec/17/edit">here</a>, which
gives you an opportunity to try out some syntactical experiments
yourself.</p>

<p>Aaand
<a href="https://speakerdeck.com/machty/emblem-dot-js-ember-targeting-indentation-based-templates">here</a>
are the slides from the presentation at made at the NYC Ember.js meetup
I made this week. The rest of this post goes into some of the
motivation and architecture behind Emblem.</p>

<!-- more -->


<h2>Motivation</h2>

<p>Here&#8217;s what Handlebars (in an Ember setting) looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;main-container&quot;</span> <span class="na">class=</span><span class="s">&quot;padded active&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Greetings, {{name}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>  {{! comment that doesn&#39;t get rendered. }}
</span><span class='line'>
</span><span class='line'>  {{#if loggedIn}}
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="na">logout</span><span class="err">}}</span><span class="nt">&gt;</span>Log Out<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  {{else}}
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="na">login</span><span class="err">}}</span><span class="nt">&gt;</span>Log In<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  {{/if}}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;text-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {{#each paragraphs}}
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>{{{this}}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    {{/each}}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and here&#8217;s the equivalent Emblem.js code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#main-container.padded.active
</span><span class='line'>  h1 Greetings, {{name}}
</span><span class='line'>
</span><span class='line'>  / comment that doesn't get rendered
</span><span class='line'>
</span><span class='line'>  if loggedIn
</span><span class='line'>    button click="logout" Log Out
</span><span class='line'>  else
</span><span class='line'>    button click="login" Log In
</span><span class='line'>
</span><span class='line'>  .text-container
</span><span class='line'>    each paragraphs
</span><span class='line'>      p == this
</span><span class='line'>
</span><span class='line'>  / Could also write the 
</span><span class='line'>    .text-container = each paragraphs
</span><span class='line'>      p == this</span></code></pre></td></tr></table></div></figure>


<p>Note how indentation is used to determine what gets placed inside HTML
elements or block Handlebars helpers. This prevents a lot of unnecessary
typing and keeps your code very neat (note that this certainly isn&#8217;t a
new idea, see HAML/Slim/Jade/Python/etc).</p>

<p>More importantly, while Ember.js lets you use any templating language
you&#8217;d like, if you use something other than Handlebars, you miss out an
all of Ember&#8217;s lovely data-binding functionality, which allows templates
to re-render themselves when the data they&#8217;re tied to changes.</p>

<p><img src="http://machty.github.com/images/onedoesnot.png" alt="one does not simply use data-binding non-handlebars templates" /></p>

<p>One of the hacks I used to allow me to write indentation-based templates
that played nicely with Ember was to use Hamlbars, a light-weight
wrapped around HAML that exposed an <code>hb</code> helper to the HAML code which
could be used to generate the  mustache&#8217;d Handlebars code, that
Handlebars would then process as if you&#8217;d just written the mustache&#8217;d
HTML yourself. A Hamlbars version of the above example would go as
follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nf">#main-container</span><span class="nc">.padded.active</span>
</span><span class='line'>  <span class="nt">%h1</span> Greetings, {{name}}
</span><span class='line'>
</span><span class='line'>  <span class="cp">-# comment that doesn&#39;t get rendered</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">=</span> <span class="n">hb</span> <span class="s1">&#39;if loggedIn&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nt">%button</span><span class="p">{</span> <span class="n">_action</span><span class="p">:</span> <span class="s2">&quot;logout&quot;</span> <span class="p">}</span> Log Out
</span><span class='line'>    <span class="p">=</span> <span class="n">hb</span> <span class="s1">&#39;else&#39;</span>
</span><span class='line'>    <span class="nt">%button</span><span class="p">{</span> <span class="n">_action</span><span class="p">:</span> <span class="s2">&quot;login&quot;</span> <span class="p">}</span> Log In
</span><span class='line'>
</span><span class='line'>  <span class="nc">.text-container</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">hb</span> <span class="s1">&#39;each paragraphs&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="nt">%p</span>
</span><span class='line'>        <span class="p">=</span> <span class="n">hbb</span> <span class="s1">&#39;this&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I prefer this over Handlebars, but it&#8217;s still extremely jank, due to the
<code>hb</code> helper showing up all over the place and the fact that you can&#8217;t
properly indent the <code>else</code> the way you&#8217;d expect without closing the
 tag before injecting the <code>else</code>.</p>

<p>So, with all this in mind, I wrote Emblem.js for the following reasons:</p>

<ol>
<li>I hate writing HTML, particularly typing angle brackets and
backslashes and closing tags.</li>
<li>Hamlbars is still mad jank.</li>
<li>Beyond fixing issues inherent in Handle/Hamlbars, I had a lot of
ideas for a clean, flexible, Ember-targeting syntax.</li>
<li>I wanted to learn how to write a parser.</li>
</ol>


<h2>Solution: Emblem.js</h2>

<p>Emblem.js saves the day as follows:</p>

<ol>
<li>It&#8217;s indentation-based</li>
<li>It internally compiles to Handlebars, and therefore has access to all
of Handlebars&#8217; features/helpers, including the ability to bind to
data in an Ember context</li>
<li>It spares you all sorts of ugly markup prefix characters by assuming
that either an html element or handlebars property/helper lookup
starts a line. They&#8217;re equally first-class citizens, the second-class
citizen being line-starting text, which can be easily specified using
the <code>|</code> prefix.</li>
<li>It&#8217;s all in JS, so you can compile in the browser.</li>
</ol>


<h3>HTML elements and HB Helpers as equal first-class citizens</h3>

<p>Check out the following valid Emblem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p Hello
</span><span class='line'>  foo Hello</span></code></pre></td></tr></table></div></figure>


<p>Emblem doesn&#8217;t intermediately compile to Handlebars input text, but if
it did, the above code would generate something like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;p&gt;</span>Hello<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  {{foo Hello}}
</span></code></pre></td></tr></table></div></figure>


<p>So, a paragraph tag and helper invocation. How does Emblem know the
difference? Answer: Emblem looks out for the known HTML helpers and
assumes everything else that starts a line is a Handlebars mustache
invocation. This is bound to raise an eyebrow and furrow the other for
some people, but 1) Why would you name your helpers the same things as
HTML tags, and 2) If you really need custom elements (future versions
of) Emblem allow you to escape these elements either by specifying a
whitelist in your build tools or simply by preceding your non-standard
HTML with a <code>%</code>, similar to what HAML makes you do all the time. But
such corner cases should be very rare in the typical front-end dev
workflow.</p>

<h2>How&#8217;s it built?</h2>

<p>Emblem takes your code and does the following:</p>

<ol>
<li>Runs the code through a preprocessor to strip empty lines and
validate indentation, replacing indentation starts with an <code>INDENT</code>
token and indentation ends with a <code>DEDENT</code> token.</li>
<li>Passes the pre-processed and lightly tokenized code through a PEG.js
parser, which returns an Abstract Syntax Tree (AST) of Handlebars
nodes.</li>
<li>Passes the HB AST to the Handlebars compiler, which generates the
template function that Ember (and other frameworks) can use.</li>
</ol>


<h3>PEG.js</h3>

<p><a href="http://pegjs.majda.cz/">PEG.js</a> is a JavaScript implementation of
a <a href="http://en.wikipedia.org/wiki/Parsing_expression_grammar">PEG compiler</a>.
With PEG.js, you define a parser&#8217;s grammar in a <code>.pegjs</code> file, then use
PEG.js to generate a compiler based on the provided grammar. You can
return anything you want from a PEG-based compiler, but it&#8217;s most common
to return some form of tree structure, since those are easy for
compilers to work with. In Emblem&#8217;s case, the object returned from the
PEG parser is a Handlebars AST (the same that would have been generated
if you&#8217;d used Handlebars&#8217; Jison compiler to parse Handlebars code).</p>

<p>One thing to note about PEG is that it is a context-free parser, which
basically means that (without cheating) your PEG grammar can&#8217;t rely on
changes in state to do its parsing. An example of &#8220;state&#8221;
would be, say, the current level of indentation of an Emblem template;
you can&#8217;t write grammar code that says, &#8220;ok, now that I&#8217;m at level 2
indentation, I can handle 1 or 2 de-indentations, but I must throw an error
if I encounter 3 de-indentations.&#8221; Rather, pure PEG requires that you
must always specify sequences of tokens that you universally expect to
encounter, regardless of the current state of the parser. The solution
to this is to first run your code through a preprocessor, which isn&#8217;t
context-free, which will convert anything state-dependent to tokens that
PEG can reason about in a context-free setting. In Emblem&#8217;s case, this
meant taking code like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  p
</span><span class='line'>    span What's up</span></code></pre></td></tr></table></div></figure>


<p>and pre-processing it into</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  p&lt;TERM&gt;&lt;INDENT&gt;span What's up&lt;TERM&gt;&lt;DEDENT&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now that it&#8217;s in the tokenized form, you could write PEG grammar like
the following, which will match the above <code>p</code> as an
<code>htmlTagAndOptionalAttributes</code> and detect (due to the indentation) that
the <code>span What's up</code> is the nested content in the (optional) block.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>htmlElementMaybeBlock = h:htmlTagAndOptionalAttributes _ TERM c:(INDENT content DEDENT)? </span></code></pre></td></tr></table></div></figure>


<p>This technique is how Emblem decides whether a certain line of Emblem
code is in block form or not, whether it&#8217;s a Handlebars helper or an HTML element.</p>

<h2>Conclusion</h2>

<p>Writing Emblem.js was extremely challenging yet extremely rewarding. If
you&#8217;ve never written anything like a parser before, definitely give it a
go.</p>

<p>Emblem&#8217;s getting there, but it&#8217;s still not as polished as I would like.
I&#8217;d definitely appreciate whatever help I can get, so if you&#8217;re feeling
saucy, check out the <a href="https://github.com/machty/emblem.js">Github Repo</a>, and submit
a PR. I&#8217;ll continue to post updates to the syntax over the coming weeks.
Let me know how you think it&#8217;s shaping up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly Peruse Gem Source: Vim + Tmux + bundle open]]></title>
    <link href="http://machty.github.com/blog/2013/01/13/quickly-peruse-gem-source-vim-plus-tmux-plus-bundle-open/"/>
    <updated>2013-01-13T15:45:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/01/13/quickly-peruse-gem-source-vim-plus-tmux-plus-bundle-open</id>
    <content type="html"><![CDATA[<p>Ever find yourself
working on a project and needing to dig into the source code of a Gem
you&#8217;re using? In the past I used to just go to the github for that gem
and use their project explorer, searching for particular commands using
their ultra helpful <code>t</code> command, but I got sick of having to do that, so
I found a better way using Vim + tmux + <code>bundle open</code>. The result is a
command I can run in Vim, which autocompletes gem names by looking
through <code>Gemfile.lock</code>, which splits the current tmux pane and runs a
new instance of Vim in the root directory of the Gem I&#8217;m looking for.</p>

<p>Even if you don&#8217;t
share my exact configuration, you might learn something about any of the
following: Tmux, Vim, <code>bundle open</code>, and some Unix commands, and the end
result code is pretty easily modifiable.</p>

<!-- more -->


<h2>My setup</h2>

<p>I do all my work on the <a href="http://www.iterm2.com" title="iTerm2">iTerm2</a>
terminal, using <a href="http://tmux.sourceforge.net/">tmux</a> as better
screen-splitting replacement for <code>screen</code>, and Vim as my editor
(with the <a href="https://github.com/carlhuda/janus">Janus</a> plugin bundle).</p>

<p><img src="http://machty.github.com/images/tmuxsetup.jpg"></p>

<p>I figured the easiest way for me to address the above need for quick Gem
source code perusal would be to split my Vim pane and open a new
instance of Vim in the root directory of the Gem source code.
<code>bundle open</code> to the rescue.</p>

<h2><code>bundle open</code></h2>

<p><code>bundle open &lt;GEMNAME&gt;</code> will open whatever editor you&#8217;ve provided in the
<code>$EDITOR</code> environment variable to the root of the provided gem name.
Thanks to <a href="https://github.com/ghempton">Gordon</a> for keying me into this;
it&#8217;s extremely useful.</p>

<h2>Custom Vim command</h2>

<p>Here&#8217;s what I ended up throwing into my .vimrc (actually .vimrc.after
since I&#8217;m using Janus).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Split current tmux window, running `bundle open` on the </span>
</span><span class='line'><span class="c">&quot; argument-specified Gem name. Auto-completes from Gemfile.lock.</span>
</span><span class='line'>command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>* <span class="p">-</span><span class="nb">complete</span><span class="p">=</span>custom<span class="p">,</span>ListGems BundleOpen <span class="k">silent</span> execute <span class="s2">&quot;!tmux splitw &#39;bundle open &lt;args&gt;&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; The function used to produce the autocomplete results.</span>
</span><span class='line'><span class="k">fun</span> ListGems<span class="p">(</span>A<span class="p">,</span>L<span class="p">,</span><span class="k">P</span><span class="p">)</span>
</span><span class='line'><span class="c">  &quot; Note that vim will filter for us... no need to do anything with A args.</span>
</span><span class='line'>  <span class="k">return</span> system<span class="p">(</span><span class="s2">&quot;grep -s &#39;^ &#39; Gemfile.lock | sed &#39;s/^ *//&#39; | cut -d &#39; &#39;  -f1 | sed &#39;s/!//&#39; | sort | uniq&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfun</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Shortcut mapping.</span>
</span><span class='line'>nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">o</span> :BundleOpen
</span></code></pre></td></tr></table></div></figure>


<p>Basically, <code>command!</code> declares the command that tells Tmux to split the
current pane and call <code>bundle open</code> with whatever I pass to the Vim
function. The <code>-complete=custom,ListGems</code> portion tells it that it
should use the output of the custom function <code>ListGems</code> as its
auto-complete dictionary, which is a <em>completely awesome</em> feature.</p>

<p>The auto-complete dictionary I used is all the gems found in the
Gemfile.lock file if it exists. From left to right I (<code>grep</code>) filter out
lines that don&#8217;t begin with gem names, (<code>sed</code>) get rid of preceding
whitespace, (<code>cut</code>) filter out everything after the first space, (<code>sed</code>)
get rid of exclamation points (apparently they&#8217;re used for <code>git</code> repo
gems in Gemfile.lock), <code>sort</code> the list, and <code>uniq</code> to remove duplicates
(<code>sort</code> and <code>uniq</code> are probably optional but they&#8217;re harmless and I didn&#8217;t
want to fidget).</p>

<p>Finally, I create a mapping so that when I&#8217;m in normal mode, I can just
type <code>\o</code> and Vim will start filling out the command <code>BundleOpen</code> so
that all I have to type is the gem name, which I can autocomplete.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everything You Never Wanted to Know About the Ember Run Loop]]></title>
    <link href="http://machty.github.com/blog/2013/01/12/everything-you-never-wanted-to-know-about-the-ember-run-loop/"/>
    <updated>2013-01-12T13:09:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/01/12/everything-you-never-wanted-to-know-about-the-ember-run-loop</id>
    <content type="html"><![CDATA[<p>Just posted a
<a href="http://stackoverflow.com/questions/13597869/what-is-ember-runloop-and-how-does-it-work/14296339#14296339">Giant Ass Response on Stack Overflow</a> about the Ember Run Loop. I&#8217;ve reproduced the text below. The question basically was: What is the Run Loop? How long does it take? When does it fire up? Can I expect views to be rendered to the DOM by the end of the run loop? etc. etc. Take a look, I think there&#8217;s some good stuff in there. Without further ado:</p>

<p>First off, read these:</p>

<p><a href="http://blog.sproutcore.com/the-run-loop-part-1/">Sproutcore Run Loop, part 1</a>
<a href="http://blog.sproutcore.com/the-run-loop-part-2/">Sproutcore Run Loop, part 2</a></p>

<p>They&#8217;re not 100% accurate to Ember, but the core concepts and motivation behind the RunLoop still generally apply to Ember; only some implementation details differ. But, on to your questions:</p>

<!-- more -->


<h3>When does Ember RunLoop start. Is it dependant on Router or Views or Controllers or something else?</h3>

<p>All of the basic user events (e.g. keyboard events, mouse events, etc) will fire up the run loop. This guarantees that whatever changes made to bound properties by the captured (mouse/keyboard/timer/etc) event are fully propagated throughout Ember&#8217;s data-binding system before returning control back to the system. So, moving your mouse, pressing a key, clicking a button, etc., all launch the run loop.</p>

<h3>how long does it approximately take (I know this is rather silly to asks and dependant on many things but I am looking for a general idea, or maybe if there is a minimum or maximum time a runloop may take)</h3>

<p>At no point will the RunLoop ever keep track of how much time it&#8217;s taking to propagate all the changes through the system and then halt the RunLoop after reaching a maximum time limit; rather, the RunLoop will always run to completion, and won&#8217;t stop until all the expired timers have been called, bindings propagated, and perhaps <em>their</em> bindings propagated, and so on. Obviously, the more changes that need to be propagated from a single event, the longer the RunLoop will take to finish. Here&#8217;s a (pretty unfair) example of how the RunLoop can get bogged down with propagating changes compared to another framework (Backbone) that doesn&#8217;t have a run loop: http://jsfiddle.net/jashkenas/CGSd5/ . Moral of the story: the RunLoop&#8217;s really fast for most things you&#8217;d ever want to do in Ember, and it&#8217;s where much of Ember&#8217;s power lies, but if you find yourself wanting to animate 30 circles with Javascript at 60 frames per second, there might be better ways to go about it than relying on Ember&#8217;s RunLoop.</p>

<h3>Is RunLoop being executed at all times, or is it just indicating a period of time from beginning to end of execution and may not run for some time.</h3>

<p>It is not executed at all times &#8211; it has to return control back to the system at some point or else your app would hang &#8211; it&#8217;s different from, say, a run loop on a server that has a <code>while(true)</code> and goes on for infinity until the server gets a signal to shut down&#8230; the Ember RunLoop has no such <code>while(true)</code> but is only spun up in response to user/timer events.</p>

<h3>If a view is created from within one RunLoop, is it guaranteed that all its content will make it into the DOM by the time the loop ends?</h3>

<p>Let&#8217;s see if we can figure that out. One of the big changes from SC to Ember RunLoop is that, instead of looping back and forth between <code>invokeOnce</code> and <code>invokeLast</code> (which you see in the diagram in the first link about SproutCore&#8217;s RL), Ember provides you a list of &#8216;queues&#8217; that, in the course of a run loop, you can schedule actions (functions to be called during the run loop) to by specifying which queue the action belongs in (example from the source: <code>Ember.run.scheduleOnce('render', bindView, 'rerender');</code>).</p>

<p>If you look at <code>run_loop.js</code> in the source code, you see <code>Ember.run.queues = ['sync', 'actions', 'destroy', 'timers'];</code>, yet if you open your JavaScript debugger in the browser in an Ember app and evaluate <code>Ember.run.queues</code>, you get a fuller list of queues: <code>["sync", "actions", "render", "afterRender", "destroy", "timers"]</code>. Ember keeps their codebase pretty modular, and they make it possible for your code, as well as its own code in a separate part of the library, to insert more queues. In this case, the Ember Views library inserts <code>render</code> and <code>afterRender</code> queues, specifically after the <code>actions</code> queue. I&#8217;ll get to why that might be in a second. First, the RunLoop algorithm:</p>

<p>The RunLoop algorithm is pretty much the same as described in the SC run loop articles above:</p>

<ul>
<li>You run your code between RunLoop <code>.begin()</code> and <code>.end()</code>, only in Ember you&#8217;ll want to instead run your code within <code>Ember.run</code>, which will internally call <code>begin</code> and <code>end</code> for you. (Only internal run loop code in the Ember code base still uses <code>begin</code> and <code>end</code>, so you should just stick with <code>Ember.run</code>)</li>
<li>After <code>end()</code> is called, the RunLoop then kicks into gear to propagate every single change made by the chunk of code passed to the <code>Ember.run</code> function. This includes propagating the values of bound properties, rendering view changes to the DOM, etc etc. The order in which these actions (binding, rendering DOM elements, etc) are performed is determined by the <code>Ember.run.queues</code> array described above:</li>
<li>The run loop will start off on the first queue, which is <code>sync</code>. It&#8217;ll run all of the actions that were scheduled into the <code>sync</code> queue by the <code>Ember.run</code> code. These actions may themselves also schedule more actions to be performed during this same RunLoop, and it&#8217;s up to the RunLoop to make sure it performs every action until all the queues are flushed. The way it does this is, at the end of every queue, the RunLoop will look through all the previously flushed queues and see if any new actions have been scheduled. If so, it has to start at the beginning of the earliest queue with unperformed scheduled actions and flush out the queue, continuing to trace its steps and start over when necessary until all of the queues are completely empty.</li>
</ul>


<p>That&#8217;s the essence of the algorithm. That&#8217;s how bound data gets propagated through the app. You can expect that once a RunLoop runs to completion, all of the bound data will be fully propagated. So, what about DOM elements?</p>

<p>The order of the queues, including the ones added in by the Ember Views library, is important here. Notice that <code>render</code> and <code>afterRender</code> come after <code>sync</code>, and <code>action</code>. The <code>sync</code> queue contains all the actions for propagating bound data. (<code>action</code>, after that, is only sparsely used in the Ember source). Based on the above algorithm, it is guaranteed that by the time the RunLoop gets to the <code>render</code> queue, all of the data-bindings will have finished synchronizing. This is by design: you wouldn&#8217;t want to perform the expensive task of rendering DOM elements <em>before</em> sync&#8217;ing the data-bindings, since that would likely require re-rendering DOM elements with updated data &#8211; obviously a very inefficient and error-prone way of emptying all of the RunLoop queues. So Ember intelligently blasts through all the data-binding work it can before rendering the DOM elements in the <code>render</code> queue.</p>

<p>So, finally, to answer your question, yes, you can expect that any necessary DOM renderings will have taken place by the time <code>Ember.run</code> finishes. Here&#8217;s a jsFiddle to demonstrate: http://jsfiddle.net/machty/6p6XJ/328/</p>

<h2>Other things to know about the RunLoop</h2>

<h3>Observers vs. Bindings</h3>

<p>It&#8217;s important to note that Observers and Bindings, while having the similar functionality of responding to changes in a &#8220;watched&#8221; property, behave totally differently in the context of a RunLoop. Binding propagation, as we&#8217;ve seen, gets scheduled into the <code>sync</code> queue to eventually be executed by the RunLoop. Observers, on the other hand, fire <em>immediately</em> when the watched property changes without having to be first scheduled into a RunLoop queue. If an Observer and a binding all &#8220;watch&#8221; the same property, the observer will always be called 100% of the time earlier than the binding will be updated.</p>

<h3><code>scheduleOnce</code> and <code>Ember.run.once</code></h3>

<p>One of the big efficiency boosts in Ember&#8217;s auto-updating templates is based on the fact that, thanks to the RunLoop, multiple identical RunLoop actions can be coalesced (&#8220;debounced&#8221;, if you will) into a single action. If you look into the <code>run_loop.js</code> internals, you&#8217;ll see the functions that facilitate this behavior are the related functions <code>scheduleOnce</code> and <code>Em.run.once</code>. The difference between them isn&#8217;t so important as knowing they exist, and how they can discard duplicate actions in queue to prevent a lot of bloated, wasteful calculation during the run loop.</p>

<h3>What about timers?</h3>

<p>Even though &#8216;timers&#8217; is one of the default queues listed above, Ember only makes reference to the queue in their RunLoop test cases. It seems that such a queue would have been used in the SproutCore days based on some of the descriptions from the above articles about timers being the last thing to fire. In Ember, the <code>timers</code> queue isn&#8217;t used. Instead, the RunLoop can be spun up by an internally managed <code>setTimeout</code> event (see the <code>invokeLaterTimers</code> function), which is intelligent enough to loop through all the existing timers, fire all the ones that have expired, determine the earliest future timer, and set an internal <code>setTimeout</code> for that event only, which will spin up the RunLoop again when it fires. This approach is more efficient than having each timer call setTimeout and wake itself up, since in this case, only one setTimeout call needs to be made, and the RunLoop is smart enough to fire all the different timers that might be going off at the same time.</p>

<h3>Further debouncing with the <code>sync</code> queue</h3>

<p>Here&#8217;s a snippet from the run loop, in the middle of a loop through all the queues in the run loop. Note the special case for the <code>sync</code> queue: because <code>sync</code> is a particularly volatile queue, in which data is being propagated in every direction, <code>Ember.beginPropertyChanges()</code> is called to prevent any observers from being fired, followed by a call to <code>Ember.endPropertyChanges</code>. This is wise: if in the course of flushing the <code>sync</code> queue, it&#8217;s entirely possible that a property on an object will change multiple times before resting on its final value, and you wouldn&#8217;t want to waste resources by immediately firing observers per every single change.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">queueName</span> <span class="o">===</span> <span class="s1">&#39;sync&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">log</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">LOG_BINDINGS</span><span class="p">;</span>
</span><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Begin: Flush Sync Queue&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>           <span class="nx">Ember</span><span class="p">.</span><span class="nx">beginPropertyChanges</span><span class="p">();</span>
</span><span class='line'>           <span class="nx">Ember</span><span class="p">.</span><span class="nx">tryFinally</span><span class="p">(</span><span class="nx">tryable</span><span class="p">,</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">endPropertyChanges</span><span class="p">);</span>
</span><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End: Flush Sync Queue&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="nx">iter</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps. I definitely had to learn quite a bit just to write this thing, which was kind of the point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake Pipeline Filter for Syncing with Client-Managed Static Site]]></title>
    <link href="http://machty.github.com/blog/2012/12/29/rake-pipeline-filter-for-syncing-with-client-managed-static-site/"/>
    <updated>2012-12-29T17:47:00-05:00</updated>
    <id>http://machty.github.com/blog/2012/12/29/rake-pipeline-filter-for-syncing-with-client-managed-static-site</id>
    <content type="html"><![CDATA[<p>Just rolled out a quick <a href="http://megancoxmusic.com/">single-pager for my bandmate</a>,
which is just a super simple static site that she&#8217;ll be updating herself
via FTP. Problem is, at some point in the future I&#8217;ll be called upon to
make some change to the JS, or the player widget, or something messy
enough that my non-developer client would be rightfully reluctant to fidget with.
If she updates the headers or the paragraph descriptions, and I want to
make changes to the rest of the page, I&#8217;ll have to go through the
annoying process of copying her raw HTML modifications into my freshly
regenerated local HTML.</p>

<!--more-->


<h2>Rake Pipeline</h2>

<p>I built this extremely simple site using
<a href="https://github.com/livingsocial/rake-pipeline">Rake Pipeline</a>, which is
a Ruby-based asset pipeline that maps input files to output files, and
lets you determine all the processing filters used to generate all the
output files. So, you can quickly throw in a Sass or CoffeeScript
filter to generate CSS/JS, and then concatenate your files together,
rename them, ompress them, etc. etc. Most of the filters you&#8217;d ever
want for anything web-related can be found in
<a href="https://github.com/wycats/rake-pipeline-web-filters">this gem</a>.</p>

<p>You can also very easily define your own filters if the above gem
doesn&#8217;t cover your needs, which is exactly what I did to handle the
problem of syncing/merging changes made directly to HTML via FTP by my client
and the changes I&#8217;d be making the the original input code.</p>

<h2>Custom Filter using Nokogiri</h2>

<p>I agreed with my client that she should only make changes within
<code>&lt;div class="content"&gt;</code>s. This makes it so that all I need to do to sync
her changes with mine is take my Rake Pipeline-generated HTML and
replace <em>its</em> content div with the content div from her FTP-updated
HTML. <a href="http://nokogiri.org/">Nokogiri</a> is just the HTML-processing tool
for such a job.</p>

<p>The code is simple enough:
<a href="https://gist.github.com/4409814">check out the gist</a>.</p>

<p>What it does is:</p>

<ol>
<li>Determine the remote URL of the already-published file based on
a <code>host</code> parameter passed into the filter and the relative path
of the file at that point in the pipeline (which means if part of
your processing involves changing the output filename of the HTML
file (e.g. from <code>html/index.haml</code> to <code>index.html</code>) you&#8217;ll want to
invoke this filter after any output-path-changing filters.</li>
<li>Download the remote file and parse it for content using CSS selectors
passed into the filter (this is what the Nokogiri gem does).</li>
<li>Parse the input file for the same CSS selectors and replace it with
the remote file&#8217;s selected content.</li>
</ol>


<p>(This is kind of similar to how some AJAX sites update content:
the server will render some hidden HTML, and the success handler will
loop through all the root level elements rendered and replace
similarly-classed or id&#8217;d elements on the visible page with what the
server returned.)</p>

<h3>Convenience Method</h3>

<p>You&#8217;ll notice this at the bottom of the gist:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rake</span><span class="o">::</span><span class="no">Pipeline</span><span class="o">::</span><span class="no">DSL</span><span class="o">::</span><span class="no">PipelineDSL</span><span class="o">.</span><span class="n">module_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">remote_replace</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">filter</span><span class="p">(</span><span class="no">RemoteReplaceFilter</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it possible to use</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">remote_replace</span> <span class="s2">&quot;http://www.megancoxmusic.com/new2/&quot;</span><span class="p">,</span> <span class="s2">&quot;.content&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>in your Assetfile instead of the more verbose</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">filter</span><span class="p">(</span><span class="no">RemoteReplaceFilter</span><span class="p">,</span> <span class="s2">&quot;http://www.yourstaticsite.com/root_of_content&quot;</span><span class="p">,</span> <span class="s2">&quot;.content&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Skipping the filter while running <code>rakep server</code></h3>

<p>You can run <code>rakep server</code> to launch a Rack-based server the hosts the
output files specified by your <code>Assetfile</code>. This is much more convenient
than running <code>rakep build</code> every time you want to test a change to your
input files. That said, if you&#8217;re developing without an internet
connection, or you have lots of files to sync, you can skip this
(potentially slow) filter
by adding <code>unless defined?(::Rake::Pipeline::Server)</code> to the end of your
<code>remote_replace</code> statement. The reason this works is that the file
containing <code>Rake::Pipeline::Server</code> only gets required when <code>rakep
server</code> is run.</p>

<h3>Whoops</h3>

<p>I ended up making the filter depend on the
<a href="https://github.com/wycats/rake-pipeline-web-filters">rake-pipeline-web-filters gem</a>
so that I could use their
<code>Rake::Pipeline::Web::Filters::FilterWithDependencies</code> module for
making sure <code>nokogiri</code> was properly required in the <code>Gemfile</code>. Except,
now I realize that was kind of silly, since my little custom filter
isn&#8217;t part of any larger collection of web filters where it&#8217;d be important not
to require all the filters&#8217; dependencies by default. Whoops. But, should
this be a sensible fit for the web-filters gem (it&#8217;s not) it shall be
ready. Consider it an understudy last in line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Accelerated Hover Scroll]]></title>
    <link href="http://machty.github.com/blog/2012/11/12/jquery-accelerated-hover-scroll/"/>
    <updated>2012-11-12T03:43:00-05:00</updated>
    <id>http://machty.github.com/blog/2012/11/12/jquery-accelerated-hover-scroll</id>
    <content type="html"><![CDATA[<p>Working on a small-ish brochure app for a beach resort, and there&#8217;s one
section that called for a horizontal scrolling container based on where
the mouse was hovering over the container. The closer you hover to the
edge, the faster the container scrolls. This is by no means a new user
interaction, but I couldn&#8217;t find a suitable plugin for my needs, so I
wrote one, and you can check it out / download it
<a href="https://github.com/useful-robot/jquery.accel-hover-scroll">here</a>.</p>

<p>I took perhaps 3 separate stabs at this surprisingly awkward problem,
and here&#8217;s what I learned&#8230;</p>

<!--more-->


<h3>Debounce!</h3>

<p><a href="http://unscriptable.com/2009/03/20/debouncing-javascript-methods/">Read this article</a>
on debouncing your JavaScript methods.  In particular:</p>

<blockquote><p>Debouncing means to coalesce several temporally close signals into one signal.</p></blockquote>

<p>In the JavaScript/UI/jQuery world, a focus on debouncing has resulted in
some popular solutions to common jank you&#8217;re probably familiar with.
Here&#8217;s one:</p>

<p>Don&#8217;t fire off expensive resize/relayout/repaints every time your
browser window resizes. Most likely, the user is probably still
actively resizing the window, and an expensive relayout/repaint is
just going to jank up a simple browser resize.
<a href="http://paulirish.com/2009/throttled-smartresize-jquery-event-handler/">One solution</a>
is to coalesce all of those resize events into on relayout/repaint,
which is pretty easy to do: just set a timer for a few hundred
milliseconds once a resize event is received, and in that time,
if another resize event is received, reset the timer, and don&#8217;t do
anything until that timer has elapsed.</p>

<p>So how does this apply to accelerated-hover-scroll?</p>

<h3>mousemove</h3>

<p>I tried a bunch of different approaches to solving the problem of
how to smoothly alter the scroll speed while the container was actively
scrolling. The algorithm I landed on goes like this:</p>

<ul>
<li>Once the user hovers over the the scroll area, ANYWHERE in the
container, start listening for mousemove events.</li>
<li>Once a mousemove event comes in, figure out how close to the edge the
cursor is and decided whether the container should be scrolling at
all, and at what speed.</li>
<li>Now figure out how far the container is from a full scroll either left
or right. If the container&#8217;s currently scrolled 100 pixels, and it
could scroll 300px total before all the inner content is revealed,
this calculated scrollable distance would be 200px.</li>
<li>Start an animation from the current scroll to to the max possible
scroll using this calculated duration. If you don&#8217;t move your mouse
again, the container will continue all the way to the and stop when it
gets there. There&#8217;s no more plugin maintenance to, say, calculate the
pixel amount that the container should scroll for each tick, or
anything messy like that. If the user moves their mouse again, you can
recalculate the new speed based on edge proximity, stop the existing
animation, and start again going all the way to the max scroll, only
at a different duration this time around.</li>
</ul>


<p>A decent solution, but still marred by slowness if the user was moving
their mouse around frequently. If the user was moving their mouse around
over the container while the container was scrolling, all sorts of jank
would happen. And why? Because I wasn&#8217;t debouncing mousemove. If the
user moved the mouse a single pixel, I&#8217;d have halt the animation,
recalculate some things, and start of the animation again with a
negligibly different duration. So how does one debounce a spatial event,
rather than the typical debouncing definition which addresses temporal
events? I used &#8220;slices&#8221;.</p>

<h3>Slices</h3>

<p>If you look at the CoffeeScript source for this plugin, in the
<code>_onMouseMove</code> function, there&#8217;s a part that calculates the &#8220;slice&#8221;
that this mouse move falls into. A slice is just a region a few pixels
wide that doesn&#8217;t show up in any visual sense, but is used to debounce a
spatial mousemove event. Basically, if we&#8217;ve already started animating
the container and a mousemove event is received that is just a few
pixels away, we can very simply calculate that the mouseevent falls into
the same slice as the original mouse event that launched the animation,
and discard the newer event rather than slow everything down so that we can
have a pixel perfect scroll velocity mapping.</p>

<p>So, whether or not I&#8217;m butchering the term &#8220;debounce&#8221; by applying it to
spatial events, the lesson is the same, which is that you should avoid
pixel-perfect/millisecond-perfect granularity if at all possible. Most
likely no one will notice the downgrade in strict continuity, but they
will notice if a bunch of frequent, redundant, complicated
redraws/relayouts/repaints fire off for every little insignificant
event.</p>
]]></content>
  </entry>
  
</feed>

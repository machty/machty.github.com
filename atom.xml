<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Useful Dude]]></title>
  <link href="http://machty.github.com/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2013-01-06T13:26:25-05:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Ember Subclassing Refactor]]></title>
    <link href="http://machty.github.com/blog/2013/01/06/quick-ember-subclassing-refactor/"/>
    <updated>2013-01-06T13:10:00-05:00</updated>
    <id>http://machty.github.com/blog/2013/01/06/quick-ember-subclassing-refactor</id>
    <content type="html"><![CDATA[<p>Simple post here. Just wanted to point out that the two following
codeblocks are functionally equivalent in Ember (and probably most
other JS) apps:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ParentControllerClass = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">someSharedProperty: </span><span class="kc">true</span>
</span><span class='line'>  <span class="nv">someSharedFunction: </span><span class="o">-&gt;</span> <span class="nx">alert</span> <span class="s">&quot;woo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.NewCampaignController = </span><span class="nx">ParentControllerClass</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>
</span><span class='line'><span class="nv">App.EditCampaignController = </span><span class="nx">ParentControllerClass</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8230;can be simplified to&#8230;</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.NewCampaignController =</span>
</span><span class='line'><span class="nv">App.EditCampaignController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">someSharedProperty: </span><span class="kc">true</span>
</span><span class='line'>  <span class="nv">someSharedFunction: </span><span class="o">-&gt;</span> <span class="nx">alert</span> <span class="s">&quot;woo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, if you need to expose a view or controller class to your
App&#8217;s namespace, and it shares all of the features of a &#8220;parent&#8221; class, you don&#8217;t
actually need to do full <code>.extend()</code>; rather, you can just assign any of
the &#8220;subclasses&#8221; to exactly the same class object as the parent class.
This can help reduce the amount of code you have to write, and also
shaves off a tiny bit of overhead by skipping an unnecessary call to
<code>extend</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake Pipeline Filter for Syncing with Client-Managed Static Site]]></title>
    <link href="http://machty.github.com/blog/2012/12/29/rake-pipeline-filter-for-syncing-with-client-managed-static-site/"/>
    <updated>2012-12-29T17:47:00-05:00</updated>
    <id>http://machty.github.com/blog/2012/12/29/rake-pipeline-filter-for-syncing-with-client-managed-static-site</id>
    <content type="html"><![CDATA[<p>Just rolled out a quick <a href="http://megancoxmusic.com/">single-pager for my bandmate</a>,
which is just a super simple static site that she&#8217;ll be updating herself
via FTP. Problem is, at some point in the future I&#8217;ll be called upon to
make some change to the JS, or the player widget, or something messy
enough that my non-developer client would be rightfully reluctant to fidget with.
If she updates the headers or the paragraph descriptions, and I want to
make changes to the rest of the page, I&#8217;ll have to go through the
annoying process of copying her raw HTML modifications into my freshly
regenerated local HTML.</p>

<!--more-->


<h2>Rake Pipeline</h2>

<p>I built this extremely simple site using
<a href="https://github.com/livingsocial/rake-pipeline">Rake Pipeline</a>, which is
a Ruby-based asset pipeline that maps input files to output files, and
lets you determine all the processing filters used to generate all the
output files. So, you can quickly throw in a Sass or CoffeeScript
filter to generate CSS/JS, and then concatenate your files together,
rename them, ompress them, etc. etc. Most of the filters you&#8217;d ever
want for anything web-related can be found in
<a href="https://github.com/wycats/rake-pipeline-web-filters">this gem</a>.</p>

<p>You can also very easily define your own filters if the above gem
doesn&#8217;t cover your needs, which is exactly what I did to handle the
problem of syncing/merging changes made directly to HTML via FTP by my client
and the changes I&#8217;d be making the the original input code.</p>

<h2>Custom Filter using Nokogiri</h2>

<p>I agreed with my client that she should only make changes within
<code>&lt;div class="content"&gt;</code>s. This makes it so that all I need to do to sync
her changes with mine is take my Rake Pipeline-generated HTML and
replace <em>its</em> content div with the content div from her FTP-updated
HTML. <a href="http://nokogiri.org/">Nokogiri</a> is just the HTML-processing tool
for such a job.</p>

<p>The code is simple enough:
<a href="https://gist.github.com/4409814">check out the gist</a>.</p>

<p>What it does is:</p>

<ol>
<li>Determine the remote URL of the already-published file based on
a <code>host</code> parameter passed into the filter and the relative path
of the file at that point in the pipeline (which means if part of
your processing involves changing the output filename of the HTML
file (e.g. from <code>html/index.haml</code> to <code>index.html</code>) you&#8217;ll want to
invoke this filter after any output-path-changing filters.</li>
<li>Download the remote file and parse it for content using CSS selectors
passed into the filter (this is what the Nokogiri gem does).</li>
<li>Parse the input file for the same CSS selectors and replace it with
the remote file&#8217;s selected content.</li>
</ol>


<p>(This is kind of similar to how some AJAX sites update content:
the server will render some hidden HTML, and the success handler will
loop through all the root level elements rendered and replace
similarly-classed or id&#8217;d elements on the visible page with what the
server returned.)</p>

<h3>Convenience Method</h3>

<p>You&#8217;ll notice this at the bottom of the gist:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rake</span><span class="o">::</span><span class="no">Pipeline</span><span class="o">::</span><span class="no">DSL</span><span class="o">::</span><span class="no">PipelineDSL</span><span class="o">.</span><span class="n">module_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">remote_replace</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">filter</span><span class="p">(</span><span class="no">RemoteReplaceFilter</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it possible to use</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">remote_replace</span> <span class="s2">&quot;http://www.megancoxmusic.com/new2/&quot;</span><span class="p">,</span> <span class="s2">&quot;.content&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>in your Assetfile instead of the more verbose</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">filter</span><span class="p">(</span><span class="no">RemoteReplaceFilter</span><span class="p">,</span> <span class="s2">&quot;http://www.yourstaticsite.com/root_of_content&quot;</span><span class="p">,</span> <span class="s2">&quot;.content&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Skipping the filter while running <code>rakep server</code></h3>

<p>You can run <code>rakep server</code> to launch a Rack-based server the hosts the
output files specified by your <code>Assetfile</code>. This is much more convenient
than running <code>rakep build</code> every time you want to test a change to your
input files. That said, if you&#8217;re developing without an internet
connection, or you have lots of files to sync, you can skip this
(potentially slow) filter
by adding <code>unless defined?(::Rake::Pipeline::Server)</code> to the end of your
<code>remote_replace</code> statement. The reason this works is that the file
containing <code>Rake::Pipeline::Server</code> only gets required when <code>rakep
server</code> is run.</p>

<h3>Whoops</h3>

<p>I ended up making the filter depend on the
<a href="https://github.com/wycats/rake-pipeline-web-filters">rake-pipeline-web-filters gem</a>
so that I could use their
<code>Rake::Pipeline::Web::Filters::FilterWithDependencies</code> module for
making sure <code>nokogiri</code> was properly required in the <code>Gemfile</code>. Except,
now I realize that was kind of silly, since my little custom filter
isn&#8217;t part of any larger collection of web filters where it&#8217;d be important not
to require all the filters&#8217; dependencies by default. Whoops. But, should
this be a sensible fit for the web-filters gem (it&#8217;s not) it shall be
ready. Consider it an understudy last in line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Accelerated Hover Scroll]]></title>
    <link href="http://machty.github.com/blog/2012/11/12/jquery-accelerated-hover-scroll/"/>
    <updated>2012-11-12T03:43:00-05:00</updated>
    <id>http://machty.github.com/blog/2012/11/12/jquery-accelerated-hover-scroll</id>
    <content type="html"><![CDATA[<p>Working on a small-ish brochure app for a beach resort, and there&#8217;s one
section that called for a horizontal scrolling container based on where
the mouse was hovering over the container. The closer you hover to the
edge, the faster the container scrolls. This is by no means a new user
interaction, but I couldn&#8217;t find a suitable plugin for my needs, so I
wrote one, and you can check it out / download it
<a href="https://github.com/useful-robot/jquery.accel-hover-scroll">here</a>.</p>

<p>I took perhaps 3 separate stabs at this surprisingly awkward problem,
and here&#8217;s what I learned&#8230;</p>

<!--more-->


<h3>Debounce!</h3>

<p><a href="http://unscriptable.com/2009/03/20/debouncing-javascript-methods/">Read this article</a>
on debouncing your JavaScript methods.  In particular:</p>

<blockquote><p>Debouncing means to coalesce several temporally close signals into one signal.</p></blockquote>

<p>In the JavaScript/UI/jQuery world, a focus on debouncing has resulted in
some popular solutions to common jank you&#8217;re probably familiar with.
Here&#8217;s one:</p>

<p>Don&#8217;t fire off expensive resize/relayout/repaints every time your
browser window resizes. Most likely, the user is probably still
actively resizing the window, and an expensive relayout/repaint is
just going to jank up a simple browser resize.
<a href="http://paulirish.com/2009/throttled-smartresize-jquery-event-handler/">One solution</a>
is to coalesce all of those resize events into on relayout/repaint,
which is pretty easy to do: just set a timer for a few hundred
milliseconds once a resize event is received, and in that time,
if another resize event is received, reset the timer, and don&#8217;t do
anything until that timer has elapsed.</p>

<p>So how does this apply to accelerated-hover-scroll?</p>

<h3>mousemove</h3>

<p>I tried a bunch of different approaches to solving the problem of
how to smoothly alter the scroll speed while the container was actively
scrolling. The algorithm I landed on goes like this:</p>

<ul>
<li>Once the user hovers over the the scroll area, ANYWHERE in the
container, start listening for mousemove events.</li>
<li>Once a mousemove event comes in, figure out how close to the edge the
cursor is and decided whether the container should be scrolling at
all, and at what speed.</li>
<li>Now figure out how far the container is from a full scroll either left
or right. If the container&#8217;s currently scrolled 100 pixels, and it
could scroll 300px total before all the inner content is revealed,
this calculated scrollable distance would be 200px.</li>
<li>Start an animation from the current scroll to to the max possible
scroll using this calculated duration. If you don&#8217;t move your mouse
again, the container will continue all the way to the and stop when it
gets there. There&#8217;s no more plugin maintenance to, say, calculate the
pixel amount that the container should scroll for each tick, or
anything messy like that. If the user moves their mouse again, you can
recalculate the new speed based on edge proximity, stop the existing
animation, and start again going all the way to the max scroll, only
at a different duration this time around.</li>
</ul>


<p>A decent solution, but still marred by slowness if the user was moving
their mouse around frequently. If the user was moving their mouse around
over the container while the container was scrolling, all sorts of jank
would happen. And why? Because I wasn&#8217;t debouncing mousemove. If the
user moved the mouse a single pixel, I&#8217;d have halt the animation,
recalculate some things, and start of the animation again with a
negligibly different duration. So how does one debounce a spatial event,
rather than the typical debouncing definition which addresses temporal
events? I used &#8220;slices&#8221;.</p>

<h3>Slices</h3>

<p>If you look at the CoffeeScript source for this plugin, in the
<code>_onMouseMove</code> function, there&#8217;s a part that calculates the &#8220;slice&#8221;
that this mouse move falls into. A slice is just a region a few pixels
wide that doesn&#8217;t show up in any visual sense, but is used to debounce a
spatial mousemove event. Basically, if we&#8217;ve already started animating
the container and a mousemove event is received that is just a few
pixels away, we can very simply calculate that the mouseevent falls into
the same slice as the original mouse event that launched the animation,
and discard the newer event rather than slow everything down so that we can
have a pixel perfect scroll velocity mapping.</p>

<p>So, whether or not I&#8217;m butchering the term &#8220;debounce&#8221; by applying it to
spatial events, the lesson is the same, which is that you should avoid
pixel-perfect/millisecond-perfect granularity if at all possible. Most
likely no one will notice the downgrade in strict continuity, but they
will notice if a bunch of frequent, redundant, complicated
redraws/relayouts/repaints fire off for every little insignificant
event.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transferring S3-Enabled Heroku Apps Between Dev/Staging/Prod]]></title>
    <link href="http://machty.github.com/blog/2012/11/05/transferring-s3-enabled-heroku-apps-between-dev-slash-staging-slash-prod/"/>
    <updated>2012-11-05T00:01:00-05:00</updated>
    <id>http://machty.github.com/blog/2012/11/05/transferring-s3-enabled-heroku-apps-between-dev-slash-staging-slash-prod</id>
    <content type="html"><![CDATA[<p>You know, I could just write this in my Evernote and reference as
needed, but I&#8217;m writing it here, because I love you. But I&#8217;m in a hurry.</p>

<p>Here are the steps I take for transferring apps from my development
server to Heroku staging/production servers, which can get somewhat
complicated if Amazon S3 is involved.</p>

<!--more-->


<h3>Database</h3>

<p>You&#8217;ve already pushed your code to Heroku. That&#8217;s the easy part. Now for the
database:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.2
</span><span class='line'>heroku db:push</span></code></pre></td></tr></table></div></figure>


<p><code>heroku db:push</code> uses <code>taps</code> to serialize and transmit all of your dev
database to the Heroku database. We rvm to Ruby 1.9.2 because Ruby 1.9.3
has mad issues serializing Datetimes. I think it was datetimes.
Something involving Psych. Anyway, just use 1.9.2.</p>

<h3>S3</h3>

<p>Let&#8217;s assume you&#8217;ve started building the app/site using your own S3
bucket because you didn&#8217;t want to wait for your client to get their
Amazon AWS account up and running. Now you need to take all the stuff
uploaded to your S3 bucket and move it to your client&#8217;s bucket. This is
a scoatch tricky, but we shall prevail.</p>

<p>First, log into your client&#8217;s AWS account and go to S3. Create the
bucket you&#8217;ll be using, then open the bucket&#8217;s properties, and click
<code>Add Bucket Policy</code>. Then paste in this, replacing the ALL CAPS
BUCKETNAME with the production bucket name you&#8217;ll be using:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>     "Version": "2008-10-17",
</span><span class='line'>     "Statement": [
</span><span class='line'>          {
</span><span class='line'>               "Sid": "AllowPublicRead",
</span><span class='line'>               "Effect": "Allow",
</span><span class='line'>               "Principal": {
</span><span class='line'>                    "AWS": "*"
</span><span class='line'>               },
</span><span class='line'>               "Action": "s3:GetObject",
</span><span class='line'>               "Resource": "arn:aws:s3:::BUCKETNAME/*"
</span><span class='line'>          }
</span><span class='line'>     ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The purpose of this is to prepare for the next step, in which we&#8217;ll be
pasting a bunch of files into this bucket, and we want them to go in
with public-read access rather than the default of, well, zero access
for anybody, ever, including the admin. If you think I&#8217;m going about
this wrong way, Disqus me them comments, but I don&#8217;t think there&#8217;s an
easier way.</p>

<p>Second, let&#8217;s copy your dev buckets to disk. Download/open
<a href="http://www.3hubapp.com/">3hub</a>, and put in your
dev S3 account credentials, log in, select your dev bucket, and drag and
drop your root-level files to your desktop. Now take a 3 minute nap.</p>

<p>Wake up, grab a brush and put a little make up, then disconnect 3hub
from your dev account and log into your client&#8217;s S3 account, and drag
those downloaded files from your desktop to your client&#8217;s bucket. 5
minute nap. You&#8217;ve earned it. Now all your S3 files have been
transferred and have proper access permissions, thanks to your magic
bucket policy incantation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpreeCommerce meets Ember.js]]></title>
    <link href="http://machty.github.com/blog/2012/11/02/spreecommerce-meets-ember-dot-js/"/>
    <updated>2012-11-02T20:44:00-04:00</updated>
    <id>http://machty.github.com/blog/2012/11/02/spreecommerce-meets-ember-dot-js</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a record label website in Ember.js with all sorts of
lovely dynamic goodies, infinite scrolling feeds, embedded music player,
blah blah blah, and most challengingly a full-on store where user&#8217;s can
browse albums, shirts, whatevers, add them to their cart, and eventually
check out. This post covers a few lessons learned in getting a dynamic
JS website to play nicely with Spree, an open source e-commerce
framework.</p>

<p>Things you might learn from this article:
* Digging into gem source code
* Passing Javascript data in and out of iframes
* Converting non-prototype-extended data into prototype-extended data</p>

<!--more-->


<h2>Spree</h2>

<p><a href="http://spreecommerce.com/">Spree</a> is an extensible e-commerce framework written
in Ruby-on-Rails that&#8217;s been around for quite a number of years. Spree
follows the same pattern of CMS+front-end RoR plugins like
<a href="http://www.refinerycms.com">RefineryCMS</a>, where, in order to achieve
the desired customized design, the developer is encouraged to bend as
many rules as possible given the CMS design, and then when it comes to
breaking the rules, you&#8217;re provided some mechanism of overriding/embellishing
the default source code, which usually takes one of two forms:</p>

<ol>
<li>If you&#8217;re overriding something like a view template, figure out the
path of that view by digging through the Spree/Refinery source code
and then duplicate that path in your <code>/app</code> directory, and if you&#8217;ve
named the override correctly, the plugin will use your view rather
than the stock default.</li>
<li>If you&#8217;re overriding something like a model/controller, you use a
decorator, wherein you run a <code>class_eval</code> on a the model/controller,
say <code>Refinery::PagesController</code> in
<code>app/decorators/controllers/refinery/pages_controller_decorator.rb</code>
and define any of the overrides / extra methods you need.</li>
</ol>


<p>Spree utilizes both of these methods, as well as a third method
seemingly absent from Refinery, which uses the
<a href="https://github.com/railsdog/deface">Deface</a> gem to dig into raw
.erb files and replace certain chunks of it with your desired overrides.
It&#8217;s basically a mechanism that allows you to override view&#8217;s without
totally overwriting an .erb file, and, while messy in its own way,
allows your overrides to play nicely with other plugins&#8217; overrides if
you&#8217;re careful enough to take a more conservative approach to the kinds
of overrides you make (e.g. add this partial after this elements rather
than then completely replace this giant ass element that all these other
plugins rely on as an anchor).</p>

<p>That&#8217;s enough of an overview. The rest of this post is how I managed to
use chunks of Spree to build my own Ajax-y store for a record label
website.</p>

<h2>Maintaining am AJAX Shopping Cart</h2>

<p>By default, vanilla Spree doesn&#8217;t provide you any AJAX functionality;
every action, from viewing a product to adding it to your cart causes a
full page refresh, so getting it to work in an AJAX fashion takes a bit
of finesse. Step 1 is finding the appropriate controller actions that
you need to override. The first thing I wanted to override was adding a
product to a cart. The easiest way to figure out how to do this was to
navigate to my local server hosting a sample Spree website and add a
product to my shopping cart while observing <code>log/development.log</code> in my
Rails app folder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ : tail -F log/development.log
</span><span class='line'>
</span><span class='line'>// Add an item to the shopping cart from the browser
</span><span class='line'>
</span><span class='line'>Started POST "/store/orders/populate" for 127.0.0.1 at 2012-11-02 21:48:41 -0400
</span><span class='line'>Processing by Spree::OrdersController#populate as HTML
</span><span class='line'>  Parameters: {"utf8"=>"✓", "authenticity_token"=>"6kdui/lTyLCBTSZTsEQAR1UgUxyqaY8mhBaUouwjhXA=", "products"=>{"12"=>"45"}, "quantity"=>"1"}
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Ah hah, the controller that handles adding items to the shopping cart is
<code>Spree::OrdersController</code> and the action is <code>populate</code>. Now all I have
to do is figure out a way to modify that controller action to accept
AJAX requests and spit out a JSON response of the updated state of the
cart so that I can display the contents of the cart from my Ember site.</p>

<p>This means you have to start digging into the Spree source code.
Whenever I need to dig into the source code of a plugin I&#8217;m using (which
is pretty much all the damn time) I either go to the plugin&#8217;s github
page and search through the directory (or press <code>t</code> on the homepage and
fuzzy search) or, most often, I just <code>git clone</code> the repository so I can
have the whole project locally to inspect and prod. I find a file called
<code>orders_controller.rb</code>, and here&#8217;s an excerpt of its <code>def populate</code>
block:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>      <span class="n">fire_event</span><span class="p">(</span><span class="s1">&#39;spree.cart.add&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fire_event</span><span class="p">(</span><span class="s1">&#39;spree.order.contents_changed&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">respond_with</span><span class="p">(</span><span class="vi">@order</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span> <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">cart_path</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Balls, they&#8217;ve got it hard-wired in there to respond only to <code>html</code>
requests. How so? Because in the <code>respond_with</code> block, they only
specify what should happen when the format of the incoming request is
html, rather than, say, json or xml or any of the other kinds of
requests that can come in. This is problematic for us since we want to
use this function so that it can handle JSON requests from our
JavaScript app. I don&#8217;t know how to do this other than rewriting the
entire function to eventually respond with JSON. Perhaps Railscasting
Ryna Bates or Yehuda Katz could think of a way to do this, but have no
idea how something like that would be accomplished, so let&#8217;s just go the
obvious route and override that entire function so that it&#8217;ll respond to
our JS app&#8217;s JSON AJAX requests.</p>

<h3>Using Decorators to Override Spree Controllers</h3>

<p>We need to override the <code>populate</code> function of the spree controller to
return JSON. To do this, you have to use a &#8216;decorator&#8217;. The term
&#8216;decorator&#8217; is used in a lot of different contexts in the programming
world, but most generally, it implies that you&#8217;ll be decorating an
underlying class with more methods (or, in this case, overriding a
method entirely). So let&#8217;s create our decorator for the
<code>OrdersController</code> in <code>app/controllers/orders_controller_decorator.rb</code>.
In this file, we&#8217;ll use <code>class_eval</code> to reopen the class and override
the <code>populate</code> method so that it returns the JSON we need. And exactly
what JSON do we need? Well, we do want our our Ember app to properly
display updates to the shopping cart as they come in, and what better
way to get an updated state of the shopping cart other than right when
we add items to it?</p>

<p>For this reason we <code>render json: current_order</code> after we&#8217;ve added an
item to the cart. Our <code>orders_controller_decorator.rb</code> looks something
like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spree</span><span class="o">::</span><span class="no">OrdersController</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">populate</span>
</span><span class='line'>    <span class="vi">@order</span> <span class="o">=</span> <span class="n">current_order</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire_event</span><span class="p">(</span><span class="s1">&#39;spree.cart.add&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fire_event</span><span class="p">(</span><span class="s1">&#39;spree.order.contents_changed&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span><span class="p">(</span><span class="vi">@order</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">cart_path</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="n">current_order</span> <span class="p">}</span> <span class="c1"># &lt;----</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Storing Cart Updates in Ember.js</h3>

<p>This part&#8217;s pretty straight-forward. We use a controller to maintain the
state of the cart. It&#8217;s initially populated on page load by the current
value of the cart (an easy exercise to figure out once you understand
the general techniques applied in this article).</p>

<p>The important thing to pay attention to here is that in the <code>success</code>
handler in the Ajax call, we take the <code>current_order</code> JSON returned from
our modified <code>populate</code> action and save it to the controller, so that
anything that&#8217;s bound to the controller&#8217;s cart properties get
automatically updated.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.CartController = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">content: </span><span class="nb">window</span><span class="p">.</span><span class="nx">cart</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">saving: </span><span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">addItem: </span><span class="nf">(variantId, quantity, callback) -&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">variants = </span><span class="p">{}</span>
</span><span class='line'>    <span class="nx">variants</span><span class="p">[</span><span class="nx">variantId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">quantity</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;saving&#39;</span><span class="p">,</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span> <span class="s">&#39;/add_item.json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">type: </span><span class="s">&#39;POST&#39;</span>
</span><span class='line'>      <span class="nv">data:</span>
</span><span class='line'>        <span class="nv">variants: </span><span class="nx">variants</span>
</span><span class='line'>      <span class="nv">success: </span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="nx">@set</span> <span class="s">&#39;content&#39;</span><span class="p">,</span> <span class="nx">data</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="k">if</span> <span class="nx">callback</span>
</span><span class='line'>      <span class="nv">error: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>        <span class="nx">alert</span> <span class="s">&quot;Error adding item to Shopping Cart. Please try again.&quot;</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="k">if</span> <span class="nx">callback</span>
</span><span class='line'>      <span class="nv">complete: </span><span class="o">=&gt;</span>
</span><span class='line'>        <span class="nx">@set</span> <span class="s">&#39;saving&#39;</span><span class="p">,</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Checkout</h3>

<p>Ok, adding items to the cart is easy enough (note that I&#8217;m skipping over
the easier parts, like querying the server for products and displaying
them with Handlebars templates), but what about the checkout phase?</p>

<p>Well, I don&#8217;t have the gumption to re-tool Spree to work in an Ember.js
setting. Maybe someday I&#8217;ll write the gem for that, but not today.
Today, we&#8217;ll just use an iFrame to display the normal checkout page
that&#8217;s included with Spree. To do this, you&#8217;ll create a new route in
your router called <code>checkout</code> which connects outlets to a view that has
an iFrame in it pointing to <code>/store/checkout/address</code> (address just
happens to the first page of checkout, i.e. billing and shipping
address). The rest mostly just works out of the box, but there is one
last thing we need to get working, which is, how do we notify the Ember
portion of our app that the shopping cart has been cleared after the
user has made a purchase?</p>

<p>We&#8217;d like our Ember.js shopping cart to immediately empty once the
user&#8217;s made a successful purchase. We could just randomly poll the
server to sync the state of the cart, but that&#8217;s a little messy and
resource intensive. Arguably a better way to go would be to have the
iframe pass its parent Ember.js app information about the state of the
cart at each page load, so that for every page of the checkout, you
re-flash the shopping cart, and when you&#8217;ve successfully checked out,
you flash the shopping cart with an empty cart, and that&#8217;s how your
Ember.js app knows the shopping cart&#8217;s been paid for.</p>

<h3>Deface</h3>

<p>To do this, we&#8217;ll add a Deface override to inject some Javascript at the
top of every Spree page. This Javascript will attempt to grab the
<code>current_order</code>, if it exists, serialize it, and pass it to the parent
frame, if it exists. The Deface override looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Deface</span><span class="o">::</span><span class="no">Override</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:virtual_path</span> <span class="o">=&gt;</span> <span class="s2">&quot;spree/layouts/spree_application&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;cart_updater&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="ss">:insert_bottom</span> <span class="o">=&gt;</span> <span class="s2">&quot;[data-hook=&#39;inside_head&#39;]&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s2">&quot;store_overrides/cart_updater&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can reside in <code>app/overrides/overrides.rb</code>. Basically, this says
that we&#8217;re overriding the Spree template in the Spree source code at
<code>spree/layouts/spree_application</code> by inserting the <code>cart_updater</code>
partial at the bottom of the <code>inside_head</code> data hook in the
<code>spree_application.erb.html</code> template.</p>

<p>Now we&#8217;ll need to
create the <code>cart_updater</code> that&#8217;s referenced. We&#8217;ll do that by creating a
file called <code>app/store_overrides/_cart_updater.html.erb</code>, which looks
something like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">shopCallback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">cart</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;%</span> <span class="k">if</span> <span class="nx">current_order</span> <span class="o">%&gt;</span>
</span><span class='line'>    <span class="nx">cart</span> <span class="o">=</span> <span class="o">&lt;%=</span> <span class="nx">OrderSerializer</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="nx">current_order</span><span class="p">).</span><span class="nx">to_json</span><span class="p">.</span><span class="nx">html_safe</span> <span class="o">%&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;%</span> <span class="k">else</span> <span class="o">%&gt;</span>
</span><span class='line'>    <span class="nx">cart</span> <span class="o">=</span> <span class="o">&lt;%=</span> <span class="nx">nil</span><span class="p">.</span><span class="nx">to_json</span><span class="p">.</span><span class="nx">html_safe</span> <span class="o">%&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;%</span> <span class="nx">end</span> <span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">shopCallback</span><span class="p">(</span><span class="nx">cart</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This chunk of code passes a serialized order to the parent page, if it
exists. Now all we need to do is add the <code>shopCallback</code> function.</p>

<h3>Prototype Extension Gotcha</h3>

<p>Jumping a bit ahead, here&#8217;s the code for the <code>window.shopCallback</code>
function.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">shopCallback = </span><span class="nf">(cartJson) -&gt;</span>
</span><span class='line'>  <span class="c1"># Have to $.extend to reconstruct object in Emberized environment</span>
</span><span class='line'>  <span class="c1"># so that we get prototype extensions on the arrays.</span>
</span><span class='line'>  <span class="nx">Chimera</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;cartController.content&#39;</span><span class="p">,</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="p">{},</span> <span class="nx">cartJson</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we don&#8217;t just set <code>content</code> to <code>cartJson</code>, but rather to
<code>$.extend(true, {}, cartJson))</code>. Why is this? Well, prepare yourself for
a bizarre corner-case that you&#8217;ll occasionally have to be on your guard
against. The problem stems from the fact that <code>cartJson</code> is created
within the iframe context, which knows nothing about Ember, and then
<code>cartJson</code> is passed to the parent Emver.js page. One of the things the
Ember.js library adds by default are a bunch of prototype overrides for
the Array, String, and probably Object types. These prototype extensions
allow properties of these objects to be observable, among other many things,
but the <code>cartJson</code> object coming from the iframe doesn&#8217;t have that
prototype extension, since it&#8217;s prototypes come from the unembellished
iframe context. If you just set <code>cartController.content</code> to <code>cartJson</code>,
you&#8217;ll very quickly run into bizarre errors about certain
properties/functions not being defined on <code>cartJson</code>.</p>

<p>The solution to this is to recreate the <code>cartJson</code> in the
prototype-extended Ember.js context. A neat technique for doing this,
which I learned from <code>gavacho</code> from the emberjs IRC, is to use the
jQuery extend function, which can be used in a lot of different
instances, but in this case, we&#8217;re using it to make a deep copy of the
<code>cartJson</code> object. This recreates the object so that it&#8217;ll have the
prototype extensions that Ember expects.</p>

<p>I think that does it for this article. Let me know if you have any
questions, and always always check out the Ember IRC and StackOverflow
for some smart dude(tte)s ready to helpy you at your every turn.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping OpenGraph for Video Cover Images]]></title>
    <link href="http://machty.github.com/blog/2012/10/23/scraping-opengraph-for-video-cover-images/"/>
    <updated>2012-10-23T21:35:00-04:00</updated>
    <id>http://machty.github.com/blog/2012/10/23/scraping-opengraph-for-video-cover-images</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a site for a record company, and the folk in charge of
the content usually just host their videos on YouTube, Vimeo, or some
hosting service, so I needed to come up with a simple way for them to
enter their YouTube/Vimeo/Whatever URLs into our CMS so that the videos
could be added to a gallery.</p>

<p>This site also does a lot of magical things with images that
require us to know ahead of time the dimensions of the images we&#8217;re working with,
so it was also important for us to be able to store the thumbnail for the video internally
(and also allow this automatically selected thumbnail to be overridden
with an image of their choice).</p>

<!-- more -->


<h2>OpenGraph for Thumbnail Selection</h2>

<p>I&#8217;d originally toyed with the idea of using a suite of Regex&#8217;s to reason
the video ID from the YouTube/Vimeo/Whatever link that the user provided
and then use that ID to query a thumbnail from that particular service.
Problems with that idea:</p>

<ul>
<li>Annoying to have to research all the different URL formats to support
in a giant Regex whack-a-mole</li>
<li>What if the service adds a new format of URL that my regex suite
doesn&#8217;t catch?</li>
<li>What if they want to use a new service?</li>
<li>YouTube has <a href="http://www.tonylea.com/2011/how-to-get-youtube-thumbnail-images/">publicly accessible</a>
thumbnails if you&#8217;ve parsed the ID, but I think for Vimeo (and other
services), you need to jump through the hoops of integrating their
API.</li>
</ul>


<p>Turns out there&#8217;s a much lazier and more flexible alternative to a Regex
suite, and that is to information freely available on Facebook&#8217;s
<a href="http://developers.facebook.com/docs/opengraph/">Open Graph</a>. In short,
Open Graph is a protocol for tagging content (both concrete things like
places/restaurants/etc and virtual content like videos/photos/etc) by
properly setting meta tags on in the <code>&lt;head&gt;</code> tag on the web pages that
represent that content. If a web page adheres to the OG protocol, you
can just scrape the page&#8217;s meta tags for things like a title,
description, and, you guessed it, a representative image for that
content.</p>

<p>So, you can just navigate to <a href="http://www.youtube.com/watch?v=6GggY4TEYbk">a random video&#8217;s URL</a>,
open the source, and find the following nested in the <code>&lt;head&gt;</code> tag:</p>

<p><code>&lt;meta property="og:image" content="http://i3.ytimg.com/vi/6GggY4TEYbk/mqdefault.jpg"&gt;</code></p>

<p>which makes for a perfect cover image:</p>

<p><img src="http://i3.ytimg.com/vi/6GggY4TEYbk/mqdefault.jpg" alt="OG Thumbnail" /></p>

<p>This will work for any video hosting service that supports OG, which is
probably all of them, since they&#8217;d be cutting themselves out of
optimized Facebook sharing if they didn&#8217;t provide those tags. Also, the
image provided is a lot more likely to be formatted for general use
rather than, say, using the previously linked YouTube approach for
determining a thumbnail URL, which might yield a thumbnail that&#8217;s
cropped or black-bar&#8217;d for internal YouTube use.</p>

<h2>Using Nokogiri to Scrape for OG Tags</h2>

<p>I used the <a href="http://nokogiri.org/">Nokogiri</a> gem to scrape the
user-provided video URL for the og:image tag value via the following
code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">before_validation</span> <span class="ss">:set_attachment</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_attachment</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">attachment</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Download and parse the video URL</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">video_url</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Use CSS selection to query og:image url.</span>
</span><span class='line'>    <span class="n">image_url</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">at_css</span><span class="p">(</span><span class="s1">&#39;meta[property=&quot;og:image&quot;]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:[]</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Save the downloaded thumbnail image to paperclip attachment.</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">attachment</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">image_url</span><span class="p">))</span>
</span><span class='line'>  <span class="k">rescue</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span> <span class="ss">:attachment</span><span class="p">,</span> <span class="s2">&quot;couldn&#39;t be determined by the video URL you supplied&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This fails quietly if there are no og:image tags at the provided URL
(which just means the user will have to uplaod their own thumbnail).</p>

<h2>On the front-end</h2>

<p>Once you&#8217;ve got the video cover image into your back-end, you can use
any number of free or commercial plugins that handle the gallery
presentation of images, videos, Flash, etc. I used
<a href="http://www.no-margin-for-errors.com/projects/prettyphoto-jquery-lightbox-clone/">prettyPhoto</a>
since it was free and easy enough to hack.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[batteryPOP is Live]]></title>
    <link href="http://machty.github.com/blog/2012/10/12/batterypop-is-live/"/>
    <updated>2012-10-12T10:50:00-04:00</updated>
    <id>http://machty.github.com/blog/2012/10/12/batterypop-is-live</id>
    <content type="html"><![CDATA[<p>You can check out the latest <a href="http://www.usefulrobot.io">Useful Robot</a>
project at <a href="http://www.batterypop.com">batteryPOP.com</a>.</p>

<p>batteryPOP is a children&#8217;s website featuring a bubbly, animated,
tree-based menu that drives kids to the videos they want to watch and
articles they want to read. It was written in
<a href="http://www.emberjs.com">Ember.js</a>/Rails and had to look good on the
iPad, so we couldn&#8217;t use any Flash, though the effect is largely the
same.</p>

<!-- more -->


<h2>Ember.js Meetup Presentation</h2>

<p>Here&#8217;s the slides from my lightning talk on Architecting batteryPOP from
the last <a href="http://www.meetup.com/EmberJS-NYC/">NYC Ember Meetup</a>.</p>

<script async class="speakerdeck-embed" data-id="5059e707e4ce5c0002054198" data-ratio="1.4840579710144928" src="http://machty.github.com//speakerdeck.com/assets/embed.js"></script>


<h2>Repositionables</h2>

<p>One of the major focuses of that presentation was on
how to use a <code>Repositionable</code> mixin in conjunction with
position formulas so that views can automatically get notified when
browser dimensions change and automatically animate themselves to the
correct new position and scale. This is what facilitates the nifty
auto-adjust feature on batteryPOP.com when you scale the browser window.
Try it. It&#8217;s nifty.</p>

<p>It&#8217;s also what allows the site to &#8216;just work&#8217; when
viewed on a variety of different devices; there&#8217;s no special iPad
version of the site, or device-specific CSS, just a bunch of Views that
know how to scale and position themselves based on browser dimensions
and a suite of reusable position formulas.</p>

<h2>PagedNodeOrchestrator</h2>

<p>Also discussed was what I called the <code>PagedNodeOrchestrator</code>, which
handles the paging and animation of children nodes at a certain level in
the tree-based menu structure. If you go to batteryPOP.com and click
What&#8217;s Poppin&#8217;, you&#8217;re 1 level deep in the tree menu, and there are (at
present) 12 nodes to display which get split into 2 pages of 6. Paging
left and right causes nodes to animate in and out of existence.</p>

<p>Furthermore, there are instances when user actions cause nodes to be
added/removed from the list (adding/removing items from your homepage),
and the menu will need to automagically rebalance and occasionally
collapse 2 pages into one and so on and so on. Due to all of the insane
whack-a-mole corner cases that presented themselves once I started in on
the more dynamic user homepage, the only solution was to write a
<code>PagedNodeOrchestrator</code>, which (similar to and based on
<code>Ember.CollectionView</code>) responds to changes in an underlying array of
models and automatically handles the generation, deletion, and animation
of their associated views as models are added/removed to the underlying
array and the <code>currentPageNumber</code> changes. Once I&#8217;d nailed down the code
to handle the basic paging/addition/deletion, all of those corner cases
resolved themselves. You can imagine my fist-pumping, Adderall-fueled
delight at Fourthmeal o&#8217;clock.</p>

<h3>Code Excerpt</h3>

<p>Here&#8217;s all the important bits of the <code>PagedNodeOrchestrator</code> for anyone
who&#8217;s interested in constructing a similar View-ish structure that
responds to changes in an underlying array. I&#8217;ve left some of the more
Shakespearian commenting intact.</p>

<figure class='code'><figcaption><span>paged_node_orchestrator.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.PagedNodeOrchestrator = </span><span class="nx">Em</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">init: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&quot;nodeViews&quot;</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'>    <span class="nx">@_nodeModelsDidChange</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># When nodeModels changes, handle observer changes and</span>
</span><span class='line'>  <span class="c1"># notify our callback. Note that a change in nodeModels</span>
</span><span class='line'>  <span class="c1"># means that someone changed the entire fucking</span>
</span><span class='line'>  <span class="c1"># array, and not just a few elements in there.</span>
</span><span class='line'>  <span class="c1"># We take this opportunity to let our arrayWillChange</span>
</span><span class='line'>  <span class="c1"># observer know what&#39;s up.</span>
</span><span class='line'>  <span class="nv">_nodeModelsWillChange: </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">beforeObserver</span><span class="p">((</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nv">nodeModels = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;nodeModels&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">removeArrayObserver</span> <span class="nx">@</span>
</span><span class='line'>    <span class="nv">len = </span><span class="k">if</span> <span class="nx">nodeModels</span> <span class="k">then</span> <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">@arrayWillChange</span><span class="p">(</span><span class="nx">nodeModels</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span>
</span><span class='line'>  <span class="p">),</span> <span class="s">&#39;nodeModels&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">_nodeModelsDidChange: </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">observer</span><span class="p">((</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nv">nodeModels = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;nodeModels&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">addArrayObserver</span> <span class="nx">@</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">len = </span><span class="k">if</span> <span class="nx">nodeModels</span> <span class="k">then</span> <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">@arrayDidChange</span><span class="p">(</span><span class="nx">nodeModels</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span>
</span><span class='line'>  <span class="p">),</span> <span class="s">&#39;nodeModels&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Ember.sendEvent(this, &#39;@array:before&#39;, [this, startIdx, removeAmt, addAmt]);</span>
</span><span class='line'>  <span class="nv">arrayWillChange: </span><span class="nf">(___, start, removedCount) -&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Basically, I need to cast away and destroy the nodeViews</span>
</span><span class='line'>    <span class="c1"># associated with the deleted nodeModels in nodeModels. I&#39;ll</span>
</span><span class='line'>    <span class="c1"># shorten the nodeViews array here and then add to it</span>
</span><span class='line'>    <span class="c1"># in didChange</span>
</span><span class='line'>    <span class="nx">@destroyNodeViewRange</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">removedCount</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Now remove those nodeViews from the list.</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&quot;nodeViews&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">removedCount</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">arrayDidChange: </span><span class="nf">(nodeModels, start, removed, added) -&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Fill in nodeViews with undefined space. </span>
</span><span class='line'>    <span class="nv">nodeViews = </span><span class="nx">get</span><span class="p">(</span><span class="nx">@</span><span class="p">,</span> <span class="s">&#39;nodeViews&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">nodeViews</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">added</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">modelLen = </span><span class="k">if</span> <span class="nx">nodeModels</span> <span class="k">then</span> <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nv">viewLen  = </span><span class="k">if</span> <span class="nx">nodeViews</span> <span class="k">then</span> <span class="nx">nodeViews</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">fmt</span><span class="p">(</span><span class="s">&quot;Node arrays out of sync! %@ vs. %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nx">modelLen</span><span class="p">,</span> <span class="nx">viewLen</span><span class="p">]),</span> <span class="nx">modelLen</span> <span class="o">==</span> <span class="nx">viewLen</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@refreshDisplay</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">currentPaging: </span><span class="p">(</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1"># First, determine the balanced page size.</span>
</span><span class='line'>    <span class="nv">TARGET_PAGE_SIZE = </span><span class="mi">6</span>
</span><span class='line'>    <span class="nv">nodeModels = </span><span class="nx">@get</span> <span class="s">&quot;nodeModels&quot;</span>
</span><span class='line'>    <span class="nv">len = </span><span class="k">if</span> <span class="nx">nodeModels</span> <span class="k">then</span> <span class="nx">nodeModels</span><span class="p">.</span><span class="nx">length</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nv">numPages = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">len</span> <span class="o">/</span> <span class="nx">TARGET_PAGE_SIZE</span><span class="p">)</span> <span class="o">||</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nv">nodesPerPage = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">len</span> <span class="o">/</span> <span class="nx">numPages</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Now determine the range of visible node indexes</span>
</span><span class='line'>    <span class="c1"># given the currentPageIndex. We also have to make sure</span>
</span><span class='line'>    <span class="c1"># to stay within the bounds in case we lost a bunch of nodes</span>
</span><span class='line'>    <span class="c1"># and we were on a later page.</span>
</span><span class='line'>    <span class="nv">currentPageIndex = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">@get</span><span class="p">(</span><span class="s">&quot;currentPageIndex&quot;</span><span class="p">),</span> <span class="nx">numPages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">visibleStart = </span><span class="nx">currentPageIndex</span> <span class="o">*</span> <span class="nx">nodesPerPage</span>
</span><span class='line'>    <span class="nv">visibleEnd = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">len</span><span class="p">,</span> <span class="nx">visibleStart</span> <span class="o">+</span> <span class="nx">nodesPerPage</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">currentPageSize = </span><span class="nx">visibleEnd</span> <span class="o">-</span> <span class="nx">visibleStart</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nv">numPages: </span><span class="nx">numPages</span>
</span><span class='line'>      <span class="nv">currentPageIndex: </span><span class="nx">currentPageIndex</span>
</span><span class='line'>      <span class="nv">maxNodesPerPage: </span><span class="nx">nodesPerPage</span>
</span><span class='line'>      <span class="nv">currentPageSize: </span><span class="nx">currentPageSize</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Indexes controlling which nodes are currently displayed:</span>
</span><span class='line'>      <span class="c1"># [ visibleStart, visibleEnd )</span>
</span><span class='line'>      <span class="nv">visibleStart: </span><span class="nx">visibleStart</span>
</span><span class='line'>      <span class="nv">visibleEnd: </span><span class="nx">visibleEnd</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">property</span><span class="p">(</span><span class="s">&quot;currentPageIndex&quot;</span><span class="p">,</span> <span class="s">&quot;nodeModels.length&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">refreshDisplay: </span><span class="nf">(force = false) -&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">nodeModels = </span><span class="nx">@get</span> <span class="s">&quot;nodeModels&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Calculate paging and update properties.</span>
</span><span class='line'>    <span class="nv">currentPaging = </span><span class="nx">@get</span> <span class="s">&quot;currentPaging&quot;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&quot;numPages&quot;</span><span class="p">,</span> <span class="nx">currentPaging</span><span class="p">.</span><span class="nx">numPages</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&quot;currentPageIndex&quot;</span><span class="p">,</span> <span class="nx">currentPaging</span><span class="p">.</span><span class="nx">currentPageIndex</span>
</span><span class='line'>    <span class="nv">visibleStart = </span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">visibleStart</span>
</span><span class='line'>    <span class="nv">visibleEnd = </span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">visibleEnd</span>
</span><span class='line'>    <span class="nv">currentPageSize = </span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">currentPageSize</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Loop through all models, creating nodeViews in the visible spectrum</span>
</span><span class='line'>    <span class="c1"># and hiding the ones that aren&#39;t supposed to be there.</span>
</span><span class='line'>    <span class="nv">nodeViews = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&quot;nodeViews&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">idx</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">...(</span><span class="nx">nodeModels</span><span class="p">.</span><span class="nx">length</span><span class="p">)]</span>
</span><span class='line'>      <span class="nv">nodeModel = </span><span class="nx">nodeModels</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">nodeView = </span><span class="nx">nodeViews</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nx">nodeView</span>
</span><span class='line'>        <span class="c1"># NodeView has been created. Should it be here?</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">visibleStart</span> <span class="o">&lt;=</span> <span class="nx">idx</span> <span class="o">&lt;</span> <span class="nx">visibleEnd</span>
</span><span class='line'>          <span class="c1"># Yes, it should. Make sure it&#39;s in the right place.</span>
</span><span class='line'>          <span class="nx">@presentNodeView</span><span class="p">(</span><span class="nx">nodeView</span><span class="p">,</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">-</span> <span class="nx">visibleStart</span><span class="p">)</span> <span class="o">/</span> <span class="nx">currentPageSize</span> <span class="o">+</span> <span class="nx">overlapOffset</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="c1"># No, it shouldn&#39;t be here. Send it in the proper direction</span>
</span><span class='line'>          <span class="c1"># if it&#39;s actually visible</span>
</span><span class='line'>          <span class="k">continue</span> <span class="k">if</span> <span class="nx">nodeView</span><span class="p">.</span><span class="nx">getPath</span><span class="p">(</span><span class="s">&quot;displayProperties.opacity&quot;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">0.1</span>
</span><span class='line'>          <span class="nv">positionFormula = </span><span class="k">if</span> <span class="nx">idx</span> <span class="o">&lt;</span> <span class="nx">visibleStart</span>
</span><span class='line'>            <span class="nx">App</span><span class="p">.</span><span class="nx">PagedOutRightPosition</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="nx">App</span><span class="p">.</span><span class="nx">PagedOutLeftPosition</span>
</span><span class='line'>          <span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;positionFormula&quot;</span><span class="p">,</span> <span class="nx">positionFormula</span>
</span><span class='line'>          <span class="nx">nodeView</span><span class="p">.</span><span class="nx">notifyPropertyChange</span> <span class="s">&quot;positionFormula&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1"># No nodeview exists in this slot yet. Should we create on?</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">visibleStart</span> <span class="o">&lt;=</span> <span class="nx">idx</span> <span class="o">&lt;</span> <span class="nx">visibleEnd</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Index </span><span class="si">#{</span><span class="nx">idx</span><span class="si">}</span><span class="s">: Creating node here&quot;</span>
</span><span class='line'>          <span class="c1"># Yes we should.</span>
</span><span class='line'>          <span class="nv">nodeView = </span><span class="nx">App</span><span class="p">.</span><span class="nx">nodeViewFactory</span><span class="p">(</span><span class="nx">nodeModel</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">nodeViews</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nodeView</span>
</span><span class='line'>          <span class="nx">@presentNodeView</span><span class="p">(</span><span class="nx">nodeView</span><span class="p">,</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">-</span> <span class="nx">visibleStart</span><span class="p">)</span> <span class="o">/</span> <span class="nx">currentPageSize</span> <span class="o">+</span> <span class="nx">overlapOffset</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">presentNodeView: </span><span class="nf">(nodeView, orbitRatio, firstDisplay = false) -&gt;</span>
</span><span class='line'>    <span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;stackController&quot;</span><span class="p">,</span> <span class="nx">@</span>
</span><span class='line'>    <span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;orbitRatio&quot;</span><span class="p">,</span> <span class="nx">orbitRatio</span>
</span><span class='line'>    <span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;positionFormula&quot;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">PrePresentPosition</span> <span class="k">if</span> <span class="nx">firstDisplay</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># TODO: combine into one timer event?</span>
</span><span class='line'>    <span class="nv">positioner = </span><span class="o">=&gt;</span>
</span><span class='line'>      <span class="c1">#debugger</span>
</span><span class='line'>      <span class="nx">nodeView</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;positionFormula&quot;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">OrbitingPosition</span>
</span><span class='line'>      <span class="nx">nodeView</span><span class="p">.</span><span class="nx">notifyPropertyChange</span> <span class="s">&quot;positionFormula&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">firstDisplay</span>
</span><span class='line'>      <span class="nx">runLater</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">positioner</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">positioner</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># @param {callback}: function(nodeView, index)</span>
</span><span class='line'>  <span class="nv">forEachVisibleNodeView: </span><span class="nf">(callback) -&gt;</span>
</span><span class='line'>    <span class="nv">currentPaging = </span><span class="nx">@get</span> <span class="s">&quot;currentPaging&quot;</span>
</span><span class='line'>    <span class="nv">nodeViews = </span><span class="nx">@get</span> <span class="s">&quot;nodeViews&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">visibleStart = </span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">visibleStart</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">idx</span> <span class="k">in</span> <span class="p">[</span><span class="nx">visibleStart</span><span class="p">...(</span><span class="nx">currentPaging</span><span class="p">.</span><span class="nx">visibleEnd</span><span class="p">)]</span>
</span><span class='line'>      <span class="nv">nodeView = </span><span class="nx">nodeViews</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">newNodeView = </span><span class="nx">callback</span> <span class="nx">nodeView</span><span class="p">,</span> <span class="nx">idx</span> <span class="o">-</span> <span class="nx">visibleStart</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Monitoring Changes on an Underlying Array</h3>

<p>So, to create any sort of object that responds to changes in an
underlying array (in Ember.js), one must</p>

<ol>
<li>Observe changes to the entire array property (i.e. handle the case
when someone sets <code>content</code> to an entirely different array, rather
than just adding to / removing from the existing array)</li>
<li>Use this observer to call <code>addArrayObserver</code>/<code>removeArrayObserver</code> on the
new/old array so that we can receive notifications on when individual
elements are added/removed from the array.</li>
</ol>


<p>This is the pattern that my <code>PagedNodeOrchestrator</code> follows, which
totally ripped off the pattern from the source for
<code>Ember.CollectionView</code>. Definitely take a look at the <code>CollectionView</code>
source for better commenting and less CoffeeScript and curse words.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRY and Tie Your Ember Routes]]></title>
    <link href="http://machty.github.com/blog/2012/09/28/dry-your-ember-routes/"/>
    <updated>2012-09-28T13:54:00-04:00</updated>
    <id>http://machty.github.com/blog/2012/09/28/dry-your-ember-routes</id>
    <content type="html"><![CDATA[<h4>UPDATE 10/1/12: see bottom the post for avoiding infinite loop issues</h4>

<h4>UPDATE 1/6/12: this post is deprecated since the new <a href="http://emberjs.com/guides/routing/defining-your-routes/">Ember Router v2 API</a> came out.</h4>

<p>A common complaint about Ember.js routing is that seems to force you to
create pairs of extremely light-weight, useless Views and Controllers
for each new route you create. Another is that it&#8217;s not particular
obvious how data ought to be shared between routes/controllers. Here&#8217;s
one way to cut down on the seeming boilerplate while linking your data.</p>

<!--more-->


<p>Consider the following example router
that describes an application that allows you to create new Campaigns,
but the forms for filling out all the information about a Campaign are
split between multiple pages.</p>

<figure class='code'><figcaption><span>app_router.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.Router = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">root: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>    <span class="c1"># ... index route, redirect-to&#39;s, etc.</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">new_campaign: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>      <span class="nv">route: </span><span class="s">&#39;/new_campaign&#39;</span>
</span><span class='line'>      <span class="nv">connectOutlets: </span><span class="nf">(router) -&gt;</span>
</span><span class='line'>        <span class="c1"># 1. Instantiate a NewCampaignController and NewCampaignView,</span>
</span><span class='line'>        <span class="c1"># and inject the latter into applicationController&#39;s outlet.</span>
</span><span class='line'>        <span class="c1"># also create the empty Campaign object that will be </span>
</span><span class='line'>        <span class="c1"># shared between the multiple pages of forms and pass it in</span>
</span><span class='line'>        <span class="c1"># as the context object to the controller.</span>
</span><span class='line'>        <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;applicationController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span><span class="p">(</span><span class="s">&#39;newCampaign&#39;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Campaign</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">basic_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>        <span class="nv">route: </span><span class="s">&#39;/basic_info&#39;</span>
</span><span class='line'>        <span class="nv">connectOutlets: </span><span class="nf">(router) -&gt;</span>
</span><span class='line'>          <span class="c1"># 2. Create BasicInfoController and BasicInfoView, inject</span>
</span><span class='line'>          <span class="c1"># into the NewCampaignView outlet.</span>
</span><span class='line'>          <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span><span class="p">(</span><span class="s">&#39;basicInfo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">more_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>        <span class="nv">route: </span><span class="s">&#39;/more_info&#39;</span>
</span><span class='line'>        <span class="nv">connectOutlets: </span><span class="nf">(router) -&gt;</span>
</span><span class='line'>          <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span><span class="p">(</span><span class="s">&#39;moreInfo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">#... a third page</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s two main problems with the code above:</p>

<ol>
<li>The <code>basic_info</code> and <code>more_info</code> child state controllers haven&#8217;t yet
been connected to the Campaign object created for the parent
<code>new_campaign</code> state.</li>
<li>Already, you&#8217;ve got to implement a bunch of nearly empty Views and
Controllers, namely:</li>
</ol>


<figure class='code'><figcaption><span>app_router.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.NewCampaignView = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">templateName: </span><span class="s">&quot;new_campaign&quot;</span>
</span><span class='line'><span class="nv">App.NewCampaignController = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.BasicInfoView = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">templateName: </span><span class="s">&quot;basic_info&quot;</span>
</span><span class='line'><span class="nv">App.BasicInfoController = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.MoreInfoView = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">templateName: </span><span class="s">&quot;more_info&quot;</span>
</span><span class='line'><span class="nv">App.MoreInfoController = </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>First off, if you&#8217;re a 1-to-1 class-to-file kind of person, your
codebase, app namespace, and editor tab space will bloat with nearly
empty View and Controller definitions. Sucks.</p>

<p>Fortunately, if the <code>connectOutlet</code> function comes in all sorts of
flavors, one where you you can pass in an options hash rather than
a string to specify exactly which Views / Controllers to create and what
your context option should be. Let us kill off the <code>BasicInfo</code>- and <code>MoreInfo</code>-
Controllers via the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># App.Router = ...</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">basic_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>        <span class="nv">connectOutlets: </span><span class="nf">(router) -&gt;</span>
</span><span class='line'>          <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span>
</span><span class='line'>            <span class="nv">viewClass: </span><span class="nx">App</span><span class="p">.</span><span class="nx">BasicInfoView</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">more_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>        <span class="nv">connectOutlets: </span><span class="nf">(router) -&gt;</span>
</span><span class='line'>          <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span>
</span><span class='line'>            <span class="nv">viewClass: </span><span class="nx">App</span><span class="p">.</span><span class="nx">MoreInfoView</span>
</span></code></pre></td></tr></table></div></figure>


<p>Turns out we&#8217;ve actually solved both problems: we no longer need
<code>BasicInfoController</code> or <code>MoreInfoController</code>, and we&#8217;ve actually
tied the templates for <code>BasicInfoView</code> and <code>MoreInfoView</code> correctly
to the Campaign object in NewCampaignController, and how exactly does
that work?</p>

<h3>Default Context Resolution: parentView</h3>

<p>Well, ever since
<a href="https://gist.github.com/2494968">Ember changed the way it resolves contexts</a>,
the context of a template is determined, by default, by looking up the
<code>controller</code> property of the View and using that if it exists, otherwise
it checks up the chain of <code>parentView</code>s to see if any of them have
defined a <code>controller</code> property to use as the context. <code>BasicInfoView</code>
and <code>MoreInfoView</code> don&#8217;t have controllers set (since we&#8217;re using the
<code>viewClass</code>-only form of <code>connectOutlet</code>), so their contexts resolve to
their <code>parentView</code>&#8217;s <code>controller</code>, namely <code>NewCampaignController</code>.
Therefore, the Handlebars templates for <code>BasicInfoView</code> and
<code>MoreInfoView</code> now use the <code>Campaign</code> object as their context.</p>

<h3>Can we do better?</h3>

<p>You might be itching to get rid of <code>BasicInfo-</code> and <code>MoreInfoView</code> as
well, since all they do is specify their <code>templateName</code>. You could do
this, if you wanted, by doing
<code>viewClass: Em.View.extend(templateName: "basic_info")</code>, but that seems
like overkill to me. Plus, you&#8217;d lose the benefits of being able to,
say, automatically focus a text field via the View&#8217;s <code>didInsertElement</code>
hook.</p>

<h3>Where can I learn more?</h3>

<p>Documentation on Ember routing is still pretty meager, so I&#8217;d definitely
encourage you to really dig into the Ember source, particularly the test
cases that deal with these kinds of issues. For example, tucked right in
the middle of <code>controller_test.js</code> is</p>

<figure class='code'><figcaption><span>app_router.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;if the controller is explicitly set to null while connecting an outlet, the instantiated view will inherit its controller from its parent view&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which isn&#8217;t exactly what&#8217;s happening regarding context resolution, but still clued me into this
approach.</p>

<h3>Update: Infinite Loop Gotcha</h3>

<p>I&#8217;ve been refactoring like a madman since discovering this and in some
cases I was getting stack overflows that were hard to trace down, but I
found the cause: if the <code>viewClass</code> you specify has an unnamed
<code>outlet</code> in its template, you&#8217;ll get an infinite loop. I&#8217;m 90% sure
the reason why is that when you use the <code>viewClass</code>-only form of
connectOutlet, the default outlet name resolves to <code>view</code> (the default)
and steps on the namespace toes of the parent view outlet that 1) had
the same name (view) and was 2) (more importantly) tied to the same
single controller. So, there&#8217;s namespace collisions. You can avoid this
by either getting rid of the leaf view&#8217;s <code>outlet</code> (which might be
the case if you&#8217;ve been unquestioningly throwing outlets into templates
that don&#8217;t actually inject child views&#8230; we&#8217;re probably all guilty of
this at some point in our struggles with the router), or, if you
actually need the outlet, just give it a sensible name that won&#8217;t
collide with any other outlet attached to the shared controller. Then
when you want to inject a view into <em>that</em> outlet, you can do:</p>

<figure class='code'><figcaption><span>app_router.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">basic_info: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>    <span class="nv">route: </span><span class="s">&#39;/basic_info&#39;</span>
</span><span class='line'>    <span class="nv">connectOutlets: </span><span class="nf">(router) -&gt;</span>
</span><span class='line'>      <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span>
</span><span class='line'>        <span class="nv">viewClass: </span><span class="nx">App</span><span class="p">.</span><span class="nx">BasicInfoView</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">index: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>      <span class="nv">route: </span><span class="s">&#39;/&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">captcha: </span><span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>      <span class="nv">route: </span><span class="s">&#39;/captcha&#39;</span>
</span><span class='line'>      <span class="nv">connectOutlets: </span><span class="nf">(router) -&gt;</span>
</span><span class='line'>        <span class="c1"># Assume theres an outlet named captcha in the basic_info template.</span>
</span><span class='line'>        <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;newCampaignController&#39;</span><span class="p">).</span><span class="nx">connectOutlet</span>
</span><span class='line'>          <span class="nv">viewClass: </span><span class="nx">App</span><span class="p">.</span><span class="nx">CaptchaView</span>
</span><span class='line'>          <span class="nv">outletName: </span><span class="s">&#39;captcha&#39;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding up Firefox CSS3 transform transitions with rotate(0.01deg)]]></title>
    <link href="http://machty.github.com/blog/2012/08/07/speeding-up-ff-css3-transform-transitions-with-rotate/"/>
    <updated>2012-08-07T02:53:00-04:00</updated>
    <id>http://machty.github.com/blog/2012/08/07/speeding-up-ff-css3-transform-transitions-with-rotate</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a heavily animated (non-Flash) kids&#8217; website and was getting some exceptionally slow performance from Firefox during supposedly GPU-accelerated CSS3 transitions.</p>

<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=663776">Turns out there&#8217;s a bug</a>, still unaddressed, that lubricates Gecko with jank molasses anytime it has to animate a transition involving the <code>scale()</code> property. The solution? Add a dash of <code>rotate(0.01deg)</code> to your <code>transform</code> property and the problem magically goes away. Somehow, adding a small degree of unnoticeable rotation renders the transition way more smoothly, and this goes for both CSS3 transitions and animations in Firefox.</p>

<p>So if you&#8217;d like to transition <code>-moz-transform</code> to <code>scale(2)</code>, set it instead to <code>scale(2) rotate(0.01deg)</code> and watch the jank magically disappear.</p>
]]></content>
  </entry>
  
</feed>

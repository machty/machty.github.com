<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[machty's thoughtz]]></title>
  <link href="http://machty.github.com/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2014-06-29T19:22:15-04:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Social Media Triggers]]></title>
    <link href="http://machty.github.com/blog/2014/06/29/social-media-triggers/"/>
    <updated>2014-06-29T19:00:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/06/29/social-media-triggers</id>
    <content type="html"><![CDATA[<p>I&#8217;ve enjoyed about a week away from Twitter, and hope to prolong this
hiatus. Twitter isn&#8217;t consistent with a lot of the lifestyle
changes I&#8217;ve been nagging myself to make. Twitter is snack drawer
positioned arms-reach away from the bed of someone trying to maintain a
diet. It&#8217;s a total trigger for me to retrogress into class clown attention
whore behavior I&#8217;ve been exhibiting since I was 5. So I&#8217;m on a break.</p>

<p>Twitter encourages me to project a public facade of empty-headed
buffoonery fueled by zany sarcasm and Photoshop. The last few months,
I&#8217;ve had various opportunities to meet in person people who only know me
by this facade, and it&#8217;s draining and depressing to keep it up in
person.</p>

<p>So I&#8217;m on a break. I&#8217;ve rediscovered distraction-free boredom. And it&#8217;s
been glorious. I play music again. I sing. When I get frustrated in my
endeavors to improve at my hobbies or my crafts, I have one less
mindless outlet distracting me away from pushing through the difficult
moments. Maybe I&#8217;ll return to Twitter when I have an album to promote.
Or something worth talking about.</p>

<p>This is where I&#8217;m supposed to apologize for a serious post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/06/20/daily-journal/"/>
    <updated>2014-06-20T10:44:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/06/20/daily-journal</id>
    <content type="html"><![CDATA[<h2>Push Notifications</h2>

<p>Apple uses APNS (Apple Push Notification Service) and Android uses
GCM (Google Cloud Message). Compare/contrast:</p>

<p>Apple:
- Max payload size: 256 bytes
- When the app is inactive:
  - Read <code>aps</code> hash:</p>

<pre><code>- Display `alert`
- Play `sound`
- Update app's `badge` number
</code></pre>

<p>Android
- Max payload size: 4096 bytes
- Has no <code>badge</code> option
- Supports <code>collapse_key</code> to collapse identical messages, like &#8220;New
  Mail&#8221; messages, which only need to be responded to once, and require
  only one server fetch.</p>

<p>About payload size: this includes all the JSON padding. The smallest
message is an empty message, represented by the following payload:</p>

<pre><code>{"aps":{"alert":""}}
</code></pre>

<p>This is 20 chars/bytes, meaning you have 236 bytes left for a message.
But push notification payloads often include a badge number, and an
alert to play.</p>

<p>Source: <a href="http://stackoverflow.com/a/6308462/914123">this lovely SO</a></p>

<p><a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html">From the docs</a>:</p>

<blockquote><p>If the target application isnâ€™t running when the notification
arrives, the alert message, sound, or badge value is played or
shown. If the application is running, the system delivers the
notification to the application delegate as an NSDictionary
object. The dictionary contains the corresponding Cocoa
property-list objects (plus NSNull).</p></blockquote>

<h2>DAS: Boundaries</h2>

<p>https://www.destroyallsoftware.com/talks/boundaries</p>

<p>Integration tests a scam because:
- if 50 conditionals in your app, 2<sup>50</sup> paths, and no way to
- as code grows, time of each test grows (due to more setup, DB stuff,
  etc)</p>

<h2><code>after_commit</code></h2>

<p>This is a hook available within <code>ActiveRecord::Base</code> subclasses
that let you run some code post-transaction. I was confused by this
because a lot of the examples made it seem like you could just
run a method called <code>after_commit</code> in controller code or something,
but nay.</p>

<p>Controller code isn&#8217;t run in a transaction; transactions are only
automatic within <code>.save</code>.</p>

<h2>Sidekiq serializers params via JSON.dump</h2>

<p>This answers my question as to whether symbolized keys are preserved
when passing hash args to a Sidekiq worker: JSON.dump turns string
keys into symbols.</p>

<h2>Difference between <code>Fiber#resume</code> and <code>transfer</code></h2>

<p>Both will transfer control to the fiber you call it on; the difference
is that if that new fiber calls yield, it</p>

<pre><code>f0 
  f1.resume
    Fiber.yield
</code></pre>

<p>FUCK! i don&#8217;t know. TODO come back to this.</p>

<p>Followup: transfer transfers control to another Fiber. The transfer-er
doesn&#8217;t necessarily expect to get returned to, so if the transfer-ee
yields, it&#8217;ll yield the value back to whoever spawned the transfer-er,
rather than return control back to the transfer-er. It&#8217;s mega fucking
confusing.</p>

<p>Also, you have to <code>require 'fiber'</code> to even use this shit.</p>

<h2>~~2.5 in js</h2>

<pre><code>~~2.5  // 2
~~2    //-3
~~-4.2 // 4
</code></pre>

<p>Removes everything to the right of the decimal point, so it&#8217;s like
Math.floor except Math.floor doesn&#8217;t remove stuff to the right of the
decimal point for negative numbers.</p>

<h2><code>void</code> operator</h2>

<p><code>void 0</code> or <code>void(0)</code> evaluates the expression and then returns
undefined. So I could do <code>void (anyNumberOfBullshits())</code> and it&#8217;d be
undefined. Compared to just writing undefined, it:</p>

<ul>
<li>works even if <code>undefined</code> (a variable) has been redefined</li>
<li>is shorter than writing <code>undefined</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/06/03/daily-journal/"/>
    <updated>2014-06-03T11:57:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/06/03/daily-journal</id>
    <content type="html"><![CDATA[<h3><code>&lt;base&gt;</code> tag</h3>

<p>From <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base">MDN</a>:</p>

<blockquote><p>The HTML Base Element (<code>&lt;base&gt;</code>) specifies the base URL to use for
all relative URLs contained within a document. There is maximum
one <code>&lt;base&gt;</code> element in a document.</p></blockquote>

<p>You can also specify the target for all links in the base tag. Crazy?</p>

<p>http://jsbin.com/tedik/1/edit</p>

<p>Note that it also supports values like &#8220;../&#8221;, which is how I got my
ember-cli tests.html to work when I got rid of the base url config.</p>

<h3>bootleg</h3>

<blockquote><p>(esp. of liquor, computer software, or recordings) made,
distributed, or sold illegally: bootleg cassettes | bootleg whiskey.</p></blockquote>

<h3>Ember proto CPs</h3>

<p>You can get the proto of an Ember class via <code>Klass.proto()</code> and
you can even invoke its CPs, but where are they cached? Answer: on the
meta of the prototype, and invoking the CP on an instance of that class
will not reuse that cache but rather use its own instance cache.</p>

<p>http://emberjs.jsbin.com/ucanam/5351/edit</p>

<p>Later realization: <em>obviously</em> it had to work this way. What, would all
instances just magically share the proto cached CP value? That&#8217;s
idiotic.</p>

<h3>CrossWalk</h3>

<p>Like Cordova but you get your own browser runtime, so no platform
browser discrepancies.</p>

<p>https://crosswalk-project.org/#documentation/about</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/31/daily-journal/"/>
    <updated>2014-05-31T13:03:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/31/daily-journal</id>
    <content type="html"><![CDATA[<h3>Git relative revisions</h3>

<pre><code>git checkout 08h398se~1 
</code></pre>

<h3>Lazy CPs stripped down examples</h3>

<p>Observing a CP requires consuming it with a get
before its observers will fire upon change:</p>

<p>http://emberjs.jsbin.com/ucanam/5200/edit</p>

<p>But, for some reason, future changes to that property
don&#8217;t fire that observer:</p>

<p>http://emberjs.jsbin.com/ucanam/5203/edit</p>

<p>This is because firing the observer tears down the chain
nodes unless they&#8217;re activated again by future gets:</p>

<p>http://emberjs.jsbin.com/ucanam/5204/edit</p>

<p>But firing the observer tears down the chain
nodes, so future fires also need to be preceded by
a get to make the observer alive again:</p>

<p>http://emberjs.jsbin.com/ucanam/5201/edit</p>

<p>http://emberjs.jsbin.com/ucanam/5198/edit</p>

<pre><code>// CRUCIAL REALIZATION!!!! THIS IS HOW OBSERVERS
// STAY LIVE IN VIEWS; RE-RENDERED METAMORPH TEMPLATES
// CALL .get() to get the LATEST VALUE OF THE FUCK.
// BUT GENERALLY SPEAKING YOU JUST NEED TO CALL .GET()
// ON THE THING TO MAKE IT ALIVE AGAIN!
http://emberjs.jsbin.com/ucanam/5208/edit



/*
Ember.addObserver(pojo, 'foo', function() {
  console.log('foo observer fired');
});
*/



// These additional changes
// don't fire the fooAlias
// observer, unless we continue
// consuming (uncomment the stuff)
//Ember.get(pojo, 'fooAlias');
Ember.set(pojo, 'foo', 7);
//Ember.get(pojo, 'fooAlias');
Ember.set(pojo, 'foo', 8);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Meta]]></title>
    <link href="http://machty.github.com/blog/2014/05/31/ember-meta/"/>
    <updated>2014-05-31T07:27:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/31/ember-meta</id>
    <content type="html"><![CDATA[<h3>Ember Meta</h3>

<p><em>This will start off in my typical meandering daily journal form and
hopefully evolve into something good enough for an ARCHITECTURE.md</em></p>

<p>Ember&#8217;s internals make heavy use of meta objects, which are generated
and attached to objects in order to keep track of bindings, computed
properties, observers, and all sorts of other things evolving Ember magic.</p>

<h4><code>EMPTY_META</code></h4>

<p><code>EMPTY_META</code> is a default, empty meta object that represents an object
with no observers, bindings, or computed properties.</p>

<p><code>Ember.meta</code> is the function that takes an object and returns its meta
object; asking Ember.meta for a read-only meta object for a POJO
will return <code>Ember.EMPTY_META</code></p>

<pre><code>Ember.meta({}, false) === Ember.EMPTY_META // true

http://emberjs.jsbin.com/ucanam/5173/edit
</code></pre>

<p>This is an optimization that lets us pretend as if every object in
Emberland had a meta object, simplifying our binding/observer algorithms
while not wastefully generating meta objects for objects that don&#8217;t need
their own separate copies. It&#8217;s a form of copy-on-write.</p>

<pre><code>var pojo = {
  foo: 'wat'
};

console.assert(Ember.meta(pojo, false) === Ember.EMPTY_META);

// Add a computed property, which requires writing to meta.
Ember.defineProperty(pojo, 'fooAlias', Ember.computed.alias('foo'));

console.assert(Ember.get(pojo, 'foo') === 'wat');

var newMeta = Ember.meta(pojo, false)

console.assert(newMeta !== Ember.EMPTY_META);

// http://emberjs.jsbin.com/ucanam/5176/edit
</code></pre>

<h4><code>META_DESC</code></h4>

<p>This is the ES5 descriptor for the property stashed on an object that
points to its meta object:</p>

<pre><code>{
  writable: true,
  configurable: false,
  enumerable: false,
  value: null
};
</code></pre>

<p>This makes the property non-enumerable, which is why the meta object
won&#8217;t show up when iterating over an object with <code>for..in</code>.</p>

<h4>Meta obj structure</h4>

<p><code>EMPTY_META</code> is just <code>new Meta(null)</code>, and here&#8217;s the meta structure:</p>

<pre><code>Meta.prototype = {
  // Set to {} by constructor

    // dictionary of all Ember.Descriptor properties
    // defined on for the obj, e.g computed properties
    descs: null,    

    // dictionary of properties on the object that are
    // being observed, where the key is the observed
    // property name and the value is the number of
    // active observers of this property.
    // e.g. meta.watching.foo === 2 means that two
    // observers are watching obj.foo for changes.
    watching: null,

    // TODO
    cache: null,

    // TODO
    cacheMeta: null,

    // The owner of this meta object; important to keep track
    // of because when prototypal inheritance is involved, a
    // child object will initially point to the same meta obj
    // as its prototype, even though they should have separate
    // meta obj. `Ember.meta()` detects this by checking to see
    // if meta.source equals the passed in object, and if not,
    // it generates a new meta object
    source: null,

  // Left as null by constructor
  deps: null,
  listeners: null,
  mixins: null,
  bindings: null,
  chains: null,
  chainWatchers: null,
  values: null,

  // The prototype of source
  //   meta.proto.isPrototypeOf(meta.source) // true


  proto: null
};

//    ret = o_create(ret);
//    ret.descs     = o_create(ret.descs);

// why is this o_create? 
// if proto.foo is being watched, and obj.foo is overwritten
// to some other value, then it's definitely disconnected at
// that point, right? Even if it's not overwritten, if you have
// 
// proto = {
// }
// 
//    ret.watching  = o_create(ret.watching);
//    ret.cache     = {};
//    ret.cacheMeta = {};
//    ret.source    = obj;

// TODO: categorize this realization
// removeDependentKeys calls iterDeps, which loops
// over deps[propName] &gt; 0,
// and then the cp.didChange method decrements
// the deps in the meta in removeDependentKeys();
// this method is called in two places:
// - didChange()
// - teardown()
// 
// note that it doesn't do this for non-cacheables CPs.
</code></pre>

<p>If CP#didChange removes dependent keys, who adds it back in template situations?
The view that was installed will call get() on that CP, and .get() on a cacheable property will call addDependentKeys</p>

<p>So the rule is that if you want an observer be/stay alive, you need to
call get on that changed prop. AH HA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/28/daily-journal/"/>
    <updated>2014-05-28T15:42:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/28/daily-journal</id>
    <content type="html"><![CDATA[<h3>Rubymotion</h3>

<p>The next version will support Android. Ruby on Android. By PHH.</p>

<p>http://blog.rubymotion.com/post/87048665656/rubymotion-3-0-sneak-peek-android-support</p>

<h3>Magnet Link</h3>

<p><a href="http://en.wikipedia.org/wiki/Magnet_uri">Wikipedia</a></p>

<p>e.g. for all my illegal torrent downloads</p>

<pre><code>magnet:?xt=urn:btih:7O4OWESOQIXMYWY6U36MXWRICAUDB2OU&amp;dn=Louie.S04E05.HDTV.x264-LOL&amp;tr=udp://tracker.openbittorrent.com:80&amp;tr=udp://tracker.publicbt.com:80&amp;tr=udp://tracker.istole.it:80&amp;tr=udp://open.demonii.com:80&amp;tr=udp://tracker.coppersurfer.tk:80
</code></pre>

<ul>
<li>&#8220;de facto&#8221; standard; no official spec</li>
<li>The scheme is &#8220;magnet&#8221;, even though there&#8217;s not &#8220;magnent&#8221; protocol in
the way &#8220;http&#8221; is a scheme that refers to the Hyper Text Transfer
Protocol.</li>
<li>URI has target file&#8217;s contents built into hash; anyone with the file
can generate the URL without needing to refer to a central authority.
This makes search results guaranteed; the server either has the thing
you&#8217;re looking for or it doesn&#8217;t, and if you&#8217;d, say, like to continue
downloading the latest episode of Louie from a source, you could
search by content hash rather than by &#8220;Louie S04E07&#8221; which might yield
a bunch of different encodings and other things you don&#8217;t actually
want.</li>
<li>magnet URIs have no <a href="http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax">hierarchical part</a>,
but rather immediately begin with a query param.</li>
<li><code>xt</code> query param refers to &#8220;exact topic&#8221;; this is followed by the hash
type, such as sha1, or in the example above, &#8220;btih&#8221;, which is a SHA1
hash of a BitTorrent Info Hash (TODO: write about bittorrent meta)</li>
<li><code>dn</code> = display name, e.g. <code>Louie.S04E05.HDTV.x264-LOL</code></li>
<li><code>tr</code> = tracker url for bittorrent downloads; note in the above sample
magnet URL <code>tr</code> appears multiple types; wiki suggests appending an
incrementing <code>.N</code> to query param keys, but I guess that&#8217;s not a
requirement.</li>
</ul>


<blockquote><p>The Pirate Bay migrated from .torrent files to magnet URI in February 2012. This migration made the storage footprint of The Pirate Bay exceptionally small. A user demonstrated that the total size of The Pirate Bay magnets would be approximately 90MB of compressed data.[2]</p></blockquote>

<h3>STOMP</h3>

<p><a href="http://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol">Wikipedia</a></p>

<p>Streaming Text Oriented Messaging Protocol: protocol designed for
working with Message-Oriented Middleware (MOM). It&#8217;s language-agnostic,
so you could have a Ruby STOMP client talking to a Java STOMP server,
etc.</p>

<p>Go figure the Ruby Server that I found depends on EventMachine. How
could it not? I should probably figure out how servers queue up
requests. Is that the job of Thin/Mongrel/Unicorn?</p>

<h3>Ember overwriting get-only computed properties</h3>

<p>Best explained in a <a href="http://emberjs.jsbin.com/ucanam/5139/edit">JSBin</a>.</p>

<p>Setting a computed property that is get-only (which is determined
by the fact that the supplied function has an arity of &lt;= 1) will
overwrite that CP with whatever static value you&#8217;re setting it to.</p>

<p>Relevant
<a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-metal/lib/computed.js#L490-L492">Ember</a>
<a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-metal/lib/computed.js#L1224-L1228">links</a></p>

<h3>Defeaturify doesn&#8217;t get run before Ember API docs get generated</h3>

<p>This is probably the least timeless thing I could write about.</p>

<h3>Drop permissions in a server setting</h3>

<p>It&#8217;s an OS requirement that running a server on port 80 requires root
permissions, which means you need to be logged in as root or running
sudo to start up a server on port 80, but it can be risky to leave a
server running with full permissions, so it&#8217;s common practice to <em>drop
permissions</em> after the server has been start up.</p>

<p>I stumbled upon this concept while reading
<a href="https://github.com/ruby/ruby/blob/trunk/lib/webrick.rb#L14-L15">WEBrick code</a>:</p>

<pre><code># WEBrick also includes tools for daemonizing a process and starting a process
# at a higher privilege level and dropping permissions.
</code></pre>

<h3>Michael McKean</h3>

<p><img src="http://f.cl.ly/items/0x23191Z3K1J0M0Z1e3D/coneheads03.jpg" alt="Michael McKean" /></p>

<p>A total hateable 90s &#8220;that guy&#8221;.</p>

<h3>Ruby Fiber-local variables</h3>

<p><code>Thread#[]</code> is <a href="http://www.ruby-doc.org/core-2.1.1/Thread.html#method-i-5B-5D">a thing</a></p>

<p>It&#8217;s an accessor for fiber-local variables. What does that mean? It
means even though you&#8217;re saying <code>Thread.current[:a]</code>, which looks as if
you&#8217;re grabbing <code>a</code> as tied to the current thread, it&#8217;ll actually be
grabbing <code>a</code> from the currently active Fiber within that Thread, which
is a little misleading (and obviously wasn&#8217;t a problem before Fibers
were a thing in 1.9.2).</p>

<p>Example:</p>

<pre><code>Thread.new {
  Thread.current[:a] = "lol"
  Fiber.new {
    puts "in new fiber: #{Thread.current[:a]}"
  }.resume
  puts "in original fiber: #{Thread.current[:a]}"
}.join
</code></pre>

<p>This prints</p>

<pre><code>in new fiber:
in original fiber: lol
</code></pre>

<h3>Thread#join</h3>

<p>I knew this but I&#8217;m forgetful.</p>

<p>The following program prints &#8220;DONE&#8221; and exits:</p>

<pre><code>Thread.new {
  sleep 1
  puts "OMG"
}
puts "DONE"
</code></pre>

<p>The following program waits a second, prints &#8220;OMG&#8221;, prints &#8220;DONE&#8221; and quits:</p>

<pre><code>Thread.new {
  sleep 1
  puts "OMG"
}.join
puts "DONE"
</code></pre>

<p><code>Thread#join</code> pauses the current thread until the <code>.join</code>d thread
completes. Dur.</p>

<h3>Rack Request Store</h3>

<p><a href="https://github.com/steveklabnik/request_store">GitHub</a></p>

<p>Apparently <code>Thread.current</code> is already well known as common storage
place for global state for whichever thread you&#8217;re on (which is safer
than sharing/clobbering some truly global var shared b/w threads). The
problem is that servers don&#8217;t agree on Thread re-use:</p>

<pre><code>def index
  Thread.current[:counter] ||= 0
  Thread.current[:counter] += 1
  render :text =&gt; Thread.current[:counter]
end
</code></pre>

<blockquote><p>If we ran this on MRI with Webrick, you&#8217;d get 1 as output, every time. But if you run it with Thin, you get 1, then 2, then 3&#8230;</p></blockquote>

<p>Presumably that&#8217;s because WEBrick spawns a new thread for every request
while Thin reuses threads. (TODO: confirm this?)</p>

<p>So anyway, Rack RequestStore is a thread-local storage mechanism that
gets cleared at the beginning of every web request. The functioning code
is literally no more than:</p>

<pre><code>module RequestStore
  def self.store
    Thread.current[:request_store] ||= {}
  end

  def self.clear!
    Thread.current[:request_store] = {}
  end
end
</code></pre>

<p>and</p>

<pre><code>module RequestStore
  class Middleware
    def initialize(app)
      @app = app
    end

    def call(env)
      RequestStore.clear!
      @app.call(env)
    end
  end
end
</code></pre>

<p>and then you&#8217;d write in your app code:</p>

<pre><code>def index
  RequestStore.store[:foo] ||= 0
  RequestStore.store[:foo] += 1
  render :text =&gt; RequestStore.store[:foo]
end
</code></pre>

<p>so you still have to use <code>||=</code> to initialize values but you have the
guarantee that a previous value doesn&#8217;t stick around.</p>

<h3>Deadlock detected</h3>

<pre><code>1.9.3p484 :004 &gt; Thread.current.join
fatal: deadlock detected
</code></pre>

<p>Dur.</p>

<h3>POSIX: Portable Operating System Interface</h3>

<p>I had no idea what this was. It always &#8220;the thing that has something to
do with linux/unix and has opinions about utilities that you might find
both on linux and Mac OS&#8221;.</p>

<p>It&#8217;s a family of standards specified by the IEEE, specifically IEEE
1003. Linux, UNIX, and Mac OS X are POSIX-compliant, I believe, but what
does that mean?</p>

<p><a href="http://stackoverflow.com/questions/1780599/i-never-really-understood-what-is-posix">good SO question</a></p>

<p><a href="http://pubs.opengroup.org/onlinepubs/9699919799/">Readable POSIX Standard</a></p>

<p>The C programming language was standardized by POSIX, also BSD variant
exists.</p>

<h3>Difference b/w linux and unix</h3>

<p><a href="http://www.cyberciti.biz/faq/what-is-the-difference-between-linux-and-unix/">Source</a></p>

<p>UNIX is a copyrighted name; most UNIX system sare commercial in nature.
Open Group holds UNIX trademark.</p>

<p>Linux is a UNIX clone created by Linus Torvalds and aims for POSIX
compliance.</p>

<p>Linux is just a kernel; everything else that goes into a Linux distro is
GUI systems and GNU utilities, filled in by third parties, whereas with
a UNIX OS, everything comes from a single source/vendor so it&#8217;s
considered a &#8220;complete operating system&#8221;.</p>

<p>Linux is free, redistributable under GNU licenses. Most UNIX-like
systems not free, w OpenSolaris as exception. But some Linux systems
are accompanied by Linux support, consultancy, bug fixing, and training
for additional fees, e.g. Redhat.</p>

<p>Some UNIX OS&#8217;s</p>

<ul>
<li>HP-UX</li>
<li>IBM AIX</li>
<li>Sun Solaris</li>
<li>Mac OS X (the X emphasizes relation w UNIX)</li>
<li>IRIX</li>
</ul>


<p>Some Linux Distributions</p>

<ul>
<li>Redhat Enterprise Linux</li>
<li>Fedora Linux</li>
<li>Debian Linux</li>
<li>Suse Enterprise Linux</li>
<li>Ubuntu Linux</li>
</ul>


<p>Commonalities b/w Unix and Linux</p>

<ul>
<li>GUI, file, windows manager</li>
<li>Shells (ksh, csh, bash)</li>
<li>Various office apps (open office)</li>
<li>Development tools (perl, php, python, GNU C/C++ compilers)</li>
<li>POSIX interface (wat? i guess this means both are POSIX compliant)</li>
</ul>


<p><a href="http://en.wikipedia.org/wiki/File:Unix_history.svg">Unix History graphic</a></p>

<h3>IEEE: Institute of Electrical and Electronics Engineers</h3>

<p>A professional association with corp office in NYC, dedicated to
technical advancement and excellence. Known for their conferences,
educational activities, and in particular their standards development.</p>

<p>How do they make money? Let&#8217;s look at their
<a href="http://sites.ieee.org/annualreport/files/2013/10/IEEE-2012-Annual-Report-Full.pdf">annual report</a>.</p>

<p>Members pay dues. Full year membership is $187. They have 429,000
members. Membership bolsters your tech career, I guess. Hear about
conferences n shit.</p>

<p>$406M in revenue, mostly in periodicals and conferences, then
membership, then standards, then other things.</p>

<p>So how do they make money off of standards? Someone approaches them and
says &#8220;hey you usually do a good job on this stuff; we&#8217;ll pay you to help
out on these standards?&#8221;</p>

<p><a href="http://standards.ieee.org/develop/process.html">what a nice resource</a></p>

<blockquote><p>The development of a new standard is typically triggered by a formal request, submitted to an SDO (Standards Development Organization) by a Sponsoring Body (individual or entity, such as an industry society) for review and evaluation. The SDO mandates, oversees, and helps facilitate the process for standards development. The Sponsor for the standards project assumes responsibility for the respective area of standards development, including the organization of the standards development team and its activities.</p></blockquote>

<p><a href="http://standards.ieee.org/develop/projstart.html">then there&#8217;s this</a></p>

<ul>
<li>An idea or concept needs to be standardized</li>
<li>Sponsorship organization comes along to coalesce the ideas of
individuals and to financially back the standardization process.</li>
</ul>


<p>What are some of their most &#8220;popular&#8221; standards? These are based on the
Wikipedia search autocomplete of &#8220;IEEE &#8220;:</p>

<ul>
<li>IEEE 802.11: MAC (media access control) and physical layer (PHY) specs
for implementing wireless LAN (WLAN) in certain frequency bands. IEEE
802 is the</li>
<li>IEEE 802.11g-2003 et al: enhancements to the original spec, expanding
to other frequencies.</li>
<li>IEEE 1394: FireWire</li>
<li>IEEE 1003: POSIX</li>
</ul>


<p>&#8220;IEEE 802&#8221; refers to the family of standards dealing with LAN. Different
suffixes refer to different standards (rather than versions of
standards).</p>

<p>Also, when an amendment comes out, e.g. 802.11g-2003, it is
revoked when fully incorporated into the main standard, but
manufacturers will still refer to the amendment code as a means to
concisely advertise a product&#8217;s capability:</p>

<blockquote><p>While each amendment is officially revoked when it is incorporated in the latest version of the standard, the corporate world tends to market to the revisions because they concisely denote capabilities of their products. As a result, in the market place, each revision tends to become its own standard.</p></blockquote>

<h3>Pass a return value to &#8220;break&#8221; in Ruby</h3>

<p><img src="http://f.cl.ly/items/0Q311t0Y1R2v1O29081u/Image%202014-05-29%20at%2011.51.58%20AM.png" alt="twitter convo" /></p>

<pre><code>[1,2,3].map { |i| break "shit" } # =&gt; "shit"
</code></pre>

<p>More generally:</p>

<pre><code>def foo
  yield
  "shit"
end

foo { break "naw" } # =&gt; "naw"
</code></pre>

<p><code>break x</code> means &#8220;force the method that yielded me to return x&#8221;.</p>

<h3>Ruby Garbage Collection</h3>

<p>Phrasing from <a href="http://samsaffron.com/archive/2014/04/08/ruby-2-1-garbage-collection-ready-for-production">this article</a></p>

<p>Ruby 2.0: collect GC every 8MB; too small for most Rails apps
Ruby 2.1: Revised to have defaults make sense for both script and web apps</p>

<p>Specifically, expand GC limit every time limit hit, with ceilings.</p>

<p>But there was a 2.1 bug fixed in 2.1.1. In addition, there&#8217;s still a
&#8220;memory doubling&#8221; issue under 2.1.1 due to the generational GC added to
2.1.</p>

<p>The gist of generational GC is that:</p>

<ul>
<li>Oftentimes, an allocated piece of memory is transient; it&#8217;s used once
and immediately its consumer lets go of it, and it can be released
back to the system</li>
<li>Objects that survive a first sweep are statistically likely to
maintain in use for a long time, so it doesn&#8217;t make sense to
constantly sweep these objects in every GC pass.</li>
<li>So separate garbage collection into two generations, old and new.
New-gen allocations get moved to old-gen if they survive the first
sweep, and old-gen sweeps (major GC events) happen way less
frequently.</li>
</ul>


<p>This apparently made Ruby 2.1 10x faster on average. But according to
this article, the 2.1 algo was too simplistic for web apps since web
apps perform lots of &#8220;medium&#8221; allocations (allocations that survive a
first sweep but can thereafter very quickly be swept up), e.g. most
(all?) allocations will take place during a web request, so if a GC hits
in the middle of a request, a lot of new-gen allocations will be moved
to old-gen, even though much of the new-genners could be cleaned up at
the end of the request.</p>

<p>Bad side effects:</p>

<ul>
<li>Major GC events run more often (triggered by oldgen growth)</li>
<li>Oldgen grows beyond what we need (saturated by medium-gen)</li>
</ul>


<p>.NET and Java use 3 generations, gen0 survivors go to gen1, then gen1 to
gen2, where they remain.</p>

<p>The planned (and I guess implemented at this point) refactor is to
requires that objects will have to survive 2 minor GCs to be promoted to
oldgen, therefore, if no more than 1 minor GC runs during a request,
heaps will stay at optimal sizes. Slated for 2.2 release (not yet
released).</p>

<p>BTW, RSS refers to &#8220;resident set size&#8221;, the portion of a process&#8217;s
memory that is held in RAM, as in &#8216;in residence&#8217;. If it weren&#8217;t in
residence, it might be in swap or in filesystem.</p>

<p>So the Ruby algo is called <code>RGenGC</code>.</p>

<h3>Bitmap marking</h3>

<p><a href="http://patshaughnessy.net/2012/3/23/why-you-should-be-excited-about-garbage-collection-in-ruby-2-0">source</a></p>

<p>In MRI, lots data stored as metadata + RValue, e.g. &#8220;abc&#8221; stored as an
RString which is flags + &#8220;abc&#8221; stored on an RValue heap with lots of
other strings.</p>

<pre><code>[a,b,c,s,o,m,e,o,t,h,e,r,s,t,r,i,n,g]
</code></pre>

<p>Fun fact: your ruby code itself is converted into RValue structures as
it is parsed and converted into byte code.</p>

<p>GC is run when we&#8217;re out of RValue storage, loop over references an set
<code>FL_MARK</code> to mark the obj. Then leftover unmarked freeable objs are
collected into a singly-linked list, which will then be used for future
RValue allocs. If a heap (collection of RValue pointers) can&#8217;t free up
any more space, and additional heap is alloc&#8217;d.</p>

<h4>Copy-on-Write optimization</h4>

<p>(brought to you by POSIX, right? or BSD? TODO: nail this down)</p>

<p>Linux/UNIX/UNIX-like systems have COW (copy on write). Semantically, a
fork of a process means copying all of memory from starting process. But
a full copy doesn&#8217;t actually need to happen until one of the proces
writes.</p>

<p>Presumably this same thing happens if it&#8217;s the parent process that
writes to COW data, right? How does that work? Are they both considered
child processes? TODO!!!</p>

<p>But before bitmap sweeping, COW didn&#8217;t work for Ruby, because Ruby&#8217;s GC
involves writing to <code>FL_MARK</code> to mark a piece of data as referenced by
some other thing, and this sets off the OS&#8217;s copy-on-write behavior;
writing to <code>FL_MARK</code> looks like any other kind of memory write and the
OS doesn&#8217;t know the difference.</p>

<p>(note: <a href="http://www.rubyenterpriseedition.com/">Ruby Enterprise Edition</a>
fixed this, if you&#8217;re interested)</p>

<p>The MRI fix came with replacing <code>FL_MARK</code> with a bitmap of marked
values. It&#8217;s not a 2D bit map, it just means bits mapped to RValue
heap array elements. Obviously the bitmaps themselves are heavily
modified so they&#8217;ll definitely be fully copied, but they&#8217;re small so no
biggie.</p>

<p>Heaps now must be &#8220;aligned&#8221; with their maps, so we can&#8217;t just use boring
ol malloc, but rather <code>posix_memalign</code> to alloc something that
presumably doesn&#8217;t align with a word.</p>

<h3>Enumerable Lazy</h3>

<p>This is in 2.0. You don&#8217;t want to use it all the time for performance
reasons (the construction of all the intermediate blocks outweighs the
cost of evaluating some array you might not entirely consume), but it
allows you to do things like:</p>

<pre><code>require 'prime'
Prime.lazy.select {|x| x % 4 == 3 }.take(10).to_a
</code></pre>

<p><a href="http://railsware.com/blog/2012/03/13/ruby-2-0-enumerablelazy/">Read more</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/26/daily-journal/"/>
    <updated>2014-05-26T13:17:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/26/daily-journal</id>
    <content type="html"><![CDATA[<h3>EIP: Notes</h3>

<p>Consider reading <em>Data and Reality</em> by William Kent.</p>

<p>Semantic dissonance is ironed out by shared database schema; each app is
forced to conform its data to that schema before saving to that
database.</p>

<p>Coming up with unified schemas that meet the needs of multiple
applications is extremely difficult, and there are political
considerations; the delay of a flagship product so that a shared
database can be adhered to often leads to splitting.</p>

<h4>RPI: Remote Procedure Invocation</h4>

<h4>Web Service / WSDL</h4>

<p>Seems like I come across this term enough without actually knowing how
it&#8217;s specifically defined; presumably a REST API is a kind of web
service, but what&#8217;s the official definition?</p>

<p><a href="http://en.wikipedia.org/wiki/Web_service">Wikipedia says</a>:</p>

<blockquote><p>A Web service is a method of communication between two electronic devices
over a network. It is a software function provided at a network address
over the web with the service always on as in the concept of utility computing.</p></blockquote>

<p>A web service allows two software systems to interact with each other
over the internet. You can interact with a web service so long as you
have its publicly available address.</p>

<p>Rules for communication between web services are defined in WSDLs (Web
Services Description Language). A searchable dictionary of discoverable
WSDLs is a UDDI (Universal Description, Discovery and Integration).
Interacting with these services often involves using the SOAP protocol
(Simple Object Access Protocol), an XML format for structuring messages
for web services.</p>

<h4>Messaging</h4>

<p>Senders don&#8217;t just barf information into a messaging cloud but rather
adds this information to a particular Message Channel, likewise w
receivers who must explicitly specify Message Channels.</p>

<p>Channels are &#8220;logical addresses&#8221; which hide implementation details of
how the underlying messaging system actually delivers these messages.</p>

<p>It&#8217;s often possible but rare for channels to be dynamically created at
runtime; receivers would also need to know to look for such a channel,
so channels are usually decided by deploy time (apparently there are
exceptions?).</p>

<p>In Java et all, <code>new MessageQueue</code> won&#8217;t actually create a new channel,
but will just create a wrapper for a channel pre-defined in
administrative tools.</p>

<p>Channel names are generally boring ol alphanumeric names like
<code>MyChannel</code>, but hierarchical conventions exist to, e.g.
<code>BlahCorp/Prod/OrderProcessing/NewOrders</code>.</p>

<p>Two types of Message Channels: - <em>Point-to-Point</em> and
<em>Publish-Subscribe Channels</em>.</p>

<p>From the application dev&#8217;s perspective, there are a few different types
of messages:</p>

<ul>
<li>Command Message: invoke a procedure in another app</li>
<li>Document Message: pass data to another app</li>
<li>Event Message: notify another app of a change in this app</li>
<li>Request-Reply: receiver should send back a response</li>
</ul>


<p>A SOAP message is a <em>Message</em>, but it itself could be wrapped in another
outer message. Recursive, babeh.</p>

<h3>Git: detached HEAD state</h3>

<p><code>HEAD</code> is a reference to the currently checked-out commit. Usually it
points to a branch you have checked out, but if you try and check out a
specific commit, tag, or remote branch, you&#8217;ll go into detached HEAD
state.</p>

<p>Don&#8217;t call it &#8220;headless&#8221; state; you&#8217;re probably mixing terminology with
headless webkit or something, like I did; there&#8217;s no &#8220;headless&#8221; state
in Git, you always have a HEAD, but if it&#8217;s detached, it means you&#8217;re
not tied to a branch any more.</p>

<p>So <code>HEAD</code> always refers to the currently checkout out commit, which is
why if you run <code>git checkout HEAD~1</code> many times in a row, you&#8217;ll be
rewinding to a previous commit every time you run it rather than
repeatedly checking out the tip of the current branch minus one, which is what I
originally thought. Also, there is no &#8220;current branch&#8221; once you&#8217;re run
<code>git checkout HEAD~1</code>; the commit you&#8217;ve checked out could be an
ancestor in many different branches, so if you want to re-attach, you
have to be explicit.</p>

<h3>Filters and Pipes</h3>

<p>A pipe connects filters. A filter is a single purpose component that can
be reused. Filters have an input pipe and output pipe, and don&#8217;t
generally have knowledge of where the output pipe is pointing.</p>

<p>Why is it called a pipe and not a channel? Because a channel is named,
and anyone pushing or pulling from it is doing so according to some
logical intent, whereas filters are way dumber.</p>

<p>Filters can/should be implement via an abstract pipe interface, so that
all filtering could potentially happen within one machine, but at any
point the pipe could be turned into a full on Message Channel that might
go to some other machine.</p>

<p>Filters lend themselves nicely to testability as individually testable components.</p>

<p>Filters connected via async channels in their own processes/threads also
allow for higher throughput for typical pipeline reasons; 3 messages
that come in at the same time that need to be decrypted, authenticated,
and deduped can begin w the decryptor, which, once finished with the
first, can move on to the next. Assembly line style.</p>

<p>Parallelizing filters works best if the filter is stateless, e.g.
de-dupe would be a challenge to parallelize since it depends stores
previous messages to check for dupes, and wouldn&#8217;t function unless that
storage was shared.</p>

<h3>Message Router</h3>

<ul>
<li>Doesn&#8217;t modify message contents</li>
<li>Only decides destination message</li>
<li>Message Routers are meant to decouple, but if list of destinations
changes often, Router might become coupled bottleneck, in which case
it&#8217;s better to let recipients (i.e. that which Router would output to)
decide which messages they&#8217;re interested in, i.e. Pub Sub channel.</li>
<li><em>Predictive routing</em> means putting control in Message Router; <em>reactive
routing</em> means Pub Sub.</li>
</ul>


<p>Decoupling is nice but comes at the expense of reasonability about the
system; harder to see a flow.</p>

<p>Brainless router: single input, single output; meant as a stub for when
we&#8217;re pretty sure we&#8217;ll want a more intelligent router later.</p>

<p>Content-based router: decides where to go based on message content.</p>

<p>Context-based routers: decide where to go based on environmental
conditions, e.g. load-balancing, test, failover.</p>

<p>Failover: switching to redundant / standby system automatically if
primary one fails.</p>

<p>Note that some Message Channels come with their own form of load balancing
if Competing Consumers are consuming off the channel as fast as they
can, but Message Routers have the benefit of being able to use more
complicated logic, which a Competing Consumer free-for-all would not be
able to make use of.</p>

<p>Routers can connect to Control Bus to live-update decision criteria
without requiring code change.</p>

<p>Routers play in important role in Message Broker pattern, which is the
integration equivalent to the Mediator GoF pattern.</p>

<h3>EDI: Electronic Data Interchange</h3>

<p>Source: EIP, using EDI 850 Purchase Order as an example.</p>

<p><a href="http://en.wikipedia.org/wiki/Electronic_data_interchange">Wikipedia</a></p>

<p>Electronic communication system that provides standards for exchanging
data via any electronic means.</p>

<p>Origins: military logistics</p>

<p>ERP: Enterprise Resource Planning</p>

<h3>Why HTTP isn&#8217;t a transport layer</h3>

<p><a href="http://restpatterns.org/Articles/Why_HTTP_Isn't_A_Transport_Protocol">Source</a></p>

<p>So many things to dissect. I&#8217;m sad I still don&#8217;t have this shit stuck in
my brain. Gosh damn.</p>

<p>Alright, what&#8217;s a transport layer? TCP&#8217;s a transport layer. It&#8217;s
concerned with getting data from A to B and doesn&#8217;t care about the
format of the data. UDP is also one, but doesn&#8217;t guarantee delivery,
packet order, etc.</p>

<p>HTTP (Hypertext Transfer Protocol) is an application-layer protocol.</p>

<p>Good explanation of layers:</p>

<pre><code>http://en.wikipedia.org/wiki/File:Internet_layering.svg
</code></pre>

<p>IP is the Internet layer, the addressing layer that describes how
different systems can access each other.</p>

<p>Blah blah blah. Anyway, armed with this knowledge, what does it mean for
HTTP to even be considered a transport protocol?</p>

<p>Some people expand HTTP to Hypertext <em>Transport</em> Protocol, which is NOT
the same as the actual correct <em>Transfer</em> protocol.  It&#8217;s not transport,
it&#8217;s transfer, you dummy.</p>

<p>Subtle differences between transfer and transport:</p>

<ul>
<li>Transport as agnostically carrying something from A to B</li>
<li>Transfer pays attention to the content of what&#8217;s being transferred.</li>
</ul>


<p>That&#8217;s why HTTP offers so many different verbs (GET POST PUT PATCH
DELETE CONNECT OPTIONS HEAD) and status codes. You&#8217;d only need to GET/PUT and 200/500/400
(success, server failure, client failure) if HTTP were a transport
protocol, but the fact that it has all these expressive differences in
intent implies it&#8217;s most of an application/transfer layer.</p>

<p>OK, so well done, article, but terrible job at explaining exactly <em>who</em>
is using HTTP as a transport layer protocol and how and what the cut off
is. I still don&#8217;t know.</p>

<p>Oh I get it, from the wiki article an example SOAP message:</p>

<pre><code>POST /InStock HTTP/1.1
Host: www.example.org
Content-Type: application/soap+xml; charset=utf-8
Content-Length: 299
SOAPAction: "http://www.w3.org/2003/05/soap-envelope"

&lt;?xml version="1.0"?&gt;
&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
  &lt;soap:Header&gt;
  &lt;/soap:Header&gt;
  &lt;soap:Body&gt;
    &lt;m:GetStockPrice xmlns:m="http://www.example.org/stock"&gt;
      &lt;m:StockName&gt;IBM&lt;/m:StockName&gt;
    &lt;/m:GetStockPrice&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;
</code></pre>

<p>So in this case there is a SOAP message that itself adheres to an XML
schema, but in most cases it is transported within the body of an HTTP
request. So it uses HTTP as its transport layer. A SOAP message <em>could</em>
be transported over TCP socket, but it&#8217;s generally done over HTTP.</p>

<p>I&#8217;ve resolved my confusion: for any given message format, a message
needs to be transported. SOAP is a message format, and it just so
happens to be wrapped in HTTP. You could wrap a message in many
different layers which might be intended as application layers, each one
treating its wrapper as a transport layer.</p>

<p>SOAP is shitty for caching because resources are not a first class
consideration in the way they are for REST. HTTP headers and resource
URLs provide information that lends itself nicely to caching.</p>

<h3>ActiveX!!!</h3>

<p>I never really knew what this was. It implies security risk and
executable code within Internet Explorer. But wat it be?</p>

<p><a href="http://en.wikipedia.org/wiki/ActiveX">Wikipedia</a></p>

<p>It&#8217;s a Microsoft framework, picking up where Component Object Model
(COM) left off. It enabled extra features in Internet Explorer but made
it easy for malicious dicks to run code that was automatically
downloaded from an <code>OBJECT</code> tag.</p>

<p>There&#8217;s a word that keeps on getting thrown around: control. An ActiveX
control. What kind of shitty name is that? Is that like the short-lived
Ember.Control? What a control is?</p>

<blockquote><p>ActiveX controls are essentially pieces of software and have access to your entire computer if you opt to install and run them.</p>

<p>An object in a window or dialog box. Examples of controls include push-buttons, scroll bars, radio buttons, and pull-down menus.</p>

<p>ActiveX controls are small programs, sometimes also called &#8220;add-ons,&#8221; used on the Internet. They can make browsing more enjoyable by allowing animation or they can help with tasks such as installing security updates at Windows Update.</p>

<p>These are objects that are like small programs or &#8220;applets&#8221; and a number of Microsoft programs like Office and Internet Explorer (IE) are designed to be able to interact with them. An example is a spell checker. Since Word comes with a spell checker, other Microsoft programs such as Outlook Express can make use of it. In fact, any program with the appropriate interface can use this spell checker.</p></blockquote>

<p>So they&#8217;re plugins / addons. Sometimes they&#8217;ve visible, other times
they&#8217;re hidden. But they were originally used to enhance the
functionality of Internet Explorer to view things like PDFs and
Macromedia Flash. So basically, ActiveX controls are components that
could be reused in many different settings. Building blocks. Yesterday&#8217;s
technology: tomorrow.</p>

<blockquote><p>ActiveX controls are actually not Internet Explorer-only. They also work in other Microsoft applications, such as Microsoft Office.</p></blockquote>

<p>ActiveX increases the attack surface by malicious dicks; even a
well-intentioned but carelessly implemented ActiveX control could
open the door to hackery, such as the Java ActiveX control.</p>

<h3>XSL: Extensible Stylesheet Language</h3>

<h3>document.implementation</h3>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/document.implementation">MDN</a></p>

<p>Returns a DOMImplementation object associated with the current document.</p>

<p><code>document.implementation.createDocument(namespaceURI, qualifiedNameStr, documentType)</code>
creates an XML doc.</p>

<ul>
<li><code>namespaceURI</code>, e.g. &#8216;http://www.w3.org/1999/xhtml&#8217;</li>
<li><code>qualifiedNameStr</code>: qualified name of the document to be created,
which is an optional prefix + the local root element name; if you&#8217;re
creating an html document, you&#8217;ll provide &#8216;html&#8217; because that&#8217;s the
root element name of an html doc.</li>
<li><code>documentType</code>, optional, often just null</li>
</ul>


<p>Many examples use Document.load to load xml data, but it&#8217;s not part of
the <a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/">Load and Save</a>
spec any more, or it is, but Load and Save is really old?</p>

<p>This spec is/was</p>

<blockquote><p>a platform- and language-neutral interface that allows programs and scripts to dynamically load the content of an XML document into a DOM document and serialize a DOM document into an XML document</p></blockquote>

<h3>Level N</h3>

<p>DOM Level 3 wtf does it mean? I guess it just means a more complex
layering on top of a previous level. Additional levels enhance and
expand scope, while versions are meant to refine, fix issues, etc,
limited to that scope. As DOM Levels increase, features are added that
don&#8217;t conflict with lower DOM features but just add more stuff on top.
So you can just use DOM Level 1 features and never touch anything above,
but those above Levels will never thwart DOM Level 1.</p>

<ul>
<li>DOM Level 0: pre-specification DOM API, e.g. IE3</li>
<li>DOM Level 1: (1998) full specification for HTML/XML doc, partly
implemented by IE5</li>
<li>DOM Level 2: (late 2000) added <code>getElementById</code> and an event model</li>
<li>DOM Level 3: (late 2004) added XPath and keyboard event handling and
support for serializing docs as XML (?)</li>
<li>DOM Level 4: currently being developed, last call working draft
released in Feb 2014.</li>
</ul>


<p>The terminology used as that DOM Level 3 is the latest &#8220;release&#8221;. But
not to be confused with versions&#8230; presumably each level has its own
version.</p>

<h3>Events</h3>

<p>Informed by this <a href="http://en.wikipedia.org/wiki/DOM_Events#DOM_Level_0">Wikipedia article</a></p>

<p>DOM event handling has evolved over the years.</p>

<h4>DOM Level 0 events</h4>

<p>(DOM Level 0 meaning pre-spec DOM).</p>

<ul>
<li>inline, e.g. <code>onclick="alert('shit'); return false;"</code>, which
essentially gets invoked as
<code>(function() { alert('shit'); return false; }).call(clickedElement)</code></li>
<li>traditional; event handlers can be added/removed by script, but only
one event handler could be registered; <code>node.onclick = handler</code>,
<code>node.onclick = newHandler;</code>, etc.</li>
</ul>


<p>Did you know that <code>document.onclick = someFn</code> still works? Ridiculous!</p>

<h4>DOM Level 2 events</h4>

<p><code>addEventListener</code>, <code>removeEventListener</code>, <code>dispatchEvent</code>, along with
<code>stopPropagation</code> and <code>preventDefault</code>.</p>

<p>Fun fact: I thought the third param to addEventListener was some
ActionScript-y thing about weak references, but it&#8217;s actually
<code>useCapture</code>. Capture events occur starting from the root of the DOM
(document) and move toward the event target; any capture event listeners
registered in that direct line will be invokved first and have the
opportunity to <code>stopPropagation</code>.</p>

<p>Fun fact; the ancestor chain of bubbling events is determined before the
event is fired, so that any DOM modifications that happen
(e.g. moving the EventTarget to some other part of the DOM) within an
event handler doesn&#8217;t affect the predetermined chain.</p>

<p><code>event.target</code> refers to the <code>EventTarget</code>; this is the receiver of the
event</p>

<h4>Event Delegation</h4>

<p>From <a href="http://learn.jquery.com/events/event-delegation/">learn.jquery.com</a>:</p>

<blockquote><p>Event delegation allows us to attach a single event listener, to a parent element, that will fire for all descendants matching a selector, whether those descendants exist now or are added in the future.</p></blockquote>

<p>If this feature didn&#8217;t exist, then you would have to do a lot more
manual adding and removing of event handlers as DOM elements were added
and removed, whereas delegation allows you to define an event handler on
a parent node that only fires when the event passes through a child
described by a selector, e.g.</p>

<pre><code>$('#table').on('click', 'td', function() { });
</code></pre>

<p>One of jQuery&#8217;s original APIs for event delegation was <code>.live</code>, e.g.
<code>$('a').live(...)</code>, but this had some issues:</p>

<ul>
<li>The selector eagerly fired when it didn&#8217;t to (perf)</li>
<li>Chaining methods didn&#8217;t work, which is a surprising and bad API,
e.g. $(&#8216;a&#8217;).find(&#8216;p&#8217;).live(&#8216;click&#8217;);</li>
<li><code>.live()</code> events always attached to <code>document</code>, which means events
take the longest and slowest path before being handled, e.g. a click
on an <code>a</code> tag 20 levels deep in the DOM needs to go all the way
through those 20 levels before being handled.</li>
<li><code>click</code> doesn&#8217;t bubble to <code>document</code> on iOS so <code>live</code> can&#8217;t work
without other workarounds, e.g. (cursor:pointer), natively clickable
elements, etc</li>
<li>stopPropagation doesn&#8217;t work since event already propagated to
<code>document</code> by the time <code>live</code> logic fires</li>
<li><code>.live</code> interacted weird with other methods, e.g. <code>$(document).off()</code>
would disable <code>live</code> handlers, even though <code>live</code> selector seemed to
imply some other magic.</li>
</ul>


<p>That&#8217;s why things shifted to <code>delegate</code> and eventually <code>on</code>, which hits
the sweet spot.</p>

<pre><code>`$('#root').on('click', 'a', handler)`
</code></pre>

<p>Benefits of this approach include:</p>

<ul>
<li>&#8216;a&#8217; isn&#8217;t unnecessarily queried up front</li>
<li>Chaining will work as expect (i.e. continued modifications to <code>#root</code>)</li>
<li>No longer throw everything on <code>document</code></li>
<li>Explicit syntax suggests workarounds for iOS</li>
</ul>


<h4>Historical shit</h4>

<p><a href="http://www.quirksmode.org/js/events_order.html">source: quirksmode</a></p>

<p>Netscape 4 had capture only.</p>

<p>Microsoft had bubble only.</p>

<p>jQuery provides event bubbling for all, along with event delegation,
which <em>depends</em> on event bubbling in order to work (the italics are
probably overkill; if you have event capture you can implement event
bubbling&#8230; even if you didn&#8217;t have event capture, you can walk the tree
and implement yourself).</p>

<p>Proof that you can implement it yourself:</p>

<p>http://jsbin.com/tofop/1/edit</p>

<p>Just loop over parentNode until you get there.</p>

<p>jQuery never provided an API for event capturing because it&#8217;s not
possible on old IE. I guess it&#8217;s possible, but you&#8217;d have to introduce
some async-ness, which would probably break other assumptions. So for
IE6, which only supported bubbling, if you wanted something like</p>

<pre><code>$('a').capture('click', handler);
</code></pre>

<p>you would have to first manually walk the tree up to the document,
then refire a fake event back to the target, calling any capture
handlers,</p>

<p>So if all you had was Netscape</p>

<p>Ember depends on jQuery for event delegation. This will probably go away
soon.</p>

<h3>What&#8217;s wrong w iOS anyway?</h3>

<p>Non-native click events don&#8217;t bubble up to document unless</p>

<ul>
<li>the clicked thing is a native clickable, e.g. link or button</li>
<li>the clicked thing has a handler explicitly attached to it, e.g.
onclick= attr or addEventListener on that thing.</li>
<li><a href="http://jsbin.com/xuwuvu/1/edit">example</a></li>
</ul>


<h3>W3C: World Wide Web Consortium</h3>

<p>The standards organization founded and led by Tim Berners-Lee.</p>

<p>W3C TAG is the Technical Architecture Group in charge of documenting and
building consensus around principles of Web architecture. People whose
names my dumb brain should remember on the TAG:</p>

<ul>
<li>Yehuda Katz</li>
<li>Domenic Denicola</li>
<li>David Herman</li>
</ul>


<p>Not to be confused with TC39, which standardizes ECMAScript. Membership
can be determined by those present in the
<a href="https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-04/apr-9.md">meeting notes</a></p>

<p>So W3C Tag reviews things like
<a href="https://dvcs.w3.org/hg/quota/raw-file/tip/Overview.html">quote management</a>
APIs and stuff that browsers need to expose, and TC39 handles language
features for ECMAScript.</p>

<h3>XSLT</h3>

<p>OMG so many dumb things to learn. Here&#8217;s a
<a href="http://jsbin.com/davew/1/edit">JSBin</a> for farting around w
XSLT transformations. Kinda reminds me of <code>&lt;content select="asd"&gt;</code> in
Web Components land, though probably way more complicated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/25/daily-journal/"/>
    <updated>2014-05-25T13:26:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/25/daily-journal</id>
    <content type="html"><![CDATA[<h3>Web Notifications</h3>

<p><a href="https://github.com/stefanpenner/ember-cli/pull/804">Web notifications were added to ember-cli</a>
not long ago, and I forgot they were a thing. IRRCloud uses them too.
Like so many other new HTML5-y things, there&#8217;s a
<a href="http://www.w3.org/TR/notifications/">spec</a> for web notifications.
Basically, you ask for permissions and then you can broadcast.</p>

<h3>Not invented here (NIH)</h3>

<p><a href="http://en.wikipedia.org/wiki/Not_invented_here">Wikipedia</a></p>

<p>Antonym: Proudly Found Elsewhere (PFE)</p>

<p>Often a criticism of OSS communities reinventing the wheels in
already-solved problem spaces.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/24/daily-journal/"/>
    <updated>2014-05-24T07:56:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/24/daily-journal</id>
    <content type="html"><![CDATA[<h3>Enterprise Integration Patterns</h3>

<p>Reading this here Fowler book.</p>

<p>Operating systems have begun to ship with messaging middleware and
related tools:</p>

<ul>
<li>Windows: MS Message Queueing (MSMQ), accessible via APIS like COM
components and System.Messaging (part of .NET).</li>
</ul>


<p>Application Servers</p>

<ul>
<li>Java Messaging Service (JMS)</li>
</ul>


<p>EAI (Enterprise Application Integration) suites:</p>

<ul>
<li>IBM WebSphere MQ</li>
<li>Microsoft BizTalk</li>
<li>TIBCO</li>
<li>WebMethods</li>
<li>SeeBeyond</li>
<li>Vitria</li>
<li>CrossWorlds</li>
</ul>


<p>Many of the above include JMS as a supported client API, while
others focus on implementing merely JMS-compliant infrastructures.</p>

<h3>Pro Git</h3>

<h4>VCS: Version Control System</h4>

<p>Keeps patch sets between versions of files, reconstruct a version be
applying/unapplying patches. Example: <code>rcs</code>.</p>

<p>Git&#8217;s predecessor was BitKeeper, whose free-of-charge status was
revoked in 2005.</p>

<h4>git config</h4>

<p><code>git config lol.wat "imadork"</code></p>

<p>will put the following into <code>./.git/config</code>:</p>

<pre><code>[lol]
  wat = imadork
</code></pre>

<p>what if you did <code>git config a.b.c lol</code> ?</p>

<pre><code>[a "b"]
  c = lol
</code></pre>

<p>followed by <code>git config a.b.z lol</code>:</p>

<pre><code>[a "b"]
  c = lol
  z = lol
</code></pre>

<p>So basically <code>git config</code> just prettily formats things into groups using
everything about the key you provide except the trailing segment. Makes
sense.</p>

<h4>Staging</h4>

<p>Staging means you&#8217;re building up snapshots for a commit. By the time you
commit, you&#8217;re just creating a commit object with meta data that points
to that same snapshot.</p>

<h4>Simple git repo hosting via HTTP</h4>

<p>You can host a git repo via HTTP file hosting, which implies:</p>

<ul>
<li>anonymity (no authentication, no way to know who&#8217;s cloning your repo)</li>
<li>read-only access (can&#8217;t push, unless doing crazy WebDAV things)</li>
</ul>


<p>So just for fun, here&#8217;s the simplest number of steps to push to a
localhost http git server.</p>

<ol>
<li>Create bare repo: <code>git init --bare fun.git</code>. This creates a folder
called <code>/fun.git</code>. The <code>.git</code> extension is optional, but
conventional.</li>
<li>Start a server hosting <code>ruby -run -e httpd . -p 5000</code></li>
<li>Try and clone via http: <code>git clone http://localhost:5000/fun.git</code></li>
</ol>


<p>This will give you an error:</p>

<pre><code>fatal: repository 'http://localhost:5000/fun.git/' not found
</code></pre>

<p>and your Ruby server will show the log</p>

<pre><code>[2014-05-25 12:03:13] ERROR `/fun.git/info/refs' not found.
localhost - - [25/May/2014:12:03:13 EDT] "GET /fun.git/info/refs?service=git-upload-pack HTTP/1.1" 404 287
- -&gt; /fun.git/info/refs?service=git-upload-pack
</code></pre>

<p>So it&#8217;s looking for files that aren&#8217;t there. If you look at various
git manuals, it&#8217;ll tell you something about how you should
<code>mv hooks/post-update.example hooks/post-update</code> and give it executable
chmod permissions, but even if you do that and try and clone again,
it&#8217;ll fail.</p>

<p>The reason for the failure is that there are static files that need to
be generated in order for a plain ol static http git hosting solution to
work, and these files haven&#8217;t been generated yet. If you enabled the
<code>post-update</code> hook and then pushed to the repo via some other means,
those files would be generated, but just to get this example working,
you can <code>cd</code> into <code>fun.git</code> and run</p>

<pre><code>sh fun.git/hooks/post-update.example
</code></pre>

<p>or you can just run the single command that the above script runs:</p>

<pre><code>git update-server-info
</code></pre>

<p>Then when you <code>git clone http://localhost:5000/fun.git</code>, the clone will
succeed (though the repo&#8217;s still totally empty).</p>

<h3><code>ruby -run</code></h3>

<p>Also, here&#8217;s the breakdown of the <code>ruby -run -e httpd . -p 5001</code></p>

<ul>
<li>There&#8217;s a very intentionally-named Ruby library called <code>un</code>, which
<a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/un/rdoc/index.html">contains some useful tools</a></li>
<li>The <code>-r</code> option requires the following lib; <code>-run</code> requires <code>un.rb</code>,
which is part of the Ruby standard library.</li>
<li><code>un.rb</code> contains top-level method definitions, like <code>httpd</code></li>
<li><code>-e httpd</code> executes the top-level <code>httpd</code> method in <code>un.rb</code>, which
makes use of the rest of the command line args provided: <code>. -p 5001</code>,
and starts up a WEBBrick server.</li>
</ul>


<p>Here&#8217;s another dumb example of a <code>ruby -r</code>:</p>

<p>Put a file named <code>aunchy.rb</code> with the following contents into new
subdirectory <code>ma</code>:</p>

<pre><code>def lephant
  puts "i am so raunchy"
end
</code></pre>

<p>Then run <code>ruby -Ima -raunchy -elephant</code>:</p>

<pre><code>i am so raunchy
</code></pre>

<p>This works because</p>

<ul>
<li><code>-Ima</code> adds <code>ma</code> to the load path (which <code>require</code> uses)</li>
<li><code>-raunchy</code> requires <code>aunchy.rb</code></li>
<li><code>-e</code> executes the method <code>lephant</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/22/daily-journal/"/>
    <updated>2014-05-22T14:08:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/22/daily-journal</id>
    <content type="html"><![CDATA[<h2>Array Computed / Reduce Computed</h2>

<p>The difference between reduce computed properties and array computed
properties in Ember is that reduce computed properties will boil down
the contents of an array to <em>some value</em> using one-at-a-time semantics;
Array CPs are Reduce CPs that happen to boil down to: other arrays.</p>

<p>So you can&#8217;t write a &#8220;sum&#8221; Array Computed; you&#8217;d just use reduce
computed for that. And you <em>could</em> write your own hand-crafted &#8220;filter&#8221;
reduced CP, but why not use the Array Computed API for that?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/19/daily-journal/"/>
    <updated>2014-05-19T07:38:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/19/daily-journal</id>
    <content type="html"><![CDATA[<h2>Active Model: GlobalID</h2>

<p>https://github.com/rails/activemodel-globalid/</p>

<p>GlobalID is a way of serializing a model into a string so that
it can be looked up later; rather than serializing all of the
object&#8217;s data into a string, you merely serialize just enough
information so that you can look up the rest.</p>

<p>I&#8217;m already doing something similar with model dep state in Ember,
only extending it such that part of the &#8220;GlobalID&#8221;, which we&#8217;ll
use internally for binding into a cache bucket, might be a prefixing
controller name to uniquely identify a cache bucket to a specific
controller, but in cases where you want to share information about
a model with other controllers, you&#8217;d leave this prefix off.</p>

<p>Anyway, nice to see other folk arriving at a similar thing, though
I personally wouldn&#8217;t call this sort of thing &#8220;serializing&#8221; but rather
&#8220;paramaterizing&#8221;, since you&#8217;re not actually storing all the data in
string form but just enough to uniquely identify it so that some
other operation can restore the object.</p>

<h2>Strings have read-only props in &#8220;use strict&#8221; Safari</h2>

<p>The following throws an exception only in Safari (not Chrome or FF):</p>

<pre><code>(function(){"use strict"; ("a").b = 'writing to a string'; })();
TypeError: Attempted to assign to readonly property.
</code></pre>

<p>But not if you leave off the &#8220;use strict&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/15/daily-journal/"/>
    <updated>2014-05-15T11:38:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/15/daily-journal</id>
    <content type="html"><![CDATA[<h2>Uniform Type Identifiers</h2>

<p>Turns out I never understood why Java and other languages/frameworks
embraces this style of &#8220;com.domain.somepackage&#8221;. First off, this is
called <a href="http://en.wikipedia.org/wiki/Reverse_domain_name_notation">Reverse domain name notation</a>.</p>

<p>The purpose of this naming convention is two-fold:</p>

<h4>Avoids naming collisions from two different vendors</h4>

<p>By prefixing the package name with any sort of
unique identifier, &#8220;SOME-PREFIX-A.packageName&#8221; won&#8217;t conflict with
&#8220;SOME-PREFIX-B.packageName&#8221;.</p>

<h4>Sensible sort order / grouping</h4>

<p>You want packages from the same
vendor to be grouped together in sensible way; if you use the <code>apple</code>
and <code>carrots</code> packages from <code>food.somevendor.com</code> and the <code>bikes</code> package
from <code>things.somevendor.com</code>, if you didn&#8217;t reverse the domain order, you might
end up with the following folder structure</p>

<pre><code>food/
  somevendor/
    com/
      apple
      carrots
things/
  somevendor/
    com/
      bikes
</code></pre>

<p>This is undesirable since you can&#8217;t tell from this structure that apple,
bikes, and carrots all come from somevendor. Also, you there&#8217;s a
needless repetition of the <code>somevendor/com</code> path in both directory
trees. If the domain name were inverted, you&#8217;d end up with:</p>

<pre><code>com/
  somevendor/
    food/
      apple
      carrots
    things/
      bikes
</code></pre>

<p>Less folders, less repetition, and more information is being conveyed.</p>

<p>Another way to think about it is that domain names are somewhat
backwards; we know that <code>.com</code>, <code>.net</code>, and
<a href="http://sandwich.technology"><code>.technology</code></a> are top-level domains (TLD),
but how/why is something top level appended at the end of a name? It
definitely makes domain names with subdomains harder to sort in a
meaningful way. I guess there&#8217;s probably a good reason for this, worth
investigating in another journal entry.</p>

<p>Another good/quick SO explanation: http://stackoverflow.com/a/2475191/914123</p>

<h2>LevelDB</h2>

<ul>
<li>require(&#8216;leveldbdatabase&#8217;)</li>
<li>key value pair</li>
<li>scales, web scale</li>
<li>PolicyMic is sponsoring folk to work on it</li>
<li>IMPORTANT: is a library; you can wrap leveldb entirely in an app via C++ API, whereas Redis is a database server that you communicate with via a custom binary protocol</li>
</ul>


<h2>Vim: Visual Line</h2>

<p>Shift-V in vim goes into visual line mode, which means you select entire
lines for yanking/cutting, rather than having to precisely position your
cursor at the beginning or end of a line so as to not accidentally yank/cut
only part of a line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/13/daily-journal/"/>
    <updated>2014-05-13T13:15:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/13/daily-journal</id>
    <content type="html"><![CDATA[<h2>Sharing ignored blank password fields in ActiveAdmin</h2>

<p>I use ActiveAdmin for some stuff, and often you want to update
some resource while leaving its password the same, but if you have
a password field on the form, the form will POST with empty password
and empty confirmation you&#8217;ll get a validation error from an empty
password. You can override this with a <code>controller</code> block in your
ActiveAdmin resource config via:</p>

<pre><code>controller do
  def update
    param_obj = params['admin_user']
    if param_obj[:password].blank?
      param_obj.delete("password")
      param_obj.delete("password_confirmation")
    end
    super
  end
end
</code></pre>

<p>But if you have multiple Devise-esque resources with passwords, it&#8217;d be
nice to share this with multiple resources. It&#8217;s a bit tricky to solve
this with idiomatic Ruby since you&#8217;re already in ActiveAdmin&#8217;s DSL land,
but the following works:</p>

<p><code>/lib/admin/ignore_blank_password.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Admin</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">IgnoreBlankPassword</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">ignore</span><span class="p">(</span><span class="n">dsl</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dsl</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">controller</span> <span class="k">do</span>
</span><span class='line'>          <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>            <span class="n">param_key</span> <span class="o">=</span> <span class="n">resource</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">model_name</span><span class="o">.</span><span class="n">param_key</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>            <span class="n">param_obj</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="n">param_key</span><span class="o">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">param_obj</span><span class="o">[</span><span class="ss">:password</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>              <span class="n">param_obj</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="n">param_obj</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;password_confirmation&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>            <span class="k">super</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/app/admin/admin_user.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;admin/ignore_blank_password&#39;</span>
</span><span class='line'><span class="no">ActiveAdmin</span><span class="o">.</span><span class="n">register</span> <span class="no">AdminUser</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Admin</span><span class="o">::</span><span class="no">IgnoreBlankPassword</span><span class="o">.</span><span class="n">ignore</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/12/daily-journal/"/>
    <updated>2014-05-12T13:14:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/12/daily-journal</id>
    <content type="html"><![CDATA[<h2>Ruby <code>Module#===</code></h2>

<p>Ran into <a href="https://github.com/hassox/warden/blob/master/lib/warden.rb#L33-L34">this piece of
code</a>
from the Warden repo:</p>

<pre><code>def self.test_mode!
  unless Warden::Test::WardenHelpers === Warden
    Warden.extend Warden::Test::WardenHelpers
    Warden::Manager.on_request do |proxy|
      unless proxy.asset_request?
        while blk = Warden._on_next_request.shift
          blk.call(proxy)
        end
      end
    end
  end
  true
end
</code></pre>

<p>I hadn&#8217;t seen this usage of <code>===</code> before; I&#8217;m mostly familiar with it as
an unidiomatic alias of <code>is_a?</code>, e.g.:</p>

<pre><code>Array === []    #=&gt; true
[].is_a?(Array) #=&gt; true
</code></pre>

<p><code>#===</code> is the Case Equality operator or
<a href="http://stackoverflow.com/questions/4527220/3-equals-or-case-equality-operator"><em>subsumption</em> operator</a>;
it is overridden by subclasses to provide context-specific / semantic
meaning, for example:</p>

<ul>
<li><code>Regexp === /asd/</code> #=> true</li>
<li><code>Fixnum === 5</code> #=> true</li>
<li><code>Object === {}</code> #=> true</li>
</ul>


<p>Important things to keep in mind about <code>===</code>:</p>

<ol>
<li>It is not commutative (A===B does not imply B===A)</li>
<li>It is a method of the object on the left side of an expression,
e.g. <code>A===B</code> is shorthand for <code>A.===B</code> or <code>A.send(:===, //)</code></li>
<li>It has nothing to do with equality; beware, JavaScripters.</li>
</ol>


<p>ANYWAY: back to the Warden example: in this case, the <code>Module</code> class has
an instance method <code>===</code> that returns if the object on the right side
has extended the methods on the Module that <code>===</code> is called on, so:</p>

<pre><code>module M; end
class Foo; end

f = Foo.new
M === f #=&gt; false

# reopen
class Foo
  include M
end

M === f #=&gt; true
</code></pre>

<p>So we turned <code>===</code> from false to true by including <code>M</code> on class <code>Foo</code>.
The Warden example is similar, except that the way the module&#8217;s methods
were mixed in was via <code>extend</code> vs <code>include</code>. <code>extend</code> is a somewhat more
direct form of <code>include</code> in that it can be called on instances to put
methods directly on that instance, rather than having to open an
instance&#8217;s class and add an <code>include</code> statement, which adds all of those
methods to subclasses.</p>

<p>So when we check</p>

<pre><code>  Warden::Test::WardenHelpers === Warden
</code></pre>

<p>this is the same as <code>WardenHelpers.=== Warden</code>, which translates to
&#8220;return true if Warden has all of WardenHelpers&#8217; methods&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/04/daily-journal/"/>
    <updated>2014-05-04T10:11:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/04/daily-journal</id>
    <content type="html"><![CDATA[<h2>Vim surround</h2>

<p>https://github.com/tpope/vim-surround</p>

<ul>
<li>ysiw] : surround a word in ]</li>
<li>ysiW] : surround a chunk word in ]</li>
<li>cs&#8221;&#8217; : change surrounding &#8221; to &#8217;</li>
<li>ds&#8221; : delete surrounding &#8221;</li>
<li>yss( : wrap line in parens</li>
</ul>


<h2>DAS: Conflicting Principles</h2>

<ul>
<li>User/profile/account

<ul>
<li>All this other stuff that relates to that single giant model</li>
</ul>
</li>
<li>User

<ul>
<li><code>disable!</code></li>
<li><code>send_disable_notication</code></li>
</ul>
</li>
<li>Law of demeter

<ul>
<li>Motivation for decomposition</li>
<li>move controller logic to model <code>enforce_good_standing!</code></li>
</ul>
</li>
<li>User model will get huge; lots of complexity there.</li>
<li>Pull out service classes, e.g. GoodStandingPolicy, or
AccountStandingPolicy

<ul>
<li><code>#initialize(user)</code></li>
<li><code>enforce!</code>

<ul>
<li>still breaks law of demeter.</li>
<li>change <code>cards.all?(&amp;:invalid?)</code> to <code>all_cards_invalid?</code></li>
<li>but this breaks Tell Don&#8217;t Ask

<ul>
<li>TDA means asking an object about properties and deciding what to
do instead of telling it to do things and giving it enough info
to do so.</li>
</ul>
</li>
<li>TDA vs Single Responsibility Principle (SRP)?

<ul>
<li>If you follow TDA, you end up putting responsibility back into
User class, but now User class has much responsibility</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Pick one: SRP often makes sense</li>
</ul>


<h2>DAS: Wrapping Third Party APIs</h2>

<ul>
<li>e.g. accepting Braintree payment from secure redirect back to your
site with data in QPs</li>
<li>BrainTree API objects are deeply nested, causes handling code to suffer</li>
<li>Goal: move traversal of these objs to a different class.</li>
<li>Spec

<ul>
<li>Had to stub deeply nested crap</li>
</ul>
</li>
<li>TDD

<ul>
<li>it &#8220;konws the newest credit card&#8221;</li>
<li>qp is a stub</li>
</ul>
</li>
</ul>


<h2>Pend-out an Rspec test</h2>

<pre><code>it "does something" {}
</code></pre>

<p>can be made pending via <code>xit</code></p>

<pre><code>xit "does something" {}
</code></pre>

<h2>Cisgender</h2>

<p>http://en.wikipedia.org/wiki/Cisgender</p>

<blockquote><p>Cisgender and cissexual (often abbreviated to simply cis) describe
related types of gender identity where an individual&#8217;s experience of
their own gender matches the sex they were assigned at birth.</p></blockquote>

<h2>Hypermedia API</h2>

<p>Hyper = above</p>

<p>Media = well, media, but not just hypertext because more things than
just text can be conveyed</p>

<p>Examples:</p>

<ul>
<li>http://jsonapi.org/</li>
<li>HAL - Hypermedia Application Language</li>
</ul>


<p>Why JSON API over HAL? http://jsonapi.org/faq/</p>

<ul>
<li>HAL embeds child docs recursively; JSON API flattens the entire graph
at the top level.</li>
<li>JSON API uses IDs for linkage (as opposed to HAL&#8217;s what)?</li>
<li>See <a href="https://github.com/dgeb">Dan Gebhart</a>&#8217;s response here re linkage:
https://github.com/json-api/json-api/pull/123/files#r12265234</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal 2]]></title>
    <link href="http://machty.github.com/blog/2014/05/01/daily-journal-2/"/>
    <updated>2014-05-01T22:46:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/01/daily-journal-2</id>
    <content type="html"><![CDATA[<h2>Cryptoballs</h2>

<pre><code>openssl speed rsa
openssl speed aes
</code></pre>

<h3>RSA</h3>

<p>Encryption key is public. Decryption key is secret.
Used for generating symmetric key in TLS.</p>

<p>AES is way faster (TODO: wat?).</p>

<h2>Active-model serializers</h2>

<p>How do tell an attribute to use a serializer?</p>

<p>Trick question: you don&#8217;t; rather, if it has a serializer, it&#8217;s probably
an association, not an attribute, so you probably want something like</p>

<pre><code>has_many :action_items, serializer: ActionItemSerializer
has_one :originator, serializer: OriginatorSerializer
</code></pre>

<p>and in both cases you can probably remove <code>serializer</code> once you de-stub
<code>action_items</code> and <code>originator</code>.</p>

<h2>QUnit filter</h2>

<p>In Mocha JS test suites if you click a suite header, it&#8217;ll run tests
only from that module or children by way of a <code>grep=blahlbahbl</code> query
param. I&#8217;m using <a href="https://github.com/square/qunit-bdd">qunit-bdd</a>, which
is a layer over QUnit, which generates a bunch of concatenated module
names based on the nested <code>describe</code>s and <code>context</code>s, which doesn&#8217;t let
you easily run all the nested child modules of a top-level describe if
you&#8217;re used to using the Module dropdown on the upper right.</p>

<p>If you want to run a family of describe modules, you can manually
provide a <code>filter</code> query param, e.g.:</p>

<pre><code>http://localhost:4200/tests?filter=LiveQuery
</code></pre>

<p>This runs all modules w &#8220;LiveQuery&#8221; is part of their name.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/05/01/daily-journal/"/>
    <updated>2014-05-01T08:59:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/05/01/daily-journal</id>
    <content type="html"><![CDATA[<h2>Normalize / Denormalize</h2>

<p>From <a href="http://en.wikipedia.org/wiki/Database_normalization">Wikipedia</a>:</p>

<p>Database normalization is the process of organizing the fields and
tables of a relational database to minimize redundancy.</p>

<p>Source: Gary Bernhardt saying &#8220;we denormalize by passing in
<code>person_name</code> in addition to the person object&#8221;. Normalizing means
keeping all the data in one place, reducing redundancy. Denormalizing
means redundancy, which normally affords</p>

<p><a href="http://en.wikipedia.org/wiki/Denormalization">Denormalization</a>:</p>

<blockquote><p>In computing, denormalization is the process of attempting to
optimize the read performance of a database by adding redundant
data or by grouping data. In some cases, denormalization
is a means of addressing performance or scalability in relational
database software.</p></blockquote>

<p>Generally speaking, denormalizing means you&#8217;ve duplicated some piece of
data for some reason, probably optimization.</p>

<h2>Stub a method in ruby</h2>

<p>As simple as</p>

<pre><code>def stubbed_method(*args)
  # accept any number of args, do nothing with them.
end
</code></pre>

<h2>Use <code>fetch</code>, not <code>[]</code> for <code>Hash</code> / <code>Array</code></h2>

<p>I already know this, just keep on forgetting to use it;</p>

<pre><code>{}[123] # =&gt; nil
{}.fetch(123) # =&gt; KeyError: key not found: 123
</code></pre>

<h2>Directory stack: <code>pushd</code> / <code>popd</code></h2>

<p>Forgot about this from my Bloomberg days; use <code>pushd</code> and <code>popd</code> for
saving which directory you&#8217;re in (<code>pushd</code>) so that you can screw around,
change directories, and then ultimately <code>popd</code> back to whichever directory
you were in before you ran <code>pushd</code>.</p>

<pre><code>cd /foo/bar/baz
pushd /some/other/dir
pwd # =&gt; /some/other/dir
cd /go/to/some/strange/land
popd
pwd # =&gt; /foo/bar/baz
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/04/28/daily-journal/"/>
    <updated>2014-04-28T14:11:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/28/daily-journal</id>
    <content type="html"><![CDATA[<h2><code>npm install</code> git repos</h2>

<p>NOTE: this section is not complete; placeholding for later.</p>

<p>After many abortive attempts to find the right syntax for running
<code>npm install</code>, I figured I&#8217;d delve into what URL syntax it actually
expected, and why.</p>

<p>Here&#8217;s a bunch of stuff that didn&#8217;t work:</p>

<pre><code>npm install git+ssh@github.com:stefanpenner/ember-cli.git
npm install https://github.com/stefanpenner/ember-cli.git
</code></pre>

<p>Why couldn&#8217;t <code>npm install</code> just figure out what I meant? Well, I don&#8217;t
know, but here&#8217;s a breakdown of the above.</p>

<p><em>This is a helpful resoure: https://help.github.com/articles/which-remote-url-should-i-use</em></p>

<p>Basically, you can clone GitHub repos either with HTTPS or SSH urls. SSH
urls require an SSH keypair to generated on your computer and registered
to your GitHub accounts.</p>

<p>So here&#8217;s the first thing I tried:</p>

<pre><code>https://help.github.com/articles/using-ssh-agent-forwarding
</code></pre>

<p>This is an HTTPS url.</p>

<p>Q: Why does/did GitHub even require a password for cloning a repo?
What&#8217;s insecure about that read info? Possible answer: even if you don&#8217;t
have read access to a repo, a man in the middle might tell you you do,
and then you&#8217;re sending priv data, blah blah blah.</p>

<h2><code>Gdiff</code>, diffing in vim</h2>

<p>This was a very helpful resource:</p>

<p>http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/</p>

<pre><code>:Gdiff
:ls # list all the open buffers in their names
:diffget BUFSPEC # when inside a conflict region,
                 # say which buffer to get content from
:diffput BUFSPEC # when inside a conflict region,
                 # say which buffer to get content from
:only # close all buffer except this one
</code></pre>

<p>I ended up adding the following to my <code>.vimrc.after</code>:</p>

<pre><code>:nnoremap &lt;Leader&gt;dg :diffget &lt;CR&gt;
:nnoremap &lt;Leader&gt;dp :diffput &lt;CR&gt;
</code></pre>

<p>Note that this arg-less form is useful when diffing between local
changes and your last checkin; I use it a bunch for <code>ember-cli</code> when I
call <code>ember init</code> to reset my app structure to the latest <code>ember-cli</code>
blueprint (note that this process is still pretty miserable).</p>

<h2>Broccoli <code>ignoredModules</code> and <code>legacyFilesToAppend</code></h2>

<p>These options come from the <code>broccoli-es6-concatenator</code>.</p>

<ul>
<li><code>ignoredModules</code>: don&#8217;t transpile this module or add it to the list of
importable modules. This is useful when you have a file that&#8217;s already
in AMD format (not ES6), and you want to be able to es6 <code>import</code> that
module, so you put it in <code>ignoredModules</code> so it&#8217;s not treated as an
es6 file that needs to be imported.</li>
<li><code>legacyFilesToAppend</code>: non-es6 files (global libraries) that should be
appended to the end of the final output JS file.</li>
</ul>


<p>Note: <code>loaderFile</code> is automatically added as a legacy files, why, duh,
because the loader file obviously needs to be a global, non-module file.</p>

<p>So, wtf does this mean (the latest iteration of the blueprint
Brocfile.js from ember-cli):</p>

<pre><code>if (app.env !== 'production') {
  push.apply(app.ignoredModules, [
    'qunit',
    'ember-qunit'
  ]);

  push.apply(app.legacyFilesToAppend, [
    'test-shims.js',
    'ember-qunit/dist/named-amd/main.js'
  ]);
}
</code></pre>

<p>Well, thanks to the geniuses in freenode IRC <code>#ember-cli</code>, I&#8217;ve learned
that:</p>

<ul>
<li>This shouldn&#8217;t be in the blueprint Brocfile.js, but rather should be
in the ember-cli lib <code>EmberApp</code> abstraction over the Brocfile.js, but
anyway:</li>
<li>The intent is that by specifying an <code>ignoredModules</code> item, you&#8217;re
basically saying &#8220;I intent to import a module with this name, and
because I&#8217;m opting out of generating it now via an ES6 file, I&#8217;ll be
adding an AMD module for this file later&#8221;</li>
</ul>


<p>And if you try to <code>import something from 'nonexistent-module'</code>, you&#8217;ll
get a loader error.</p>

<p>This all seems really obvious, right? Naw, it&#8217;s really freaking hard for
me to keep in my dumb brain. :(</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/04/26/daily-journal/"/>
    <updated>2014-04-26T14:49:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/26/daily-journal</id>
    <content type="html"><![CDATA[<h2>JavaScript: <code>Object#constructor</code></h2>

<pre><code>function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
console.log(new B().constructor); // "[Function: A]"
</code></pre>

<p>That&#8217;s not what we want. If we use <code>Object.create</code> on a parent class&#8217;s
prototype, you need to also do</p>

<pre><code>B.prototype.constructor = B;
console.log(new B().constructor); // "[Function: B]"
</code></pre>

<p>TL;DR, you must manually set <code>constructor</code> on a subclass&#8217;s prototype to
point to that subclass&#8217;s constructor function, or else <code>.constructor</code>
will refer to a parent class&#8217;s constructor.</p>

<h2>Duck duck go</h2>

<p>Search engine that I should be using.</p>

<h2><code>tree</code></h2>

<p><code>tree</code> is a command you can install with <code>brew install tree</code> that
gives you a visual, recursive display of a folder. Output looks like
this:</p>

<pre><code>app/routes
â”œâ”€â”€ ad.js
â”œâ”€â”€ application.js
â”œâ”€â”€ builds
â”‚Â Â  â”œâ”€â”€ form.js
â”‚Â Â  â”œâ”€â”€ index.js
â”‚Â Â  â”œâ”€â”€ select
â”‚Â Â  â”‚Â Â  â””â”€â”€ index.js
â”‚Â Â  â””â”€â”€ select.js
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Journal]]></title>
    <link href="http://machty.github.com/blog/2014/04/21/daily-journal/"/>
    <updated>2014-04-21T09:41:00-04:00</updated>
    <id>http://machty.github.com/blog/2014/04/21/daily-journal</id>
    <content type="html"><![CDATA[<p>This is a half-finished journal. Most of the value lies in the fact that
there&#8217;s a crap-ton of flashcards associated with what I learned.</p>

<h2>Unicorn <code>before_fork</code>, <code>after_fork</code>, and <code>preload_app</code></h2>

<p>In a Unicorn setting, shared resources like database connections
need to be disconnected in Unicorn&#8217;s <code>before_fork</code> hook and reconnected
in <code>after_hook</code>. This is so that you don&#8217;t wind up in a situation where
two forked instances of your server try to write to a DB socket at the
same time, which can result in a Protocol Error. This makes sense; if
two protocol-adhering processes write to the socket at the same time,
the message delivered to the other side obviously won&#8217;t adhere to the
protocol. TODO: at what point does this actually break? How bout writing
a quick Ruby script to prove this :) :) :)</p>

<p>Resources:</p>

<ul>
<li>https://devcenter.heroku.com/articles/concurrency-and-database-connections</li>
</ul>


<h2>The difference between a process and a thread</h2>

<p>A Process has:</p>

<ul>
<li>A group of resources</li>
<li>A Thread of Execution</li>
</ul>


<p>The group of resources includes:</p>

<ul>
<li>Address space where program text and data lives in memory</li>
<li>Global variables</li>
<li>Open files</li>
<li>Child processes</li>
<li>Pending alarms</li>
<li>Signals and signal handlers</li>
<li>Accounting information</li>
</ul>


<p>A Thread (of Execution) has:</p>

<ul>
<li>Program counter</li>
<li>Registers (of course these aren&#8217;t shared b/w threads; that&#8217;s crazy)</li>
<li>Stack</li>
<li>State</li>
</ul>


<p>A Thread must execute in a Process, but they are separate entities.</p>

<p>There are multiple types of threads:</p>

<ul>
<li>User-space threads: super-fast thread switching because no kernel trap
is required. Fine-grain control over thread scheduling. Unable to do
blocking I/O though, since this blocks the entire process and all
user threads.</li>
<li>Kernel-threads: can using blocking IO, defers scheduling to the OS,
but each thread switch means a slow kernel trap, but then again if
you&#8217;re blocked by IO you&#8217;re probably in the kernel anyway.</li>
<li>Combined: multiple kernel threads have multiple userspace threads.</li>
</ul>


<p>Resources:
  - http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread/19518207#19518207
  - http://www.amazon.com/dp/0136006639/?tag=stackoverfl08-20
  - http://www.igvita.com/2010/03/22/untangling-evented-code-with-ruby-fibers/</p>
]]></content>
  </entry>
  
</feed>

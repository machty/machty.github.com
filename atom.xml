<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[machty's blog]]></title>
  <link href="http://machty.github.com/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2017-02-28T14:20:10-05:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Real-time Rails: Dreams for a Better ActionCable]]></title>
    <link href="http://machty.github.com/blog/2017/02/27/realtime-rails/"/>
    <updated>2017-02-27T14:03:00-05:00</updated>
    <id>http://machty.github.com/blog/2017/02/27/realtime-rails</id>
    <content type="html"><![CDATA[<p>I wanted to hopefully get people interested in an idea for bringing more robust real-time data syncing primitives to Rails without involving a whole slew of third party services and new technologies to make it work.</p>

<h3>Proposition: ActionCable is not robust</h3>

<p>It&#8217;s a beautiful API but it suffers many of the shortcomings described in <a href="https://blog.ably.io/rails-5-actioncable-the-good-and-bad-parts-1b56c3b31404#.ex3iqm7co">this article</a>. In my (and my company&#8217;s) particular experience, the following issues are the worst offenders:</p>

<h4>Connection Loss / Reconnection is poorly handled</h4>

<p>Any messages broadcasted during connection loss are not replayed upon reconnection. This means you have to write your own logic to query or push missed data on client or server or both, perhaps based on some incrementing message sequence or <code>updated_at</code> timestamp for whatever model you&#8217;re subscribing to. It&#8217;s a lot of brittle race-conditiony &#8220;configuration&#8221; where there could be more convention.</p>

<h4>Joins, after_commit hooks, observer-y logic</h4>

<p>ActionCable exposes <a href="http://www.rubydoc.info/github/rails/actioncable/ActionCable%2FChannel%2FStreams%3Astream_for">stream_for</a> (and <code>stream_from</code>) as a convention-over-configuration-y declarative API for subscribing an ActionCable connection to a stream of updates for a given model/channel (e.g. a user with ID=&#8217;machty&#8217;).</p>

<p>Unfortunately, most meaningful payloads broadcasted to clients involve some kind of SQL join of multiple tables to produce a JSON payload to broadcast to a given client; if any one of the tables involved in a join has an update/insert/delete, any live subscriptions / action cables need to be kicked so that they can assemble a freshly queried / joined JSON payload to send to all connected clients.</p>

<p>What this means is that if you&#8217;re building a real-time feature that involves serializing data from some deeply nested &#8220;leaf&#8221; table, <em>something</em> in your code has to make sure that changes to that table/model needs to somehow notify all dependent channels that data has changed and new payloads need to be serialized.</p>

<p>One way to do this is with a bunch of <code>after_commit :broadcast_changes</code> on every table whose data might be indirectly serialized in some ActionCable subscription. But that&#8217;s messy, brittle, and gross, and likely will result in overbroadcasting if multiple records with <code>after_commit</code> hooks are being saved in a single transaction (and afaik there&#8217;s no concept of debouncing broadcasts in ActionCable).</p>

<p>You could also make the argument that it&#8217;s an anti-pattern to use <code>after_commit</code> hooks because it means you&#8217;re mixing multiple responsibilities into a Rails model, and you&#8217;d be half-right: Rails models should NOT have to be sullied by change-broadcasting logic, but then again, it seems obviously bad to choose a solution that opens the door to some, but not all, database changes being broadcasted to clients subscribed (directly or indirectly via joins) to a model.</p>

<p>This is why it&#8217;s not a solution to say &#8220;just use a service object to encapsulate both the mutation to the record and the broadcasting of its mutation to subscribed parties&#8221;; the root problem is keeping data in sync, and if the only way to do this correctly is to always remember to use the correct service object that knows how to do the change-and-notify dance, then you&#8217;re just opening the door to data syncing problems somewhere down the line, either because you or some other new developer forgets to use the class, or, pragmatically, you have to <code>heroku console</code> into prod (hopefully super rarely/never) and fix a value, expecting that the fixed value shows up in all real-time apps.</p>

<h4>&#8220;Dual writes&#8221; as an anti-pattern</h4>

<p>Speaking of which, whether or not you use <code>after_commit</code> hooks all over the place or the service object pattern, both of these are just examples of the Dual Write (anti-)pattern for keeping two data stores in sync, where one data store is your relational database (e.g. Postgres) and the other is ActionCable (and all the clients currently using your real-time app). For an excellent writeup on why this a doomed-to-fail idea, please read <a href="https://www.confluent.io/blog/using-logs-to-build-a-solid-data-infrastructure-or-why-dual-writes-are-a-bad-idea/"><em>Using logs to build a solid data infrastructure (why dual writes are a bad idea.)</em></a></p>

<p>But in short, ActionCable and many other pub-sub Redis queue-y solutions are just sugar over a Dual Write pattern, and I think we can do better.</p>

<h2>My Super Hand-Wave-y Vision for the Future</h2>

<p>Recent versions of PostgresSQL, MySQL, MongoDB, Oracle, and I&#8217;m sure many others, expose a streaming log of committed database transactions, which should be considered the source of truth for driving real-time subscriptions and live queries. I&#8217;ll be using Postgres terminology because it is what I&#8217;m most familiar with.</p>

<p>Since Postgres 9.4 (released 2014-12-18), you can use <a href="https://www.postgresql.org/docs/9.4/static/logicaldecoding-explanation.html">logical decoding</a> to subscribe to PG&#8217;s transaction log and do pretty much anything you&#8217;d want with it, such as:</p>

<ol>
<li>Replicate the data to a completely different database system</li>
<li>Write the logs to a file in some proprietary format</li>
<li><a href="https://github.com/confluentinc/bottledwater-pg">Stream the changes</a> <a href="http://debezium.io/">to Kafka</a> and build other decoupled real-time analytics platforms.</li>
<li>&#8230;perhaps use this stream to drive arbitrarily complex live real-time queries in some future version of ActionCable?</li>
</ol>


<p>One of the central criticisms of the <a href="https://en.wikipedia.org/wiki/Lambda_architecture#Criticism">Lambda Architecture</a> (whereby one part of your codebase handled servicing real-time queries, and a totally separate stack handled data archiving/analytics) was that keeping the different stacks in agreement about how the data was presented was an (obvious in retrospect) extremely difficult problem to solve. But I actually think Rails is uniquely positioned to leverage a lot of the familiar / classic Rails-y patterns in conjunction with transaction log streams to build out what everyone <em>wished</em> ActionCable was.</p>

<p>My basic idea is that we enhance ActionCable so that it is consistently consuming the database&#8217;s transaction log and servicing live queries. Instead of just <code>stream_for current_user</code> or <code>stream_from "locations:#{user.location_id}"</code>, you could imagine a <code>stream_query</code> to combine an AREL query with a serializer to set up a &#8220;live query&#8221; for broadcasting updates to each user. Something thing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def subscribed
</span><span class='line'>   stream_query User.where(location_id: params[:location_id])
</span><span class='line'>                    .includes(:comments),
</span><span class='line'>                PayloadSerializer
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Rather than using AREL to perform a database query <em>right now</em>, we&#8217;re using it to define a <em>live query</em> that ActionCable would be in charge of servicing as database updates come in through the transaction log.</p>

<p>Theoretically, the ActionCable &#8220;engine&#8221; would be able to intelligently monitor/track subscription-impacting changes coming in via the T-log; in the above example, the ActionCable engine is &#8220;taught&#8221; to monitor all the following:</p>

<ul>
<li>New/updated/deleted users whose location_id is some static value from the action cable subscription</li>
<li>Comments belonging to any of the above users</li>
</ul>


<p>Any time any of those change, it&#8217;s a signal that a new payload needs to be sent out to clients, which is where the provided <code>PayloadSerializer</code> comes in.</p>

<p>One nice benefit of this is that since AREL queries are declarative/stateless, it would be (hopefully) possible to reuse the same AREL queries and <code>scope</code>s that pre-existing Rails code is already using to service classic HTTP request/responses. This would hopefully prevent a lot of the split-brained APIs/stacks that were inherent in the Lambda Architecture.</p>

<p>Another benefit is that you wouldn&#8217;t have to decide between <code>after_commit</code> and service objects, nor would you be going down the &#8220;Dual Write&#8221; path to data inconsistency in the process; all responsibility for keeping data in sync would be handled by ActionCable or declarative AREL queries.</p>

<h2>Major Caveats</h2>

<p>While Postgres has had logical decoding for 2+ years, I haven&#8217;t found a hosted solution that gives you all the tools you need to make use of it (Heroku Postgres doesn&#8217;t let you access WAL in any way whatsoever, and while Amazon RDS&#8217; Postgres engine <em>does</em> let you use logical decoding, you&#8217;re stuck with built-in &#8220;test_decoder&#8221; which is practically the same as not having exposing the feature at all).</p>

<p>So to even build something like this you&#8217;d likely have to host your own Postgres, which for many startups is a nonstarter to say the least.</p>

<p>Also, I am glossing over so many extremely complex details for query/subscription state management (that would be magically handled by the ActionCable internals) that it&#8217;s not even funny. But I wanted to at least get some nugget of this idea out into the world to see how folk smarter that I might take it and run with it. Or totally shoot it down. I welcome both.</p>

<h2>Inspiration / Resources</h2>

<p>Everyone who uses Apache Kafka or Amazon Kinesis or any stream processor driven by a robust, persistent log-based data system.</p>

<p>Things you should read:</p>

<ul>
<li><a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">The Log: What every software engineer should know about real-time data&#8217;s unifying abstraction</a></li>
<li><a href="https://www.confluent.io/blog/using-logs-to-build-a-solid-data-infrastructure-or-why-dual-writes-are-a-bad-idea/">Using logs to build a solid data infrastructure (or: why dual writes are a bad idea)</a></li>
<li><a href="https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/">Turning the database inside out with Apache Samza</a></li>
<li><a href="http://debezium.io/">Debezium: Stream changes from your databases</a></li>
<li><a href="https://www.confluent.io/blog/bottled-water-real-time-integration-of-postgresql-and-kafka/">Bottled Water: Real-time integration of PostgresSQL and Kafka</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode omg]]></title>
    <link href="http://machty.github.com/blog/2016/01/30/xcode-omg/"/>
    <updated>2016-01-30T14:03:00-05:00</updated>
    <id>http://machty.github.com/blog/2016/01/30/xcode-omg</id>
    <content type="html"><![CDATA[<h2>ok iphone</h2>

<p>So many icons to prepare that I&#8217;m losing track of which devices are
which and when they came out:</p>

<p>http://stackoverflow.com/a/26085718/914123</p>

<ul>
<li>1x images are for the original iPhone through the 3GS - &#8216;standard&#8217; resolution devices (3.5&#8221; screens)</li>
<li><p>2x images are for the iPhone 4 and 4S (3.5&#8221; Retina screens) and are also used for the iPhone 6.</p></li>
<li><p>Retina 4 2x are for the iPhone 5 and 5s (4&#8221; Retina screens)</p></li>
<li><p>2x, iPhone 5</p></li>
<li><p>3x, 5.5&#8221;, super-retina</p>

<ul>
<li>iPhone 6, iPhone 6 Plus (released Sep14)</li>
<li>iPhone 6S, iPhone 6S Plus (released Sep15)</li>
</ul>
</li>
</ul>


<p>https://en.wikipedia.org/wiki/IPhone_6S#Timeline_of_models</p>

<p>Blah blah blah none of this is important. The rule is that Apple
specifies dimensions via pts, not pixels. Original iPhone was 1 to 1.
Then retina came out and on retina devices 1 pt is 2 px. And on triple
retina 1pt is 3px.</p>

<p>When Apple says &#8220;gimme a 60pt icon at 3x&#8221; they want a 180x180 pixel
image.</p>

<h2>transducer CSP buffer</h2>

<p>Why doesn&#8217;t js-csp allow unbuffered channels + transducers?</p>

<p>https://github.com/ubolonton/js-csp/issues/7#issuecomment-57937657</p>

<blockquote><p>The main issue is that a transducer takes one value, but it may put any number of values into the channel. There is no guarantee that you&#8217;ll only get one.</p></blockquote>

<p>core.async apparently expands buffers sometimes (for &#8220;expanding&#8221;
transducers like cat). But js-csp is punting on unbuffered transducers.</p>

<h2>backing up redis w shit heroku</h2>

<pre><code>heroku run bash -a ...
rails c
&gt; File.write('backup', REDIS.sync)
# open ngrok tcp connection to port 22
# enable remote login on mac
scp -P 12345ngrokport filename whatever.ngrok.io:destfilename
</code></pre>

<h2>how does trello sync an update?</h2>

<p>Let&#8217;s say you&#8217;re adding a trello card. You type &#8220;wat&#8221;
into a new card and press enter. Boom. Card created; anyone
else looking at the board will see it too.</p>

<p>How does this work under the hood?</p>

<p>It uses AJAX and two Websocket receives.</p>

<h3>AJAX POST: https://trello.com/1/cards</h3>

<p>In typical rest fashion it POSTs to https://trello.com/1/cards
to create a card. Relevant request payload:</p>

<pre><code>{
    "closed": false,

    // epoch milliseconds time. Corresponds to 2016-04-06 17:02:17 -0400
    "dateLastActivity": 1459976537279,

    // list of labels (no labels applied)
    "idLabels": [],

    // the Trello board we're adding to;
    // this is also the idModelChannel from the WebSockets
    // subscription that identifies the channel that we're subscribed to
    "idBoard": "50b2217de9adebf92a003faa",

    // the specific list we're adding the card to
    "idList": "56f0661ab54cf7e17a3403f4",

    // i don't know what this is
    "idMembers": [],

    // name of card (what i just typed in -- separate from description)
    "name": "wat",

    // probably used for ordering cards?
    "pos": 262143,

    // probably an authentication token since Trello doesn't
    // seem to use any auth headers
    "token": "&lt;redacted&gt;"
}
</code></pre>

<p>That&#8217;s the request. Here&#8217;s the response</p>

<pre><code>{
    "badges": { /* numbers for varios badges */ },

    // time of creation
    "dateLastActivity": "2016-04-06T21:02:17.626Z",

    // blank description because I only provided the title
    "desc": "",
    "descData": { "emoji": {}
    },
    "due": null,

    // an email address that, when you send stuff to it,
    // posts the email contents as a comment
    "email": "&lt;redacted&gt;",
    "id": "57057959d3730256d4a5391b",
    "idAttachmentCover": null,
    "idBoard": "50b2217de9adebf92a003faa",
    "idChecklists": [],
    "idLabels": [],
    "idList": "56f0661ab54cf7e17a3403f4",
    "idMembers": [],
    "idShort": 296,
    "labels": [],
    "manualCoverAttachment": false,
    "name": "wat",
    "pos": 262143,
    "shortUrl": "https://trello.com/c/7iBjP7iY",
    "stickers": [],
    "url": "https://trello.com/c/7iBjP7iY/296-wat"
}
</code></pre>

<p>The the first weird thing about this is that this seems like
a pretty full payload of data, which is likely redundant to
any data received from the WebSocket. Speaking of which,
what does the WebSocket get? It seems to get two messages (and
at no point does it send anything):</p>

<pre><code>{
    "idModelChannel": "50b2217de9adebf92a003faa",
    "ixLastUpdateChannel": 5,
    "notify": {
        "deltas": [ /* giant blob of data... see below */ ],
        "event": "updateModels",
        "tags": [ "allActions", "clientActions" ],
        "typeName": "Action"
    }
}
</code></pre>

<p>First of note is the idModelChannel, which has the same value as
idBoard. This tells us what websocket &#8220;channel&#8221; this message corresponds
to: the channel for all updates that fall under the particular board
you&#8217;re looking at. This makes sense: when you look at another board
you should be subscribed to that board, and when you change which board
you&#8217;re looking at, you probably want to desubscribe from the old and
subscribe to the new.</p>

<p>This is the challenging thing about rolling your own synchronization
scheme: you have to define upfront your level of granularity of updates.
Trello has opted for the simple solution of:</p>

<ol>
<li>you subscribe to a single websockets connection</li>
<li>using that connection, you only subscribe to only one channel &#8211; the one
corresponding to the Trello board.</li>
<li>this implies that Trello&#8217;s server code is implemented such that any
changes to any submodels of Board (cards, card lists, etc) need
to notify the root board model of changes. Usually it&#8217;s pretty
messy when models have to notify their relationships of changes,
but since there&#8217;s just one root &#8220;observer&#8221;, the Trello Board model,
Trello&#8217;s probably avoided lots of ugly spaghetti code from models
having to notify each other of changes.</li>
</ol>


<p>So anyway, let&#8217;s get back to the websocket message above:</p>

<p><code>ixLastUpdateChannel</code> seems to just be a sequence number for a
particular websocket message. It is shared between tabs, such that
if Trello sends a WS message with the same <code>ixLastUpdateChannel</code>,
you can bet that the contents are the same. Let&#8217;s see if it&#8217;s the
same between users: YES even between different users is this stuff
shared. This implies another simplification that Trello can take
advantage of: because they don&#8217;t see to have ACLs or any other access
control, they can share a lot more information and maintain a lot
less subscription state on the server to keep everyone in sync.</p>

<p><code>notify</code> just seems to contain the payload of what has changed.
<code>event</code> always seems to have the value &#8220;updateModels&#8221;, so we
can ignore that. <code>tags</code> is &#8220;allActions&#8221; and &#8220;clientActions&#8221;&#8230; I&#8217;m
guessing this is provided as a means to filter, on the client-side,
what messages you want to respond to, so for instance, if you&#8217;re
building an adminstrative app and you want to show a page that
only responds to changes made from the admin app, you ignore
messages tagged as &#8220;clientActions&#8221; which presumably are actions
originating from the main Trello page that Trello customer use
(this is me just guessing, I have no idea).</p>

<p><code>typeName</code>, in my tests, has any of the following values:
&#8220;Action&#8221;, &#8220;Card&#8221;, or &#8220;Member&#8221;. It seems to describe which kind
of model has been updated. If it&#8217;s &#8220;Action&#8221;, then it probably
corresponds to the activity feed on the right side of the page
that shows recent modifications to the board. If it&#8217;s a &#8220;Card&#8221;</p>

<p>Let&#8217;s see
if it is shared between totally different users.</p>

<h2>IPsec</h2>

<p>Security at the Internet layer (rather than TLS at the application layer). So you can secure applications at the IP layer. VPN is an example of this.</p>

<p>  • IPsec can be host to host, host to security gateway, or sec gway to sec gway (i.e. network to network)</p>

<p>https://www.youtube.com/watch?v=TouDblq-sso</p>

<p>  • IPsec is type of VPN
  • VPN
  ⁃ enableable on home router
  ⁃ P2P connections
  ⁃ remote VPNs: central corporation sets up VPN, other things VPN into it
  • VPNs from 90s
  • in 90s, offices had central offices and regional offices
  • Secure tunnel over public network
  ⁃ Client to firewall
  ⁃ Router to router
  ⁃ Firewall to firewall
  • Instead of private hardware lines (which are tappable) just use public network
  • VPN Protocols
  ⁃ NOTE: link layer == layer 2. The layer where adjacent network nodes transfer data. TCP is between N number nodes, link layer concerns are physical connections between two nodes. Data link protocols concern only that segment between two nodes.
  ⁃ PPTP (point-to-point tunneling protocol)
  ⁃ from Microsoft
  ⁃ secured dialup in early days
  ⁃ happens on the data link layer
  ⁃ L2F (layer 2 forwarding protocol)
  ⁃ from Cisco
  ⁃ link layer
  ⁃ almost same as PPTP
  ⁃ L2TP (Layer 2 Tunneling Protocol)
  ⁃ Combines above 2. Note the combined names
  ⁃ IPsec (Internet Protocol security)
  ⁃ IETF open standard for VPN standards
  ⁃ operates on Network/Internet layer
  ⁃ commonly implemented on routers
  • IPsec
  ⁃ Layer 3 (IP/Networking layer)
  ⁃ Everyone uses IP datagrams, you get it for free.
  ⁃ Protects node<->node, router<->router, whatever<->whatever
  ⁃ Two modes of operation
  ⁃ Tunnel
  ⁃ Transport
  ⁃ IPsec combines following components (hence it&#8217;s called a &#8220;protocol suite&#8221;)
  ⁃ Security Associations (SA)
  ⁃ Authentication headers (AH)
  ⁃ Encapsulating security payload (ESP)
  ⁃ Internet Key Exchange (IKE)
  ⁃ Another component: ISAKMP
  ⁃ Internet Security Association and Key Management Protocol
  ⁃ TODO: Wat
  ⁃ IP Internet Protocol is not secure
  ⁃ IPsec built into IPv6 protocol (really?)
  ⁃ IPsec not in IPv4 because 4 was developed in old times when security wasn&#8217;t such an issue
  ⁃ Security issues w IPv4
  ⁃ Source spoofing
  ⁃ replay packets
  ⁃ no data integrity or confidentiality
  ⁃ All of above addressed in IPsec
  ⁃ RC 4301 &#8220;The IP Sec Architecture&#8221;&#8230; defines elements of AH and ESP
  ⁃ RFC 4302
  ⁃ Algorithm independent RFC for exportable crypto auth
  ⁃ AH doesn&#8217;t have any encryption mechanisms
  ⁃ RFC 4304
  ⁃ ESP: Encapsulating Security Payload
  ⁃ Adds encryption to ipv4 and v6 packets
  ⁃ RFC 2408
  ⁃ ISAKMP: procedures / packet formats for modifying security associations
  ⁃ Transferring key auth data b/w two endpoints
  • Benefits of IPsec
  ⁃ Confidentiality
  ⁃ by encrypting data
  ⁃ available only to limited num of people
  ⁃ access lists, etc
  ⁃ no man in middle reading
  ⁃ Integrity
  ⁃ Routers at each end check hash/checksum
  ⁃ Authentication (confirm who you are)
  ⁃ Signatures and certs
  ⁃ Compatibility through existing IP networks at Layer 3. Transparent to applications. Hence applications don&#8217;t have to know about IPsec.
  ⁃ Anti-replay
  ⁃ Key management
  ⁃ No way to lose a key
  ⁃ Ways to recover (?) keys
  • IPsec modes
  ⁃ Great image at https://youtu.be/TouDblq-sso?t=1461
  ⁃ Tunnel
  ⁃ Entire IP packet is encrypted/encapsulated, becomes datacomponent of new (and larger) IP packet
  ⁃ Frequently used in IPsec site-to-site VPN
  ⁃ Encapsulated packet has its own source/destination
  ⁃ Quite useful for implementing Point to Point, site to site VPN.
  ⁃ Frequently used in P2P&#8230; WHY?
  ⁃ So if you&#8217;re trying to tie two networks to each other, then if you&#8217;re 192.168.1.2 and you&#8217;re trying to reach 192.168.1.3, then at the IP layer it can use Tunnel mode to wrap your packet so that source and destination reflect your real external IP source/dest, but the encrypted IPsec contents get used post VPN termination to route to private IP.
  ⁃ Example:
  ⁃ before: [IP[TCP[Payload]]]
  ⁃ i.e. IP header + TCP/UDP + payload
  ⁃ after: [IPsec[encrypted(IP[TCP[Payload]])]]
  ⁃ payload becomes (IP header + TCP/UDP + payload). prefixed w ipsec header
  ⁃ Useful for site-to-site
  ⁃ New source and dest in header
  ⁃ Because of this, used in P2P&#8230; (?)
  ⁃ From https://en.wikipedia.org/wiki/IPsec#Modes_of_operation
  ⁃ entire IP packet encrypted/auth&#8217;d. Encapsulated into new IP packet.
  ⁃ NAT traversal supported presumably because old IP header preserved
  ⁃ NOTE:
  ⁃ Tunneling in general just means repackaging the data sent so that it can &#8220;fit&#8221; within another kind of network.
  ⁃ e.g. running ipv6 over ipv4, remotely connecting to VPN, etc
  ⁃ Transport
  ⁃ No new packet created
  ⁃ Just insert IP header&#8230; but somehow preserve size?
  ⁃ [IP[IPsec[TCP[Payload]]]
  ⁃ frequently used for remote access to VPNs
  ⁃ logging into corporate VPN, etc
  ⁃ probably because you don&#8217;t bloat header too much?
  ⁃ But what about NAT????
  ⁃ From https://en.wikipedia.org/wiki/IPsec#Modes_of_operation
  ⁃ only payload of IP packet is encrypted/auth&#8217;d
  ⁃ routing (IP header) is untouched
  ⁃ if AH is used, IP addresses can&#8217;t be NATd, or hash will be invalidated.
  • IPsec component review
  ⁃ Security protocols
  ⁃ AH
  ⁃ ESP
  ⁃ Establishing the tunnel
  ⁃ IKE
  • Security Associations (SA)
  ⁃ Used by all other protocols
  ⁃ A collection of different attributes/parameters associated w secure connections
  ⁃ If you have IPsec datagram, when it arrives at other interface, which set of params to use?
  ⁃ Hosts can be connected to many different connections/conversations going on
  ⁃ Each connection has different set of keys/algos
  ⁃ An SA has 3 params
  ⁃ SPI: security parameter index
  ⁃ IP destination address
  ⁃ SADB (SA database)
  ⁃ SA is unidirectional
  ⁃ Two SAs required for bi-directional communication b/w two endpoints
  ⁃ A single SA can be used for AH or ESP, but not both
  ⁃ hence: if you want to use AH and ESP for bi-directional, you need total of 4 SAs
  ⁃ When a system sends a packet that requires IPsec, server will look up SA in SADB
  • Setting up SA
  ⁃ Manual keying
  ⁃ Configure each node
  ⁃ Automatically
  ⁃ Using IKE (Internet Key Exchange)
  • ISAKMP (RFC 2408)
  ⁃ Internet Security Association and Key Management Protocol
  ⁃ Many different SAs being passed forwards and backwards, this protocol helps manage it
  ⁃ Distinct from key exchange, focuses only on key management
  ⁃ Many different key exchange protocols, but ISAKMP is used to negotiate what you&#8217;re using so that the protocols can do the rest
  • Authentication Header (AH)
  ⁃ Security Protocol, along with ESP; both offer authentication and integrity.
  ⁃ Typically use only AH or ESP, not both, but if both, AH comes after ESP
  ⁃ ESP is far more popular today&#8230; AH not even supported in Cisco
  ⁃ AH authenticates/integrities but doesn&#8217;t encrypt IP traffic.
  ⁃ ESP encrypts
  ⁃ ESP/AH are 50/51 in IANA protocol numbers. This number is sent in IP packet header under &#8220;protocol&#8221;
  • ESP
  ⁃ Must encrypt and auth per packet
  ⁃ Encrypt first and then auth
  • AH for Transport Mode
  ⁃ before: [original IP][TCP/UDP][Data]
  ⁃ after: [original IP][AH Header][TCP/UDP][Data]
  ⁃ AH header authenticates everything except for mutable IP header fields
  ⁃ Hop-to-hop fields are mutable
  ⁃ Why use it?
  ⁃ You wouldn&#8217;t if you need encryption
  ⁃ but AH is less bandwidth
  • ESP for transport mode
  ⁃ https://youtu.be/TouDblq-sso?t=2185
  ⁃ adds a header and trailer
  ⁃ TCP payload + ESP trailer is encrypted
  ⁃ encrypted result and ESP header is authenticated
  ⁃ ESP authentication comes at the very end
  • Tunnel mode means bigger packets due to headers/trailers/etc
  ⁃ You might need to talk to network providers to increase MTU sizes (presently 1500 bytes in most cases)
  • Internet Key Exchange (IKE)
  ⁃ automated
  ⁃ Modes
  ⁃ Main Mode
  ⁃ 3 exchanges of info between IPsec peers
  ⁃ when connecting, 1 peer (initiator) sends one or more proposals to other peer (responder). Responder selects proposal.
  ⁃ proposal can indicate whether initiator supports Perfect Forward Secrecy (PFS)
  ⁃ ensures that a session key remains secure even if one of the PKs to derive session key has been compromised. Jesus Christ.
  ⁃ mainly used for first phase
  ⁃ Aggressive Mode
  ⁃ Used during phase 1
  ⁃ Same thing as main mode but with fewer packets (3)
  ⁃ Quick Mode
  ⁃ Negotiates params for IPsec session in Phase 2.
  ⁃ Phases
  ⁃ Phase 1
  ⁃ Establish secure channel (ISAKMP SA) between two endpoints
  ⁃ Use either main mode/aggressive mode
  ⁃ Authenticate computer id using certs or pre-shared secret
  ⁃ Idea behind this:
  ⁃ each application will have its own security policy. e.g. VPNs, or p2p, etc
  ⁃ Phase 2
  ⁃ Establish secure channel between computers intended for transmit of data
  ⁃ Using quick mode
  ⁃ Review
  ⁃ Two endpoints (terminals)
  ⁃ Phase 1: secure channel
  ⁃ Negotiate ISALMP SA which will create IPsec SAs
  ⁃ Step 1: SA negotiation (encryption, hash, auth, DF group)
  ⁃ Do Diffie Hellman exchange
  ⁃ two computers generate shared priv key using prime numbers, modulos, exponents, and holy fuck.
  ⁃ TL;DR, this derives a shared K that is roughly as secure as RSA. Fucking awesome.
  ⁃ Provide auth information
  ⁃ Authenticate the peer</p>

<h2>Crypto</h2>

<p>https://www.youtube.com/watch?v=vdr74e7D9IU&amp;nohtml5=False</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tarpit]]></title>
    <link href="http://machty.github.com/blog/2015/12/29/tarpit/"/>
    <updated>2015-12-29T09:41:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/12/29/tarpit</id>
    <content type="html"><![CDATA[<p>Notes from tarpit reading: http://shaffner.us/cs/papers/tarpit.pdf</p>

<p>OOP: intentionally couple state to related behavior</p>

<p>No Silver Bullet, what makes software hard: Complexity, Conformity, Changeability, Invisibility</p>

<p>Dijkstra: testing is hopelessly inadequate&#8230; it can be used very effectively to show the presence of bugs but never to show their absence.</p>

<p>State hinders Informal Reasoning, reasoning about expected behavior from the inside, with knowledge of internal code.</p>

<p>Control Complexity: complexity due to having to be concerned about the order of events. Languages with explicit flow control make you think about this.</p>

<p>a = b + 3
c = d + 2
e = f * 4</p>

<p>No reason for this flow, but programmer has to over-specify it (and compilers have to go to lengths to know that the order can be safely ignored). Accidental complexity:</p>

<ol>
<li>artificial, totally ignorable ordering imposed on programmer</li>
<li>compiler work is done to optimize it away</li>
</ol>


<p>Note that these two forms of complexity only apply given the assumption that the above code is for an imperative language with guarantees about order of execution; Oz is an example of a programming language that didn&#8217;t specify this.</p>

<p>&#8220;Running a test in the presence of concurrency with a known initial state and set of inputs tells you nothing at all about what will happen the next time you run that very same test with the very same inputs and the very same starting state&#8230; and things can’t really get any worse than that.&#8221;</p>

<p>CLOS: Common Lisp Object System, with multiple dispatch (methods can specialize on any/all required arguments, unlike classic OOP single dispatch).</p>

<p>Problems with OOP encapsulation:</p>

<ul>
<li>access to state can still be spread all over the place, e.g. in presence of inheritance</li>
<li>encapsulation strongly biased toward single-object constraints; not a lot of help in coordinating multiple object states</li>
</ul>


<p>Identity and State</p>

<p>Object identity: in OOP, each object is considered uniquely identifiable regardless of attributes. This is intensional identity (as opposed to extensional where objects are the same if their attributes are). Intensional identity opposes relational algebra view of the world.</p>

<p>But OOP is complicated when mutability isn&#8217;t needed, and you add concepts like Value Objects where equality is based on values and not identity (in other words, it brings back extensional identity).</p>

<p>https://en.wikipedia.org/wiki/Value_object</p>

<p>Immutable small objects whose equality is not based on identity. In int is an int forever, but objects can be mutated, so if you want an object that acts like, say, an int, you want a value object.</p>

<p>TL;DR C++ has copy-by-value because C does, hence both support value objects. Java has no native support for value objects, but you can get a functionally similar/equivalent thing by passing around references to immutable objects (VALJO, VALue Java Object, where all attributes of the obj are final and doesn&#8217;t contain other objects w mutable state).</p>

<p>Object Identity exists because state exists, and is a source of error due to mental switching between the meaning of equality. (TODO: why isn&#8217;t this a problem in Clojure? You have to mentally switch between values and atoms&#8230; how is that any different?).</p>

<p>Hmm I feel like there&#8217;s something I&#8217;m not quite grasping about what people mean when they say state. Seems like everything has state? I dunno.</p>

<p>Summary: conventional OOP suffers from state-derived and control-derived complexity.</p>

<p>Functional Languages</p>

<p>Pure: Haskell. Impure: ML, in that it advocates avoiding but still permits state.</p>

<p>Referential transparency: an expression (e.g. function calls) are replaceable by a value&#8230; nope, i guess it&#8217;s just that a function called with the same args will always return the same value.</p>

<p>Control:</p>

<p>Still an implicit left-to-right sequencing of operations, but fortunately control flow like loops are avoided in favor of fold/map.</p>

<p>Kinds of state</p>

<p>When most people talk about state they really mean mutable state.</p>

<p>Stateful methods can be replaced by functions where the state is passed in, and a new version of the state is returned, with the expectation that the new state must be passed in again to future calls (because referential transparency means the same function invocation always returns the same thing).</p>

<p>This paper seems to distinguish b/w procedures and functions based on a procedure having state&#8230; it runs and can manipulate inner state. But a functional only returns values based on what was passed in and has new inner state.</p>

<p>BUT, this is just using FP to simulate state. In principle, you could build functional programs by just passing in the global god state of the app into every function and just chaining it along, which brings back the problem of single pool of global variables. Ref transparency++, ease of reasoning&#8211;. But this is an extreme example.</p>

<p>Argument: state increases modularity:</p>

<p>&#8220;Working within a stateful framework it is possible to add state to any component without adjusting the components which invoke it.&#8221;</p>

<p>With FP, you have ripple effects where adding &#8220;state&#8221; to a function means that state needs to be provided by a caller of a caller of a caller, etc, e.g. adding that extra state parameter.</p>

<p>It&#8217;s a tradeoff between hiding state and FP where you know exactly what will happen.</p>

<p>But in stateful PLs, you never know if there will be side-effects; you have to inspect all code to really know.</p>

<p>&#8220;As with the discipline of (static) typing, it is trading a one-off up-front cost for continuing future gains and safety (“one-off” because each piece of code is written once but is read, reasoned about and tested on a continuing basis).&#8221;</p>

<p>In other words, it&#8217;s convenient in the moment to have state (the one-off time you write that stateful code), but for all future readers/reasoners, they have to deal with the fallout of losing the guarantee of statelessness.</p>

<p>Monads are kind of a way to have the cake and it it too, but makes it possible to create a stateful sub-language within Haskell, even if technically it&#8217;s properly typed as such. But still, monads have been insufficient in helping widespread FP adoption.</p>

<p>Logic Programming</p>

<p>State your axioms and desired goals, let the system build the formal proof for each solution. Prolog is seminal logic PL.</p>

<p>&#8220;It is worth noting that a single Prolog program can be both correct when read in the first way, and incorrect (for example due to non-termination) when read in the second.&#8221;</p>

<p>This is because Prolog axioms aren&#8217;t read as purely logical axioms but are applied sequentially, which is why the order of axioms can affect the outcome.</p>

<p>Control issues</p>

<p>LTR and top to bottom dependencies exist. Also, extra-logical features such as cuts (which prevent a restriction of control flow, presumably to prevent non-termination) add complexity.</p>

<p>Oz gives you flexibility of control rather than depth-first prolog, but rather than sprinkling these into the code, it&#8217;s at a separate level; in other words, the way you execute code is configurable, not within the code itself (a contamination of control complexity).</p>

<p>Classifying state:</p>

<p>Goal: determine origins of state, hope that most state turns out to be accidental.</p>

<p>All data is either directly provided to system (input) or derived.</p>

<p>Derived data is either immutable (used only for display) or mutable (because requirements specify user should update that data)</p>

<p>But just because all user input data is essential does not mean it must result in essential state. If it&#8217;s avoidable, it&#8217;s accidental state.</p>

<p>Input Data:</p>

<ul>
<li>there&#8217;s a possibility of referring to that data in the future: essential state</li>
<li>there is no possibility (e.g. it&#8217;s used to cause some side effect but then can be forgotten)</li>
</ul>


<p>Essential Derived Data - immutable</p>

<p>Always rederivable, accidental state if stored.</p>

<p>Essential Derived Data - mutable</p>

<p>I don&#8217;t understand this.</p>

<p>Accidental Derived Data</p>

<p>Ideal world:</p>

<p>No caches, no stores of derived calculations of any kind. Result: all state is visible to the user (or tester) of the system, since (disallowed) caching is the main source of hidden state. If you&#8217;re not caching, then everything you calculate is presented to the user.</p>

<p>Control</p>

<p>Control is accidental since it&#8217;s rare if ever that requirements are a view of execution.</p>

<p>Concurrency is accidental; assuming zero time computation, user doesn&#8217;t care whether something happens in sequence or parallel.</p>

<p>Real world</p>

<ul>
<li>state is required because most systems have state as part of their true essence (wtf does this mean?)</li>
<li>control is accidental, but practically (and for efficiency purposes) it is needed, same goes w state (caching and what not)</li>
</ul>


<p>Formal Specification</p>

<ul>
<li>property-based: <em>what</em> is required rather than how. Includes algebraic approaches such as Larch and OBJ</li>
<li>model-based / state-based: construct a model, often stateful, and specify how it must behave. Implies a stateful approach for how to solve the problem.</li>
</ul>


<p>Sometimes ideal world approach (no accidental state, derive everything) does not best model program. Example: derived data is dependent on both series of user inputs over time, AND its own previous values. In such a case it can help to maintain accidental state (I don&#8217;t get this&#8230; why is this different than the conveniences of storing derived state that isn&#8217;t strictly historical?). Example: position of computer controlled opponent in interactive game: technically position is derivable as f(initialPosition, allMovementsSince), but &#8220;this is not the way it is most naturally expressed&#8221;. Go fuck yourself and your loose definition of what is natural.</p>

<p>Required Accidental Complexity:</p>

<ul>
<li>perf

<ul>
<li>avoid explicit management of accidental state; instead: simply declare what accidental state should be use, leave to separate infrastructure to maintain.</li>
</ul>
</li>
<li>ease of expression: (e.g. position of computer controlled opponent)

<ul>
<li>solution: pretend user is typing in this derived state, i.e. pretend that it is essential input</li>
</ul>
</li>
</ul>


<p>Relational Model</p>

<ul>
<li>structure of data</li>
<li>manipulating data</li>
<li>maintaining integrity and consistency of state</li>
<li>insistence on separation b/w logical and physical layers of system</li>
</ul>


<p>Data independence: app / logical model is separate from the data is actually stored</p>

<p>Structure: use of relations to represent all data
Manipulation: a means to specify derived data
Integrity: constraints
Data Independence: clear separation is enforced b/w logical data and physical representation</p>

<p>Base Relations: raw tables
Derived Relations: Views: defined in terms of other relations</p>

<p>Access path independence:</p>

<p>Relational structuring allows you to defer access paths (how the data will be queried, join, etc). Before relational model, you had to decide up front, e.g, whether employees would live inside top level departments, or departments within top level employees. This is the hierarchical approach. The network approach is a little better in that you can add cycles but in the end you&#8217;re still defining the primary retrieval requirements up front at the expense of not knowing what secondary/future retrieval requirements you&#8217;ll have. Again, joining is the canonical example.</p>

<p>OOP and XML suffer same hierarchical problems. Nesting. Who owns what. etc.</p>

<p>Manipulation: relational algebra</p>

<p>Restrict: unary operation for selecting subset (where clause?)
Project: unary op which creates a new relation w various attributes removed (not added?)
Product: cartesian product of tables (e.g. SELECT FROM foo, wat;)
Union: binary operation, creates relation w all records in either arg relation
Intersection: binary operation, creates a relation consisting of all records in both
Difference: xor
Join: binary operation construction all possible records that result from identical attrs
Divide: ternary operation returning all records of first arg with occur in second arg associated w each record of 3rd arg (wat?</p>

<p>Functional Relational Programming</p>

<p>All essential state comes in the form of relations, and essential logic is expressed using relational algebra extended w pure user defined functions</p>

<p>Step 1, specify each of the following</p>

<p>Essential State: relational definition of stateful components
Essential Logic: Derived-relation defitions, integrity constraints, and pure functions
Accidental State and Control: declarative specification of a set of perf optimizations for the system
Other: user and system interfaces for the outside world</p>

<p>Essential state</p>

<p>Relations, tables, columns (the schema, not actual rows/records)
Data should only be considered essential if directly input by user.</p>

<p>Essential Logic</p>

<p>Pure functions about data transformation, set of db constraints.</p>

<p>Note that we ignore &#8220;denormalization for perf&#8221; for now because we&#8217;re just talking about formal specifications; the physical storage may or may not mirror what&#8217;s being specified here.</p>

<p>Accidental State and Control</p>

<p>Specify 1) what state should exist, 2) what physical storage mechanism used</p>

<ul>
<li>state-related hint: e.g. some derived-relvar should be stored rather than recalculated</li>
<li>second kind of state-related hint: infrequently used subset of relvar should be stored elsewhere (e.g. partitioning a table)</li>
</ul>


<p>Control side:</p>

<ul>
<li>tweaking the evaluator</li>
</ul>


<p>TL;DRs:</p>

<p>Declarative lets infrastructure optimize for you, e.g. avoid relational <code>intersection</code> if it can be determined that two groups are mutually exclusive, not possible/easy with imperative.</p>

<p>Normalized relational everything: avoids subjective bias about data access paths. OOP and XML generally force you to do the opposite, choosing nestings ahead of time and other things.</p>

<p>Control is <em>avoided</em>  relational approach (think of SQL; no order of evaluation; this is intentional).</p>

<p>Explicit parallelism is avoided, but allows for possibility for separated accidental control if required; whether it&#8217;s parallel or not shouldn&#8217;t matter to anyone other than implementor, i.e. if it really improves things, it&#8217;ll be parallel, but functionally it&#8217;s the same interface for infrastructure consumers.</p>

<p>Code Volume</p>

<p>Focus on true essentials avoids accidental complexity.</p>

<p>Data Abstraction</p>

<p>Creation of compound data types; to be avoided. Why:</p>

<ul>
<li><p>Subjective: like baking in data paths in OOP/XML-ish representation of data, is brittle to future use cases. Pre-existing bias will force future use cases into inappropriate reuse of pre-established biased structures. (I like this; this is a source of refactors, when you know what you&#8217;re doing is gross because of some new use case)</p></li>
<li><p>Data Hiding: constructing giant objects often causes unneeded, irrelevant data to be supplied to function, and <em>which</em> data actually gets used is hidden at call site, hurts informal reasoning and testability. Avoiding composite objects helps avoiding this problem.</p></li>
</ul>


<p>FRP (func rel) opens door to</p>

<ul>
<li>perf (decided by infrastructure)</li>
<li>different dev teams focusing on different components (by components we mean accidental vs essential vs interfacing)&#8230; this arg seems weak, or i don&#8217;t really understand it</li>
</ul>


<p>Allowed Types</p>

<p>Can create limited types for essential state/logic components:</p>

<ul>
<li>disjoint union / enumeration types</li>
<li>NO product types (types w subsidiary components)</li>
</ul>


<p>https://en.wikipedia.org/wiki/Algebraic_data_type</p>

<p>Algebraic data type is a kind of composite type; type formed by combining other types. Product types (tuples and records), and sum types (disjoint unions or variant types). So you can have things like</p>

<p>Action = UserClickEvent | UserDragEvent | Blah</p>

<p>This is a sum type; the total values an Action could be are the total possible values of its variants, summed.</p>

<p>A Product type is, say, a type, e.g. (Int, String), where the total possible values are all the possible values of variants, multiplied (hence product).</p>

<p>Why sum and not product? because Sums don&#8217;t add new data types, really, they just categorize for pattern matching and other things. Whereas products create new compound datatypes.</p>

<p>Example app</p>

<p>Derived internal relations:</p>

<ul>
<li>RoomInfo, extend(Room, (roomSize = width * breadth))

<ul>
<li>so it&#8217;s a room info with another type</li>
</ul>
</li>
<li>Acceptance takes accepted Decisions and strips away accepted bool. So an Acceptance is a Decision without an accepted flag. I like this because we&#8217;re keeping the domain simple; if we&#8217;re dealing with Acceptances, we don&#8217;t have to worry that it&#8217;s an acceptance that&#8217;s not an acceptance; the domain is constrained properly.</li>
<li>Rejection is the opposite, but has the same attrs</li>
</ul>


<p>Accidental state and control</p>

<p>This part is interesting because it suggests that defining relations (like you do when designing/committing a DB schema) is a premature accidental complexity. This paper suggests that you take your essential state types and hint that some of them should be cached. In relational databases, if you CREATE TABLE, you&#8217;re creating a cache. I guess this should be obvious. But the thing to note is that what this paper is suggesting is that there is a level above this at which we should be thinking. Everything below is accidental. Whether you CREATE TABLE or recompute on the fly is accidental. The user doesn&#8217;t care.</p>

<p>So, hints:</p>

<p>declare store PropertyInfo : create a cache / table for PropertyInfo rather than re-calc</p>

<p>declare store shared Room Floor : denormalize Room and Floor into shared storage structure (hmm, why? is this a join table?)</p>

<p>declare store separate Property (photo) : split out photo from other properties (perf hint).</p>

<p>TODO: read Kow79</p>

<p>Simple Made Easy</p>

<p>Classes as namespaces = bad.</p>

<p>Syntax is inferior to data.</p>

<p>Switching/pattern matching allegedly complects multiple pairs of who&#8217;s going to do something and what happens&#8230; how is this different than multi-methods?</p>

<p>variables complect value and time (they are state i guess)</p>

<p>for loops complecting by explicitly specifying how to do something.</p>

<p>folds still complect because they go from left to right&#8230;</p>

<p>Polymorphism a la cart, via Clojure protocols. 1) define data structures, 2) definitions of sets of functions, and 3) connect them together.</p>

<p>Favor declarative Prolog-ish logic programming to littering conditionals all over the place.</p>

<p>Resource contention is inherent complexity, not your fault.</p>

<h2>Taco Bell shell script of the day</h2>

<pre><code>find public/assets/images -type f | xargs basename | xargs -I% bash -c "ack % app &gt; /dev/null || echo unused image %"
</code></pre>

<p>prints unused images.</p>

<h2>npm shrinkwrap</h2>

<p>https://docs.npmjs.com/cli/shrinkwrap</p>

<p>Generates a shrinkwrap / lockfile of all dependencies&#8217; dependencies&#8217;
dependencies. It&#8217;s npm&#8217;s lockfile.</p>

<h2>illusion of callcc as the one true primitive</h2>

<p>http://okmij.org/ftp/continuations/against-callcc.html#illusion</p>

<ul>
<li>confusing</li>
<li>inefficient</li>
<li>memory leak prone</li>
<li>not a function, hence not composable</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[identizzle]]></title>
    <link href="http://machty.github.com/blog/2015/08/30/identizzle/"/>
    <updated>2015-08-30T13:32:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/08/30/identizzle</id>
    <content type="html"><![CDATA[<h2>Half-open connections</h2>

<p>http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html</p>

<p>TL;DR: if you don&#8217;t write, you have no way of knowing whether your
connection is still alive.</p>

<h2>Does setTimeout wait til until the end of the event loop to start ticking?</h2>

<p>No, it doesn&#8217;t:</p>

<pre><code>  var endOfEventLoop;

  setTimeout(function() {
    console.log("" + (+new Date() - endOfEventLoop) + " ms after end of event loop");
  }, 1000);

  var now = +new Date();
  while((+ new Date()) - now &lt; 900) { /* spin for 900ms */ }
  endOfEventLoop = +new Date();
</code></pre>

<p>yields:</p>

<pre><code>  101ms later
</code></pre>

<p>Why is this important?</p>

<p>Because if you&#8217;re using magic numbers to, say, open a popup after some
animation has occurred, you&#8217;re opening yourself up to disaster / timing
errors if, after setting your timeout, a lot of slow computation /
rendering logic eats up a chunk of that timer.</p>

<h2>Primary Key</h2>

<p>A primary key is just a column with the follow constraints:</p>

<ul>
<li>NOT NULL</li>
<li>UNIQUE</li>
</ul>


<p>Note: you can have multiple NOT NULL / UNIQUE columns, but only one can
be marked as PRIMARY.</p>

<h2>observeOn vs subscribeOn</h2>

<p>http://reactivex.io/documentation/scheduler.html</p>

<blockquote><p>As shown in this illustration, the SubscribeOn operator designates which thread the Observable will begin operating on, no matter at what point in the chain of operators that operator is called. ObserveOn, on the other hand, affects the thread that the Observable will use below where that operator appears. For this reason, you may call ObserveOn multiple times at various points during the chain of Observable operators in order to change on which threads certain of those operators operate.</p></blockquote>

<h1>Roth IRA</h1>

<p>&#8220;IRA&#8221; stannds for Individual Retirement Account.</p>

<p>http://www.rothira.com/roth-ira-taxes-and-tax-issues</p>

<blockquote><p>Roth IRA contributions are not taxed at the time you contribute the funds to your Roth IRA. However, your contributions come from post-tax income. You pay taxes on your income today, but not in the future.</p></blockquote>

<p>What does post-tax income mean? If I make 80k pre-tax, let&#8217;s say my
post-tax income is 60k. If I want to put $5k into a Roth IRA, then I&#8217;m
down to 75k and 55k. OH I get it&#8230; I think. The amount the government
takes from me grows as I make more money. I&#8217;d benefit me if I were able
to put 5k into Roth before I was taxed, so that then my taxable income
would be 75k, and I&#8217;d have to pay the gov less than if I were taxed
based on 80k.</p>

<h1>Random acts of optimization</h1>

<p>http://engineering.riotgames.com/news/random-acts-optimization</p>

<h1>Readline</h1>

<p>TODO: figure out how to get your tmux / bash setup working. Shouldn&#8217;t
be rocket science. Goal: get irb and psql working.</p>

<h1>ORDBMS</h1>

<p>Object-relational database management system. Postgres is this. MySQL is
not; MySQL is just RDBMS.</p>

<blockquote><p>An object-relational database (ORD), or object-relational database management system (ORDBMS), is a database management system (DBMS) similar to a relational database, but with an object-oriented database model: objects, classes and inheritance are directly supported in database schemas and in the query language. In addition, just as with pure relational systems, it supports extension of the data model with custom data-types and methods.</p></blockquote>

<p>An Object Database leverages pointers over joins for collecting data,
where as a the relational approach leverages foreign keys,
denormalizing, and storing everything in tabular format. Pros to Object
Database include no mental model mismatch between your programming model
(often OOP) and database storage; create an obj, modify an obj, save an
obj &#8211; no need to figure out how to express your object in tabular
format.</p>

<p>Disadvantages are that any sort of reporting / querying needs to be
programmed in, whereas relational databases follow set/relational theory
and if you&#8217;ve got things stored in a tabular format you have way more
flexibility to modify / query your database in the future.</p>

<h1>Postgres</h1>

<p>Developed at Berkeley as POSTGRES, pioneered many concepts later adopted by
commercial databases. Sponsored by DARPA. Didn&#8217;t have SQL (btw SQL has
been around since the 70s). SQL added in Postgres95, became PostgreSQL.</p>

<p>Comes with a bunch of binaries:</p>

<p><code>postgres</code> the server; accepts connection and then starts a worker
process to handle that connection. (Can verify this; spinning up a
rails console creates one more postgres worker instance).</p>

<blockquote><p>Thus, the master server process is always running, waiting for client connections</p></blockquote>

<p><code>psql</code> shell looks like <code>mydb=&gt;</code> for regular users, <code>mydb=#</code> for
superuser.</p>

<p>Commands prefixed with <code>\h</code> are not SQL; everything else is SQL.</p>

<p>A relation = mathemtical term for table.</p>

<p>https://en.wikipedia.org/wiki/Relational_model</p>

<p>All data sets represented as tuples, grouped into relations.</p>

<blockquote><p>&#8220;A relation is a data structure which consists of a heading and an unordered set of tuples which share the same type,&#8221;</p></blockquote>

<h1>Deviations of SQL from relational model</h1>

<p>https://en.wikipedia.org/wiki/Relational_model#SQL_and_the_relational_model</p>

<ul>
<li>SQL allows duplicate rows; relational model does not. Practically
though this is avoided by auto-incrementing.</li>
</ul>


<p>SQL apparently also allows anonymous columns, duplicate rows, etc, which
make things impossible to reference due to indistinguishability.</p>

<p>SQL includes &#8220;NULL&#8221; to imply missing data; comparison of NULL with
itself is not true, but NULL. (Comparison of anything with NULL yields
NULL; it means unknown, not determinable). And hence it&#8217;s a form of
three-valued logic, rather than just boolean.</p>

<p>Law of exclude middle: It states that for any proposition, either that proposition is true, or its negation is true.</p>

<p>Relational model depends on this law, but SQL does not, since it allows
for NULL. Apparently Codd (relational model inventor) eventually
suggested a 4-valued logic, probably to differentiate NULL from UNKNOWN,
only to have a bunch of smug guys suggesting 19 or even 21-valued logic.
WAT. So Postgres just stuck w 3 valued logic.</p>

<p>SQL also uses NULL for other things than value unknown: the sum of an
empty set is NULL.</p>

<p>Rows are grouped into tables/relations. Relations grouped into database.
Databases managed by a single Postgres server instance is a cluster.</p>

<h1>Joins</h1>

<pre><code>SELECT * FROM wats, foos;
</code></pre>

<p>Gives you a combination</p>

<pre><code> name | name | wat
------+------+------
 foo1 | bar1 | wat1
 foo1 | bar2 | wat2
 foo2 | bar1 | wat1
 foo2 | bar2 | wat2
 foo3 | bar1 | wat1
 foo3 | bar2 | wat2
</code></pre>

<p>Or even</p>

<pre><code> name | name | wat  | bazname
------+------+------+---------
 foo1 | bar1 | wat1 | baz1
 foo1 | bar1 | wat1 | baz2
 foo1 | bar2 | wat2 | baz1
 foo1 | bar2 | wat2 | baz2
 foo2 | bar1 | wat1 | baz1
 foo2 | bar1 | wat1 | baz2
 foo2 | bar2 | wat2 | baz1
 foo2 | bar2 | wat2 | baz2
 foo3 | bar1 | wat1 | baz1
 foo3 | bar1 | wat1 | baz2
 foo3 | bar2 | wat2 | baz1
 foo3 | bar2 | wat2 | baz2
</code></pre>

<p>If any of those tables had zero rows then zero rows would be selected
even if there&#8217;s data in the other tables.</p>

<blockquote><p>It is widely considered good style to qualify all column names in a
join query, so that the query won’t fail if a duplicate column name
is later added to one of the tables.</p></blockquote>

<p>You could also rewrite the first one as</p>

<pre><code>SELECT * FROM foos INNER JOIN bars ON true;
</code></pre>

<p>So selecting * seems to select from all relations/tables involved.</p>

<p>Aggregate functions can&#8217;t be used in WHERE clauses, since WHERE clauses
are limit the input rows, recursive infinite etc blah blah.</p>

<pre><code>SELECT city FROM weather WHERE temp_lo = max(temp_lo);
</code></pre>

<p>You can change this to a subquery</p>

<pre><code>SELECT city FROM weather
    WHERE temp_lo = (SELECT max(temp_lo) FROM weather);
</code></pre>

<p>Aggregates play nicely with GROUP BY clauses: here&#8217;s how you&#8217;d count
many rows had the same values.</p>

<pre><code>SELECT name, count(*) FROM bars GROUP BY name;
</code></pre>

<p><code>HAVING</code> is like a WHERE clause for grouping / aggregate functions.
Specifically, WHERE filters the input rows, and HAVING filters the
results after aggregation has taken place:</p>

<p>http://stackoverflow.com/a/287496/914123</p>

<h2>Referential integrity</h2>

<p>Making sure foreign keys point to objects in the table.</p>

<h2>Window functions</h2>

<p>Similar to GROUP BY, but instead preserves each input row in the
output set rather than coalescing them down to just one row; in other
words, instead of boiling down to a single answer per group, window
functions add that answer to as a column to each of the input rows.</p>

<pre><code>SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;
</code></pre>

<p>Whoa this is pretty awesome:</p>

<pre><code>SELECT depname, empno, salary,
       rank() OVER (PARTITION BY depname ORDER BY salary DESC)
FROM empsalary;
</code></pre>

<p>&#8220;For each row, the window function is computed across the rows that fall into the same partition as the current row.&#8221;</p>

<p>Kinda like how aggregate functions are computed using rows with the same
GROUP BY value.</p>

<p>There partitions and there are window frames&#8230;</p>

<p>A window frame is a subset of a partition (or the whole partition
itself). Many window functions use window frame rows, though some
use partition rows. By default, if ORDER BY is supplied <em>to the
over clause, not the whole query</em>, then the window frame consists
of the all rows from start of the partition through to current row,
plus any following rows that have same ORDER BY value&#8230;</p>

<p>WAT.</p>

<p>There must be some good reason for this. Can&#8217;t think of it now.</p>

<pre><code>SELECT salary, sum(salary) OVER (ORDER BY salary) FROM empsalary;
</code></pre>

<p>But the thing to keep in mind I guess is that the <code>ORDER BY</code> here is
just another way to configure the partition + window frame. Maybe that&#8217;s
the way to think of it: <code>OVER</code> clauses are used to specify both
partitions and window frames all in one shot. PARTITION BY is one way,
that specifies a partition where window frame is the partition, and
ORDER BY is another, where the PARTITION is all the rows (filtered by
WHERE) and window set is from start to current row.</p>

<p>Window functions can only be used in the SELECT list and in ORDER BY. I
guess that makes sense. Can&#8217;t use them in GROUP BY, HAVING, or WHERE,
since they logically execute after those things.</p>

<h2>Aggregate expressions</h2>

<pre><code>---                   direct arguments                   aggregated arguments
aggregate_name ( [ expression [ , ... ] ] ) WITHIN GROUP ( order_by_clause ) [ FILTER ...
</code></pre>

<blockquote><p>The argument expressions preceding WITHIN GROUP, if any, are called direct arguments to distinguish them from the aggregated arguments listed in the order_by_clause. Unlike normal aggregate arguments, direct arguments are evaluated only once per aggregate call, not once per input row.</p></blockquote>

<p>So the stuff in <code>WITHIN GROUP(...)</code> are evaluated once per input row. So
ideally we should minimize the stuff we put in there.</p>

<blockquote><p>This means that they (direct arguments) can contain variables only if those variables are grouped by GROUP BY;this restriction is the same as if the direct arguments were not inside an aggregate expression at all.</p></blockquote>

<pre><code>SELECT percentile_disc(0.5) WITHIN GROUP (ORDER BY income) FROM households;
 percentile_disc
-----------------
           50489
</code></pre>

<p>0.5 is a direct argument; it makes no sense for it to be substituted
with a value that varies across rows.</p>

<p>So for example you could do:</p>

<pre><code>SELECT percentile_disc(0.5) WITHIN GROUP (ORDER BY num) from nums;
 percentile_disc
-----------------
               3
</code></pre>

<p><code>percentile_disc</code> is an aggregate function. It&#8217;s going to spit out
values that are the result of coalescing rows. It wouldn&#8217;t make sense
for me to try and add the column <code>name</code> to this result, because the
<code>percentile_disc</code> result is based on coalesced rows:</p>

<pre><code>SELECT name, percentile_disc(0.5) WITHIN GROUP (ORDER BY num) from nums;
ERROR:  column "nums.name" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT name, percentile_disc(0.5) WITHIN GROUP (ORDER BY num...
               ^
</code></pre>

<p>The only way that&#8217;d make sense would be to GROUP BY <code>name</code> so that the
aggregate function is only being applied to groups grouped by name
rather than all of the input rows at once:</p>

<pre><code>SELECT name, percentile_disc(0.5) WITHIN GROUP (ORDER BY num) from nums GROUP BY name;
  name  | percentile_disc
--------+-----------------
 alex   |               3
 justin |               2
(2 rows)
</code></pre>

<p>Wow this stuff is weird to talk about.</p>

<p>Note that <code>count</code> is not an &#8220;ordered set&#8221; aggregate:</p>

<pre><code>SELECT name, count(*) WITHIN GROUP (ORDER BY num) from nums GROUP BY name;
ERROR:  count is not an ordered-set aggregate, so it cannot have WITHIN GROUP
LINE 1: SELECT name, count(*) WITHIN GROUP (ORDER BY num) from nums ...
                     ^
</code></pre>

<p>It barfs because I tried to provide a <code>WITHIN GROUP</code> clause to a non
ordered set aggregate <code>count</code>. If I remove my WITHIN GROUP clause, I
get:</p>

<pre><code>SELECT name, count(*) from nums GROUP BY name;
  name  | count
--------+-------
 alex   |     6
 justin |     3
(2 rows)
</code></pre>

<p>So what is an ordered set aggregate? It just means an aggregate fn
whereby performing the computation requires some kind of ordering. My
hunch is that ORDER BY inside of WITHIN GROUP isn&#8217;t used just for
&#8220;sorting&#8221; the rows, but for defining the key by which they&#8217;ll be
grouped. Or that&#8217;s just my bullshit way of fitting it into my brain.</p>

<pre><code>SELECT count(*) as unfiltered, count(*) FILTER (WHERE i &lt; 5) as filtered FROM generate_series(1,10) AS s(i);
 unfiltered | filtered
------------+----------
         10 |        4
</code></pre>

<p>So why <code>count(*)</code> and not <code>count()</code>? Because <code>count</code> is an aggregate
function I guess, and that&#8217;s one why to distinguish it from something,
say, <code>version()</code>.</p>

<h2>Type casts</h2>

<pre><code>CAST ( expression AS type )
</code></pre>

<p>is the same as</p>

<pre><code>expression::type
</code></pre>

<p>You can cast any string literal:</p>

<pre><code>select '4.123'::real;
 float4
--------
  4.123
(1 row)
</code></pre>

<p>Postgres implicitly casts things for you, e.g. assigning values to
columns (because the column type is obviously known). In some cases you
have to be explicit; Postgres works this way so as to not surprise you
with silent type casts.</p>

<h2>Collation</h2>

<p>http://stackoverflow.com/questions/4538732/what-does-collation-mean</p>

<p>It means how words/letters/phonemes are stored.</p>

<h2>Arrays</h2>

<p>must be rectangular</p>

<pre><code>SELECT ARRAY[ARRAY[1],ARRAY[1,2]];
ERROR:  multidimensional arrays must have array expressions with matching dimensions
</code></pre>

<h2>Composites</h2>

<pre><code>CREATE TYPE myrowtype AS (f1 int, f2 text);
SELECT ('1',2)::myrowtype;
</code></pre>

<h2>Order of expression evaluation</h2>

<p>Left-to-right short-circuit eval is not a thing:</p>

<pre><code>SELECT true OR somefunc();
</code></pre>

<p>Hence the above <em>probably</em> won&#8217;t run <code>somefunc</code>, but not because it&#8217;s on
the right and the left side evals to true, but because the evaluator&#8217;s
already gone thrugh and decided that it can do less work by only using
the left side.</p>

<p>CASE constructs defeat optimizations by forcing evaluation, so you could
write the above as</p>

<pre><code>SELECT CASE WHEN true THEN true ELSE somefunc() END;
</code></pre>

<p>or</p>

<pre><code>SELECT CASE WHEN true THEN true ELSE false END;
</code></pre>

<p>That&#8217;s pretty awesome. Declarative all the way. Let the evaluator figure
out the best way to go.</p>

<p>One gotcha is though is that the evaluator might try and simplify
constant subexpressions (subexpressions that don&#8217;t depend on any rows
being looked up), so something like this:</p>

<pre><code>SELECT CASE WHEN num &gt; 0 THEN num ELSE 1/0 END FROM nums;
ERROR:  division by zero
</code></pre>

<p>This happens because <code>num</code> is dynamic and the evaluator will evaluate
the <code>1/0</code> before even running the query, causing the divide by zero
error.</p>

<h2>Foreign keys</h2>

<blockquote><p>A foreign key must reference columns that either are a primary key or form a unique constraint. This means that the referenced columns always have an index (the one underlying the primary key or unique constraint); so checks on whether a referencing row has a match will be efficient.</p></blockquote>

<p>Makes sense:</p>

<pre><code>CREATE TABLE lols ( thing_id integer REFERENCES nums(num) );
ERROR:  there is no unique constraint matching given keys for referenced table "nums"
</code></pre>

<blockquote><p>Since a DELETE of a row from the referenced table or an UPDATE of a referenced column will require a scan of the referencing table for rows matching the old value, it is often a good idea to index the referencing columns too.</p>

<p>Because this is not always needed, and there are many choices available on how to index, declaration of a foreign key constraint does not automatically create an index on the referencing columns.</p></blockquote>

<p>So if an article has many comments, then <code>comments.article_id</code> is an FK,
hence <code>article.id</code> must have unique constraint. But if the referenced
article is deleted, then postgres needs to scan the <code>comments</code> table for
all rows referencing the deleted article to perform some logic on it. So
you probably want to index <code>comments.article_id</code>. That said you probably
want to index it anyway since you&#8217;ll be doing many comment lookups for a
given article.</p>

<h2>Postgres wiki</h2>

<p>https://wiki.postgresql.org/wiki/Main_Page</p>

<p>This seems surprisingly badass.</p>

<h2>Schemas / clusters</h2>

<p>The only data shared b/w databases is users and groups.</p>

<p>But schemas aren&#8217;t kept so separate; a database can have multiple
schemas, multiple schemas can have tables w the same name.</p>

<h2>Table Expressions</h2>

<p>Think of WHERE, GROUP BY, HAVING and others as modifiers that ultimately
produce a table that you can select from. Holy shit that would have made
my life so much easier if I knew that.</p>

<h2>Joins</h2>

<pre><code>FROM T1 CROSS JOIN T2isequivalenttoFROM T1 INNER JOIN T2 ON TRUE
</code></pre>

<p>Note that <code>WHERE</code> filtering happens after <code>ON</code> criteria. Again this is a
case of JOIN just being a thing that produces another virtual table and
WHERE filters whatever table.</p>

<h2>Subqueries</h2>

<p>Use them when you can&#8217;t use joins:</p>

<ul>
<li>subquery is a grouping / aggregation</li>
</ul>


<p>VALUES can also be a subquery.</p>

<h1>Sedition</h1>

<p>conduct or speech inciting rebellion against an authority or monarch</p>

<h1>Discount brokerage</h1>

<p>https://en.wikipedia.org/wiki/Discount_brokerage</p>

<p>Much cheaper than traditional brokerage but doesn&#8217;t offer financial
advice.</p>

<h1>Open-ended mutual funds</h1>

<p>Open-ended in that if you buy into a mutual fund, the shares granted to
you are created out of thin air, and the price of the share is based on
the total market value divided by the number of shares present.</p>

<h1>Intestacy</h1>

<p>State of having died but not written a will. Intestacy law deals with
divvying up inheritance for folks who didn&#8217;t write wills.</p>

<h1>Estate tax</h1>

<p>Only the largest 0.2% estates in US pay estate tax since it&#8217;s exempt up
to $5.5 million.</p>

<h1>Traditional IRA</h1>

<ul>
<li>put in money tax free when you&#8217;re in a high tax bracket</li>
<li>withdraw money taxed at a (presumably) lower tax bracket when you&#8217;re older</li>
</ul>


<h1>Forvo.com</h1>

<p>Pronunciation dictionary; let&#8217;s people upload recordings of
pronunciation into a map so that you can see how different regions
pronounce things.</p>

<h1>Inner Join conditions via WHERE/JOIN</h1>

<p>Already know you can do</p>

<pre><code>SELECT a,b WHERE a.wat = b.foo AND a.bleh &gt; 5;
</code></pre>

<p>But you can also move the join conditions to the JOIN &#8230; ON:</p>

<pre><code>SELECT a INNER JOIN b ON (a.wat = b.foo) WHERE a.bleh &gt; 5;
</code></pre>

<p>These are equivalent, whichever you choose is a matter of style.</p>

<p>Note that it only applies to INNER joins: the WHERE version of the above
only produces INNER joins; if you want outer, use the OUTER JOIN ON
syntax.</p>

<blockquote><p>The ON or USING clause of an outer join is not equivalent to a WHERE condition, because it results in the addition of rows (for unmatched input rows) as well as the removal of rows in the final result.</p></blockquote>

<p>Whereas INNER joins are reduced unions of both tables, and hence
expressable as WHERE, which is used for filtering out rows. In other
words, you can&#8217;t <em>add</em> rows to a result set with WHERE; WHERE is only
used for filtering, and OUTER joins can add rows to the result set.</p>

<h1>The WHERE clause</h1>

<p>Typically references at least one column referenced in table generated
in the FROM clause.</p>

<h1>GROUP BY</h1>

<blockquote><p>Grouping without aggregate expressions effectively calculates the set of distinct values in a col- umn. This can also be achieved using the DISTINCT clause (see Section 7.3.3).</p></blockquote>

<p>Makes sense.</p>

<p>We can actually verify that the postgres evaluator reduces this to the
exact same query plan:</p>

<pre><code>diff &lt;(psql -c "EXPLAIN SELECT DISTINCT name FROM foos") \
     &lt;(psql -c "EXPLAIN SELECT * FROM foos GROUP BY name")
</code></pre>

<h1>Objects instead of .publish().connect()</h1>

<pre><code>Ember.Object.extend({
  firstName: "alex",
  lastName:  "matchneer",

  // using lazy computed properties
  fullName: computed('firstName', 'lastName', function() {
    return `${this.get('firstName') ${this.get('lastName')}`;
  }),

  // using lazy computed properties
  fullName: computed(function() {
    return zip('firstName', 'lastName', (first, last) =&gt; `${first} ${last}`);
  }).live(),

  time: service(),
  completedInWords: computed('completedAt', 'time.sharedTicker', function(completedAt) {
    // hmm this doesn't need to be live
    return moment(this.get('completedAt')).agoInWords();
  }),

  liveTimer: liveComputed(function() {
    return this.ref('firstName').flatMapLatest((firstName) =&gt; {
      return Observable.interval(500);
    });
  }),

  startWeighing() {
    this.set('isWeighing', true);
  },

  isWeighing: false,
  rawWeights: computed('isWeighing', function() {
    if (this.get('isWeighing')) {
      return interval(200).map(() =&gt; Math.random());
    } else{
      return null; // or empty observable
    }
  }),

  // by subscribing to 'this', we're subscribing to lifetime of object.
  // so we're guaranteed that this gets evaluated immediately upon creation.
  // We want this behavior here
  isStillReceivingData: computed('this', function() {
    return this.ref('rawWeights').flatMapLatest(() =&gt; {
      return timer(500).map(_ =&gt; false).startWith(true);
    });
  }),

  doStuff: computed(function() {
  }).subscribe(), // this means is live for lifetime of object
                  // you know what else is live during lifetime of object?
                  // action handlers...

  doStuff: subscribe('actions.startDoingStuff', function() {
    alert("wat");
  }),
});


let Timer = Ember.Object.extend({
  hasElapsed: false,
  ms: 0,
  init() {
    this._super();
    this.timerId = Ember.later(() =&gt; {

    }, 500);
  }
});

Ember.Object.extend({
  hasReceivedDataTimer: computed('foo', function() {
    return Timer.create({ ms: 100 });
  }),
  hasReceivedDataRecently: alias('hasReceivedDataTimer.hasElapsed'),
});
</code></pre>

<h2>Maybe about to push the envelope</h2>

<p>https://en.wikipedia.org/wiki/Semantic_satiation</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help me with Observables]]></title>
    <link href="http://machty.github.com/blog/2015/08/26/help-me-with-observables/"/>
    <updated>2015-08-26T14:11:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/08/26/help-me-with-observables</id>
    <content type="html"><![CDATA[<h2>How do I do this with Observables (or CSP or alternatives)</h2>

<p>I build/maintain <a href="http://www.expresscheckoutapp.com">Express Checkout</a>,
a hybrid app, which means it&#8217;s an Ember.js app running in an embedded
browser within an iOS/Android app that occasionally calls into the native app layer
to do native-specific things like turn on the camera, scan barcodes, register
for push notifications, etc.</p>

<p>I&#8217;ve been fascinated with <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md">Rx Observables</a>
for some time now and have used them to clean up a lot of the code in my
app that deals with asynchronous behavior and concurrency. But there&#8217;s
one part of my app I&#8217;ve been avoided refactoring with Observables
because I just can&#8217;t wrap my head around how to approach it and express
it with Observables, hence I&#8217;m enlisting any functionally-minded
Observables veterans to help me think about how to structure this.</p>

<!--more-->


<h2>The Situation</h2>

<p>In our hybrid web app, we have a screen that allows shoppers to scan
barcodes on items in a store. To navigate to this screen, a few things
must happen, in the following sequence:</p>

<ul>
<li>Shopper taps a &#8220;Start Shopping&#8221; button</li>
<li>The app fetches the current shopping session from the server</li>
<li>Once the session is fetched, we transition to the Ember.js route
called <code>scan</code>. I use the Ember animation/transition library
<a href="https://github.com/ef4/liquid-fire">Liquid Fire</a>, so the route
transition causes a sideways full screen transition as you would
expect from any iOS app.</li>
<li>Once the sideways transition finishes, we call into the native code to
turn on the camera/scanner</li>
<li>Once the camera/scanner is turned on, we remove the white CSS
background from the screen to reveal the native camera behind our
transparent webview, and from here on out the user can scan barcodes,
add items to their cart, etc.</li>
</ul>


<p>The part I&#8217;d like to focus on specifically is the timing of turning on
the native camera and removing the white background. Note the following
constraints:</p>

<ul>
<li>on both iOS and Android (though way worse on Android), turning on the
native camera while there is any sort of visual transition/animation
in the webview causes all sorts of hideous jank; this is why we
transition in with a white BG and only hide the BG after a few hundred
milliseconds after turning on the native camera</li>
<li>if the user immediately taps the back button (either on the screen or
android&#8217;s back button) immediately after transioning to the <code>scan</code>
route, any unnecessary camera or visual churn should be avoided: if
the camera hasn&#8217;t been turned on, don&#8217;t turn it on; if the white
background hasn&#8217;t been removed, don&#8217;t remove it</li>
<li>on the flipside, when transitioning out of the scan route, before we
do the sideways transition, we want to 1) re-enable white bg, 2) turn
of camera and wait a few hundred ms, and then 3) do the sideways
tranasition</li>
</ul>


<p>Right now, I handle all these cases with a state machine, but given all
the different entry/exit/abort possibilities, it&#8217;s ugly and complex.
I&#8217;ve had much success replacing similar async-managing state machines
in my app with Observables, so I&#8217;d like to do the same here, if
possible.</p>

<h2>A First Stab at the Problem</h2>

<p>One of the nice properties of Observables is that they know when they&#8217;ve
been subscribed-to and when they&#8217;ve been desubscribed-from. This
property alone is what makes Observables cancellable (unlike Promises,
that go go go until their predetermined chain of callbacks have run to
completion, regardless of whether anyone&#8217;s still listening).</p>

<p>For this problem, my intuition was to model the native camera as an
observable, as well as the white background that needs to become
transparent once the camera is good and ready.</p>

<p>With this approach, I can pretty elegantly model the series of events
that happen when transitioning into the <code>scan</code> route in a cancellable
manner:</p>

<pre><code>let enableCameraObservable = Observable.create(() =&gt; {
  cordovaService.turnOnCamera();

  // we could also have this observable be the thing that emits
  // scan events, since scan events can only happen while this
  // observable is still alive, but that's beyond the scope

  return () =&gt; {
    cordovaService.turnOffCamera();
  };
});

let makeBackgroundTransparent = Observable.create(() =&gt; {
  // set background to transparent
  return () =&gt; {
    // according to Observable.create API, this returned function
    // fires when the observable is de-subscribed; hence we can
    // use it for cleanup and setting the background back to white
  };
});

liquidFireDoneTransitioning()
  .delay(100)
  .flatMap(() =&gt; enableCameraObservable().delay(100))
  .flatMap(() =&gt; makeBackgroundTransparent())
  .takeUntil(routeTransitionAttempt)
  .subscribe((scanResult) =&gt; {
    // ...
  });
</code></pre>

<p>The chain of operators above is terse but expressive; it describes the
following behavior:</p>

<ul>
<li>wait 100ms between the sideways Liquid Fire transition and turning on the camera</li>
<li>wait 100ms between turning on the camera and making the background transparent</li>
<li>throughout all of this, watch for routeTransitionAttempts, and if any
of them come through, stop whatever we&#8217;re doing with the previous
observable. This means: 1) the camera will be turned off&#8230; only if we
ever got to the point that it was turned on, and 2) the background
will be reset to white&#8230; if it ever got to the point that it was made
transparent. In other words, the dispose functions for each observable
are only called if they were ever subscribed to.</li>
</ul>


<p>Possible timeline of events</p>

<ul>
<li>0: <code>liquidFireDoneTransitioning</code></li>
<li>50ms: if <code>routeTransitionAttempts</code> fires, nothing happens</li>
<li>100ms: <code>enableCameraObservable</code> is subscribed-to; camera is turned on</li>
<li>150ms: if <code>routeTransitionAttempts</code> fires, only
<code>enableCameraObservable</code> dispose function fires, turning off the camera</li>
<li>200ms: <code>makeBackgroundTransparent</code> is subscribed-to; background is
made transparent, revealing native camera view</li>
<li>250ms and after: if <code>routeTransitionAttempts</code>, both <code>enableCameraObservable</code> and
<code>makeBackgroundTransparent</code> subscriptions are disposed, the camera is
turned off, the screen turns to white.</li>
</ul>


<p>This is actually pretty elegant for the most part; writing a more
imperative version of this code would involve way more code, that
managed manually setting / cancelling timers, based on how far along the
process was before a later <code>routeTransitionAttempt</code> was made. And it&#8217;s
these kind of refactorings that have cleaned up code all over the app.</p>

<h2>Async Disposables?</h2>

<p>But there&#8217;s one major omission here: making the disposals async. For
anti-jank performance reasons, we need the disposals to be
staggered on the way out, just as they are staggered on the way in, and
we need the <code>routeTransitionAttempt</code> to be delayed while it waits for
this process to complete.</p>

<p>And this, my functionally-minded Rx-experienced friends, is where I am
at a loss and would appreciate your advice. I can&#8217;t seem to settle on a
pattern that maintains the elegance of the disposable native camera
and transparent backgrounds cleaning up after themselves, because those
disposables happen right at the same time. Of course I could throw some
hacky <code>setTimeout</code>s in there, but then I&#8217;m just introducing more
potential race conditions and trying to sweep what should be additional
observables/subscriptions under the rug. Of course, I&#8217;m happy to do that
pragmatically to ship a feature, but I&#8217;d really like to understand how
to better structure these interactions in a Observable-minded manner.</p>

<p>So please, if you&#8217;ve got some ideas that might set me straight, I&#8217;d love
to hear them; please comment below or hit me up at
<a href="https://twitter.com/machty">@machty on Twitter</a>.</p>

<p>Also, if you see this as something that could be more
appropriately/easily solved by CSP (communicating sequential processes,
e.g. ClojureScript&#8217;s core.async), I&#8217;d love to hear what that&#8217;d entail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ewouldblockagain]]></title>
    <link href="http://machty.github.com/blog/2015/07/29/ewouldblockagain/"/>
    <updated>2015-07-29T16:53:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/07/29/ewouldblockagain</id>
    <content type="html"><![CDATA[<h2>EAGAIN</h2>

<p>If you try a non-blocking read and there&#8217;s no data available for you,
then EAGAIN fires.</p>

<p>https://github.com/redis/redis-rb/blob/master/lib/redis/connection/ruby.rb#L47-L62</p>

<pre><code>def _read_from_socket(nbytes)
  begin
    read_nonblock(nbytes)

  rescue Errno::EWOULDBLOCK, Errno::EAGAIN
    if IO.select([self], nil, nil, @timeout)
      retry
    else
      raise Redis::TimeoutError
    end
  end

rescue EOFError
  raise Errno::ECONNRESET
end
</code></pre>

<p>So:</p>

<ol>
<li>Try and read in a non-blocking manner</li>
<li>If no data is available the read, IO.select to block for <code>@timeout</code>
seconds until there&#8217;s something to read. If there&#8217;s nothing to read
after <code>@timeout</code> seconds, it returns nil and raises a redis error.</li>
<li>If there is something to read, start over and try a non-reading
block again, which should succeed.</li>
</ol>


<p>If it throws TimeoutError then the redis call took longer than the
default 5 seconds, probably cuz the server&#8217;s overwhelmed.</p>

<p>So, why even bother <code>read_nonblock</code> at first if you&#8217;re just going to
block on IO.select? Why not just do a blocking read with a timeout? I&#8217;m
guessing because it doesn&#8217;t exist since it can otherwise be expressed
with the above structure of 1) try nonblocking read and 2) block with
IO.select and retry again. This answer is probably wrong but jesus
christ this stuff is nuts.</p>

<h2>XCode Build Settings</h2>

<p>BOLD means motherfuckin STRING LITERAL as opposed to</p>

<h2>Apple iOS plist format</h2>

<p>https://gist.github.com/palaniraja/1051160</p>

<p>Then you need a link like</p>

<pre><code>&lt;a href="itms-services://?action=download-manifest&amp;url=itms-services://?action=download-manifest&amp;url=http:/oursite.com/myApp.plist" id="text"&gt;
</code></pre>

<p>http://stackoverflow.com/questions/8439127/ios-enterprise-distribution-through-ota</p>

<p>https://longtrieuquang.wordpress.com/2014/08/01/how-to-distribute-your-ios-app-ota-with-enterprise-account/</p>

<h2>Plot Armor</h2>

<p>http://tvtropes.org/pmwiki/pmwiki.php/Main/PlotArmor</p>

<p>When you&#8217;re so essential to the story that obviously you won&#8217;t be killed
by some fight or some bullet, you have plot armor. Because you&#8217;re
crucial to the plot.</p>

<h2>Point ember components to github zipped archives</h2>

<p>e.g. instead of</p>

<pre><code>"ember": "components/ember#fed005fdc4dc3a8f19324a887c1021e8bf19acf4",
</code></pre>

<p>do</p>

<pre><code>"ember": "https://github.com/components/ember/archive/ae3730263f416204e424f884c8444190e5a967dc.zip",
</code></pre>

<p>The former will clone the massively large repo of compiled Ember builds,
which takes forever even with an insanely fast connection, while the
latter just downloads a zip of a snapshot of the directory tree at that
particular checkout, which is FAST.</p>

<h2>Time Zones</h2>

<p>Basically this railscast is amazing.</p>

<p>http://railscasts.com/episodes/106-time-zones-revised</p>

<p>Ruby <code>Time.now</code> uses system timezone. Verifiable by opening <code>irb</code> and
running <code>Time.now</code> many times whilst changing the timezone in system
preferences.</p>

<p>Use <code>around_filter</code> with <code>Time.use_zone(current_user.time_zone, &amp;block)</code></p>

<h2>Less mixins vs extend</h2>

<p>http://lesscss.org/features/#extend-feature-use-cases-for-extend</p>

<p>Mixins copy and paste CSS rules into everyone who mixes it in. Extend
just creates multiple selections for the same rules, which almost
certainly means smaller output CSS size (but perhaps adds to CSS engine
overhead since there are more rules to check against?).</p>

<h2>objects vs memoizations</h2>

<p>Say you have an array of people:</p>

<pre><code>people = [
  {
    id: 1,
    first_name: "Alex",
    last_name:  "Matchneer",
    follows: [
      312,
      { somePersonObjOfSameRecursiveStructure },
      999
    ]
  },
  {
    id: 2,
    first_name: "Noel",
    last_name:  "Gallagher",
    follows: [
      1,
      { somePersonObjOfSameRecursiveStructure }
    ]
  },
]
</code></pre>

<p>What&#8217;s the difference between</p>

<pre><code>people[0]
</code></pre>

<p>and</p>

<pre><code>get(people, 0)
</code></pre>

<p>? What&#8217;s the difference between</p>

<pre><code>people[0].first_name
</code></pre>

<p>and</p>

<pre><code>get(get(people, 0), 'first_name')
</code></pre>

<p>? What&#8217;s the difference between</p>

<pre><code>person # a var with mem address 0x00001234
</code></pre>

<p>and</p>

<pre><code>get(MEMORY, 0x00001234)
</code></pre>

<p>?</p>

<p>It&#8217;s all just memoization. In the end, every object has a memory
address. Variables are just memoized <code>get(MEMORY, someMemoryAddress)</code>.</p>

<p><code>===</code> in javascript is just memory address comparisons.</p>

<p>What if you needed to print a credits page, and the same person had
multiple roles, e.g. director, producer, actor, and you wanted to print
out a formal version of their first and last name. Maybe you&#8217;d write a
function:</p>

<pre><code>function formalizedName(person) {
  return `M. ${person.first_name} ${person.last_name}`;
}
</code></pre>

<p>But if you&#8217;re rendering a page and that name shows up multiple times,
you&#8217;re wastefully recomputing, concatenating. Let&#8217;s assume avoiding
recomputation/concatenation would improve performance by some noticeable
margin. You could memoize, i.e. store the result</p>

<p>blah blah blah</p>

<h2>binding and immutability</h2>

<pre><code>  Hello . Your friends are:
</code></pre>

<p>if <code>people</code> is an immutable data structure, then any of the following
modifications will produce a new immutable value of <code>people</code>:</p>

<ul>
<li>a person&#8217;s name changes</li>
<li>a person&#8217;s list of friends changes</li>
<li>a person&#8217;s friend&#8217;s name changes</li>
<li>etc</li>
</ul>


<p>But we&#8217;re using &#8220;, which means we&#8217;re creating bindings (internally
we&#8217;re creating keystreams, and those create bindings according to the
ember object model). This means we&#8217;ll be creating meta objects on each
immutable data pojo&#8230; which is wasteful and useless considering they&#8217;re
immutable, and their properties can&#8217;t can&#8217;t change.</p>

<p>So why not use <code>unbound</code> helper within each curly? It&#8217;d save us an
observer, right? It&#8217;d save us writing to <code>meta</code>, right? Sure, but it
also means that it won&#8217;t update the second time around, because it&#8217;s
unbound.</p>

<p>So basically, &#8220; does two things:</p>

<p>1) Sets up a keystream
2) Sets up a binding</p>

<p>TL;DR to get immutable structures bindable in a performant manner in
Ember, we need to make it possible to opt into a different KeyStream
constructor:</p>

<ol>
<li>it doesn&#8217;t call add/removeObserver (wasteful since it&#8217;ll never fire)</li>
<li>don&#8217;t assume that just because <code>changed, that</code>
changed; with immutable data, it&#8217;s pretty likely a.prop is actually
the same assuming that&#8217;s not one of the properties that was changed
between the old immutable value and the new immutable value.</li>
</ol>


<h2>Lazy Observables / Ember Streams</h2>

<p>Unlike push-only observables, Ember streams are push/pull. You push
that something has changed by <code>notify()</code>, and then later on you pull
with <code>value()</code>, which only runs through computations once.</p>

<p>This implies laziness. In Ember, the laziness of an LO lasts from the
first <code>.set</code> that changes a watched value until the <code>render</code> run loop
queue.</p>

<p>For similar reasons, this is why computed properties don&#8217;t work with
observers without an explicit get to eagerly flush a CP.</p>

<p>But anyway, what are the tradeoffs between LO and push-only Observables?</p>

<p>Well, one is that, if you funnel an O into an LO, then
you&#8217;re discarding a bunch of onNexts until some arbitary pull into
the future (yet you only end up reading the most recent &#8220;event&#8221;).</p>

<p>Here&#8217;s a stab at lazy observables:
http://jsbin.com/polude/6/edit?html,js,console,output</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sriracha]]></title>
    <link href="http://machty.github.com/blog/2015/07/21/sriracha/"/>
    <updated>2015-07-21T20:28:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/07/21/sriracha</id>
    <content type="html"><![CDATA[<h2>Android GUI Architecture</h2>

<p>Single-threaded, event-driven, nestable components, much like:</p>

<ul>
<li>AWT

<ul>
<li>Java&#8217;s original cross-platform UI widget toolkit</li>
</ul>
</li>
<li>Swing

<ul>
<li>richer widget set</li>
<li>draws its own widgets rather than using host OS&#8217;s user interface widgets</li>
</ul>
</li>
<li>SWT

<ul>
<li>alternative to AWT/Swing, heavy use/development by Eclipse</li>
</ul>
</li>
<li>LWUIT (Lightweight User Interface Toolkit)

<ul>
<li>for Java ME (micro edition, mobile phones, etc)</li>
</ul>
</li>
<li>others</li>
</ul>


<p>So what UI library / environment doesn&#8217;t have a single UI thread? It
doesn&#8217;t seem like there is one. UI data-structures are so fragile and
coupled that you&#8217;d need to mutex the hell out of them any way; easier to
just have a single UI thread.</p>

<p>http://stackoverflow.com/a/1677785</p>

<h2>Android Event Loop</h2>

<ol>
<li>User touches the screen</li>
<li>Android system enqueues action on event queue</li>
<li>UI thread dequeues event, dispatches to handler</li>
<li>Tell the Model that state has changed</li>
<li>Model notifies UI framework that some portion of display is stale
(which is just another action enqueued to the same event queue)</li>
<li>redraw event removed from queue, dispatched to a View, tree of views
is redrawn</li>
</ol>


<p>Specific example:</p>

<ol>
<li>User taps screen, framework enqueues MotionEvent</li>
<li>MotionEvent is dequeued, framework dispatches to the first view
within the bounding box of where tap happened</li>
<li>Button handler tells model to resume playing a song</li>
<li>Model starts playing song, enqueues redraw request</li>
<li>redraw request dequeued, redraw occurs</li>
</ol>


<p>A Button therefore acts like both a Controller and a View; it handles
tap events and updates a model, and then gets redrawn accordingly to
reflect updated state.</p>

<p>Never update display within a controller handler; just issue redraw
requests. Aside from separating concerns, this lets multiple redraw
events essentially coalesce into one, after ALL changes caused by the
handler have been made.</p>

<p>Single-threaded-ness means:</p>

<ul>
<li>no synchronize blocks b/w View and Controller; just enqueue and the
single threaded UI looper will pop. QUESTION: do you need to
synchronize pushing to the queue? What if multiple threads are pushing
to the queue? ANSWER: the queue is managed by the Hander class, which
is bound to a specific Looper and thread. You <code>post</code> to the Handler,
and Handler <code>post</code> methods are threadsafe.</li>
<li>it&#8217;s easy to completely block/stall your application if you&#8217;re doing
something long/slow/expensive; move that logic to some other thread</li>
</ul>


<h2>What&#8217;s a widget?</h2>

<p>Leaves in the view tree, basically.</p>

<h2>Tunneling to Redis from the browser</h2>

<p>Was reading a Heroku thing about not abusing tunnels via websockets, so
I figured I&#8217;d connect to Redis from the browser because why not.</p>

<p>First off</p>

<pre><code>npm install -g wstunnel
</code></pre>

<p>Then in somefile.html</p>

<pre><code>&lt;input type="text" id="textInput"/&gt;

&lt;pre id="messages"&gt;&lt;/pre&gt;

&lt;script type="text/javascript" charset="utf-8"&gt;
  var redisSocket = new WebSocket("ws://localhost:8080", ["tunnel-protocol"]);

  redisSocket.onmessage = function(event) {
    // need FileReader to convert from blob to text
    var reader = new window.FileReader();
    reader.readAsText(event.data);
    reader.onloadend = function() {
      messages.innerHTML += reader.result;
    }
  };

  textInput.addEventListener('keypress', function(e) {
    if (e.keyCode !== 13) { return; }
    redisSocket.send(new Blob([textInput.value + "\n"]));
    textInput.value = "";
  }, false);
&lt;/script&gt;
</code></pre>

<p>Then you can type in raw redis commands and get raw redis responses.
Pretty cool.</p>

<h2>ngrok</h2>

<p>Tunnel public URL to your localhost server. Useful for:</p>

<ul>
<li>testing webhooks</li>
<li>testing apps that don&#8217;t have access to localhost, etc</li>
</ul>


<h2>Localytics (and analytics terminology)</h2>

<p><a href="https://en.wikipedia.org/wiki/Attribution_(marketing">Attribution</a>)</p>

<p>The quantification of how a given ad impression influences a user
conversion rates. Use Attribution to find out which ad campaigns seem to
be the most effective. I guess you could also say use Attribution to
figure out which entry points into an app most often lead to conversion.</p>

<ul>
<li>sessionTimeoutSeconds

<ul>
<li>time after <code>close()</code> that the session is actually considered closed.</li>
<li>if <code>open</code> is called within the timeout&#8230; on the same localyticsRequest object.</li>
</ul>
</li>
</ul>


<h2>Google Analytics events</h2>

<p>https://support.google.com/analytics/answer/1033068#Anatomy</p>

<h3>Category</h3>

<p>Over-arching string name for a category of events.</p>

<ul>
<li>You need to decide ahead of time whether you care to distinguish
between &#8220;Videos - Cats&#8221; and &#8220;Videos - Dogs&#8221; or whether you just
want them grouped under &#8220;Videos&#8221;</li>
<li>You&#8217;re screwed if you push a version of your code sending a category
of &#8220;Video&#8221; and later change to &#8220;Videos&#8221;; your historical data will
remain there as &#8220;Video&#8221; (this is probably true for all Event fields)</li>
</ul>


<h3>Action</h3>

<p>The thing being done, the name of the event. If you&#8217;re category is
&#8220;Videos&#8221;, you might have actions named:</p>

<ul>
<li>Play</li>
<li>Stop</li>
<li>Pause</li>
</ul>


<p>Caveats:</p>

<ul>
<li>&#8220;All actions are listed independently from their parent categories&#8221;.
This means if you have re-use the event name &#8220;Play&#8221; between parent
categories &#8220;Videos&#8221; and &#8220;Songs&#8221;, they&#8217;ll all be munged together, and
it&#8217;s only when you do a breakdown of &#8220;Play&#8221; events that their differing
parent categories will show up. But you probably don&#8217;t want to have
something so general as a &#8220;click&#8221; event across a ton of different
categories.</li>
<li>&#8220;A unique event is determined by a unique action name&#8221;. Oh ok this
explains the above a bit &#8220;You can use duplicate event names across
categories&#8221;.</li>
</ul>


<h2>document.readyState and friends</h2>

<ul>
<li><code>DOMContentLoaded</code>

<ul>
<li>DOM and synchronous scripts (the default) have been loaded</li>
<li>does NOT wait for stylesheets, images, subframes, etc</li>
<li>scripts can be made async to not interfere w this loading process</li>
<li>UNSURE: can listen on <code>window</code> or <code>document</code></li>
</ul>
</li>
<li><code>load</code> event

<ul>
<li>all subresources (images, stylesheets, subframes) have loaded</li>
<li>only fires on <code>window</code></li>
</ul>
</li>
</ul>


<p>But you can also ask <code>document.readyState</code> where you are in the process:</p>

<p>https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState</p>

<ul>
<li>loading

<ul>
<li>The document is still loading.</li>
</ul>
</li>
<li>interactive

<ul>
<li>The document has finished loading and the document has been parsed but sub-resources such as images, stylesheets and frames are still loading. The state indicates that the DOMContentLoaded event has been fired.</li>
</ul>
</li>
<li>complete

<ul>
<li>The document and all sub-resources have finished loading. The state indicates that the load event has been fired.</li>
</ul>
</li>
</ul>


<p>Add <code>document.readyState</code> to your watches and run:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width"&gt;
    &lt;title&gt;DOMContentLoaded&lt;/title&gt;
  &lt;/head&gt;

  &lt;script type="text/javascript" charset="utf-8"&gt;

    debugger;

    window.addEventListener("load", function(e) {
      debugger;
      //alert("i am loaded");
    }, false);

    window.addEventListener("DOMContentLoaded", function(e) {
      debugger;
    }, false);

  &lt;/script&gt;
  &lt;body&gt;
    body
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>window.onerror and CORS</h2>

<p>http://blog.errorception.com/2012/04/script-error-on-line-0.html</p>

<p>Script error on line 0.</p>

<p>This almost certainly means a script loaded via CORS fired an error.
Modern browsers zero-out the data</p>

<p>http://jeremiahgrossman.blogspot.in/2006/12/i-know-if-youre-logged-in-anywhere.html</p>

<p>The above 2006 link demonstrates how the errors produced by a non CORS
remote script can be used to sniff out which sites you&#8217;re logged into,
and hence modern browsers strip all information from external non CORS
scripts to just say line 0 and &#8220;Script Error.&#8221;. This thwarts bugsnag
unless the script you load is CORS.</p>

<h2>Ruby Exception#cause</h2>

<p>If one caught exception causes another to be raised, Ruby keeps track of
all preceding exceptions within a chain of Exception#cause. Bugsnag uses
this to great effect.</p>

<pre><code>begin
  begin
    raise "wat"
  rescue =&gt; e
    oasnoiasd
  end
rescue =&gt; e
  puts e.cause.backtrace # print the backtrace of RuntimeError "wat"
end
</code></pre>

<p>https://bugsnag.com/blog/ruby-2-1-exception-causes</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPF 10000]]></title>
    <link href="http://machty.github.com/blog/2015/06/28/spf-10000/"/>
    <updated>2015-06-28T17:06:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/06/28/spf-10000</id>
    <content type="html"><![CDATA[<h2>SPF: Sender Policy Framework</h2>

<p>Prevents sender spoofing: server receiving STMP mail can check the
sender&#8217;s IP against SPF DNS records. SPF records are stored in
both SPF and TXT records and have a format like:</p>

<pre><code>"v=spf1 a mx ip4:55.11.65.20/2 ip4:90.2.123.112/2 ip4:176.33.87.19/2 ip4:212.63.89.33/2 -all"
</code></pre>

<p>Question: what if the sender sends the wrong IP? Answer: then the server
wouldn&#8217;t be able to communicate back to the sender (SMTP operates over
TCP, so you have the handshake and connection state preventing IP
spoofing).</p>

<p>Google apps for businesses makes you add an SPF record to your domain so
that it can send e-mail on your behalf and not have recipient servers
block it.</p>

<h2>SRV records: share the location of services via DNS</h2>

<p>https://tools.ietf.org/html/rfc2782</p>

<p>Sample:</p>

<pre><code>_sip._tcp.example.com. 86400 IN SRV 10 60 5060 bigbox.example.com.
</code></pre>

<p>Google apps for businesses also use this for XMPP service location. SRV
records have a priority in a weight. Clients must use the lowest
priority services, and then if there are multiple services in that
priority, randomly select using the provided <code>weight</code>s.</p>

<h2>Ember tests</h2>

<pre><code>import hbs from 'htmlbars-inline-precompile';
import { moduleForComponent, test } from 'ember-qunit';

moduleForComponent('my-component', {
  integration: true
});

test('block params work', function(assert) {
  this.render(hbs`

      This happened  days ago.

  `);

  this.set('theDate', new Date(2015, 2, 11));
  assert.equal(this.$().text().trim(), "This happened 123 days ago.");
});
</code></pre>

<p>In recent versions, <code>integration:true</code> is the default.</p>

<p>Checked in:</p>

<p>https://github.com/switchfly/ember-test-helpers/pull/38</p>

<p>Nice example:</p>

<p>https://github.com/yapplabs/ember-radio-button/blob/master/tests/unit/components/radio-button-test.js#L27-L56</p>

<p>Aaaaand a nice blag!</p>

<p>http://alisdair.mcdiarmid.org/2015/06/20/ember-component-integration-tests.html</p>

<h2>Vim: save and run</h2>

<p>From DAS: easy enough to just write a quick <code>map</code> on the fly:</p>

<pre><code>map ,t :w\|!ruby %&lt;cr&gt;
</code></pre>

<h2>JS Regex: multiline</h2>

<p>Use <code>/m</code> option and your <code>^</code> and <code>$</code> will match beginnings/ends of lines
rather than beginnings and ends of the entire string. :)</p>

<h2>Hyperthreading, Physical vs Logical Cores</h2>

<pre><code>machty.github.com :: sysctl hw.physicalcpu
hw.physicalcpu: 4
machty.github.com :: sysctl hw.logicalcpu
hw.logicalcpu: 8
</code></pre>

<p>Feature of Intel Core i5 and i7 (probably others too). Allows, in
certain cases, multiple executions to be run on a single core, squeezing
out more power out of a single core. Allows multiple threads to run on
the same core. Gives a 20% performance boost in a lot of cases (rather
than 100% boost of a full on new core).</p>

<h2>Ember boot</h2>

<p>https://github.com/emberjs/ember.js/pull/10256#issuecomment-113846021</p>

<ol>
<li>Ember loads.</li>
<li>You create an <code>Ember.Application</code> instance global (e.g. <code>App</code>).</li>
<li>At this point, none of your classes have been loaded yet.</li>
<li>As your JavaScript file is evaluated, you register classes on the application (e.g. <code>App.MyController = Ember.Controller.extend(…);</code>)</li>
<li>Ember waits for DOM ready to ensure that all of your JavaScript included via <code>&lt;script&gt;</code> tags has loaded.</li>
<li>Initializers are run.</li>
<li>If you need to lazily load code or wait for additional setup, you can call <code>deferReadiness()</code>.</li>
<li>Once everything is loaded, you can call <code>advanceReadiness()</code>.</li>
<li>At this point, we say that the <code>Application</code> is ready; in other words, we have told Ember that all of the classes (components, routes, controllers, etc.) that make up the app are loaded.</li>
<li>A new instance of the application is created, and instance initializers are run.</li>
<li>Routing starts and the UI is rendered to the screen.</li>
</ol>


<h2>Brew Terminology</h2>

<p>https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Formula-Cookbook.md#terminology&#8212;homebrew-speak</p>

<p>Formula The package definition  /usr/local/Library/Formula/foo.rb
Keg The installation prefix of a Formula    /usr/local/Cellar/foo/0.1
opt prefix  A symlink to the active version of a keg    /usr/local/opt/foo
Cellar  All kegs are installed here /usr/local/Cellar
Tap An optional repository (git) of Formulae    /usr/local/Library/Taps
Bottle  Pre-built (binary) Keg that can be unpacked qt-4.8.4.mountain_lion.bottle.1.tar.gz</p>

<h2>Slack: Shift Escape</h2>

<ul>
<li>shift-esc marks all channels as read</li>
</ul>


<h2>Ember fix force push?</h2>

<p>Here&#8217;s a git fetch</p>

<pre><code>From github.com:emberjs/ember.js
 + 61c9ba6...c3f15cf master     -&gt; origin/master  (forced update)
   4aab5ad..d1a1a7c  beta       -&gt; origin/beta
 + 5a084f7...e7866ca in-template-config -&gt; origin/in-template-config  (forced update)
 + 172002f...642f5c3 remove-bind-attr -&gt; origin/remove-bind-attr  (forced update)
   c3accfb..1ad89cf  stable     -&gt; origin/stable
</code></pre>

<h2>vim-rails and other shit i should already know</h2>

<p>Come on this has been out forever how do you not know this.</p>

<ul>
<li>ctrl-O back</li>
<li>ctrl-I forward</li>
<li>gf: go to file of hovered-over class</li>
</ul>


<h2>Justdelete.me</h2>

<p>http://justdelete.me/</p>

<p>Instructions for how to remove yourself from various services, social
media, etc.</p>

<h2>Java <code>final</code> and immutable objects</h2>

<p>Since Java strings are immutable, the String class must be declared
<code>final</code>. Otherwise, someone could just subclass <code>String</code> and mutate it,
breaking the immutable guarantees of the parent String class.</p>

<h2>Java <code>@Override</code> annotation</h2>

<p>Not strictly required, but hints to the compiler what you&#8217;re trying to
do, and errors out if you fail to correctly override a parent class&#8217;s
method.</p>

<h2>Java: Checked vs Unchecked Exceptions</h2>

<p>Checked: required in <code>throws</code> clause.</p>

<p>Unchecked: not required in <code>throws</code> clause, must extend <code>RuntimeException</code>.</p>

<p>This might be wrong but checked exceptions kinda just feel like they&#8217;re
just part of the type signature, e.g. &#8220;this is a method that returns a
<code>Result</code>, <code>IOException</code>, <code>ParseException</code>, or <code>SomeOtherThing</code>&#8221;. In
functional land it seems like it&#8217;d be really easy to switch based on the
result.</p>

<h2>Android: Dalvik</h2>

<p><a href="https://en.wikipedia.org/wiki/Dalvik_%28software%29">wiki</a></p>

<p>Android compiles your java down to JVM bytecode <code>.class</code> files, and then
the dexer compiles <code>.class</code> files down to Dalvik bytecode. Androids
don&#8217;t have JVMs. They have DVMs. Actually, they did until about Android
4.4. Now they&#8217;re replaced by <a href="https://en.wikipedia.org/wiki/Android_Runtime">Android Runtime</a>.</p>

<h2>Android Activity</h2>

<p>Activity is UI + execution. It&#8217;s a component, I guess.</p>

<p>Activities invoke each other with Intents. Several activities might be
registered for a given Intent. An application is a bundle of activities.
Activities don&#8217;t directly call code on other activities; rather, intents
are used. Don&#8217;t hold on to references to Activities; they&#8217;re meant to be
aggressively GC&#8217;d.</p>

<p>A Task is a chain of user interactions that might span multiple
activities (sometimes apps), e.g. going to Messaging, looking up a
Contact, and calling that contact (3 separate activities from 3
different apps).</p>

<p>A Service is a background task, e.g. music player, or any kind of server
waiting for a client interaction. Android avoids reclaiming services and
keeps them alive unless extreme memory pressure.</p>

<h2>Android multi-user</h2>

<p>Android runs on Linux, and each application vendor gets its own user and
group, and all applications installed are run under that user and group.
So basically applications can&#8217;t access other applications&#8217; data, unless
they&#8217;re from the same application vendor (as determined by the keystore
that signed the release apk?).</p>

<h2>String#%</h2>

<p>http://ruby-doc.org/core-2.2.2/String.html#method-i-25</p>

<pre><code>"foo = %{foo}" % { :foo =&gt; 'bar' }        #=&gt; "foo = bar"
</code></pre>

<h2>Base64 from the shell</h2>

<pre><code>echo "wat" | openssl enc -base64 -A
d2F0Cg==
</code></pre>

<p>From http://www.w3.org/TR/SRI/#goals</p>

<pre><code>echo -n "alert('Hello, world.');" | openssl dgst -sha256 -binary | openssl enc -base64 -A
</code></pre>

<h2>SubscribeOn vs ObserveOn</h2>

<p>http://blogs.msdn.com/b/rxteam/archive/2009/11/21/observable-context-observable-subscribeon-and-observable-observeon.aspx</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anermic]]></title>
    <link href="http://machty.github.com/blog/2015/06/11/anermic/"/>
    <updated>2015-06-11T11:39:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/06/11/anermic</id>
    <content type="html"><![CDATA[<h2>Nils nils nils</h2>

<p>Yes, use <code>.fetch()</code> over <code>[]</code> if you&#8217;re working with an options hash
where all fields are expected/required so that you don&#8217;t accidentally
leak nils. But <code>.fetch(:wat, nil)</code> is the
most pointless thing of all time. It adds no value over <code>[:wat]</code>. So
stop thinking about it, Matchnozzle!</p>

<h2>JSON Pointer</h2>

<p>RFC: https://tools.ietf.org/html/rfc6901</p>

<p>TL;DR defines how to reference values within a JSON doc in a
standardized way, including via normal URIs. So potentially you could
cite a value in an API request from Wikipedia I guess.</p>

<p>Also used in JSON Patch to describe the path to changed things.</p>

<h2>Persistent Data Structure</h2>

<p>https://en.wikipedia.org/wiki/Persistent_data_structure</p>

<p>Preserves a previous version of itself when modified; often intertwined
with &#8220;immutable&#8221; since in some languages/libraries like Clojure data
structures internally share structure with others between operations.</p>

<h2>Racket</h2>

<p>Lispy language that compiles down to bytecode run on a proprietary
runtime.</p>

<p>Excellent article: http://programming-puzzler.blogspot.com/2010/08/racket-vs-clojure.html</p>

<p>In short, Clojure wins because of data structures (but is still
annoyingly limited by Java ties; no tail recursion, poor performance w
numbers sometimes, etc).</p>

<h2>Bottom line</h2>

<p>Literally the bottom line of a statement, where the total is calculated.
That&#8217;s what the saying&#8217;s referring to when folk say how&#8217;s this affect
our bottom line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brooch]]></title>
    <link href="http://machty.github.com/blog/2015/05/25/brooch/"/>
    <updated>2015-05-25T01:51:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/05/25/brooch</id>
    <content type="html"><![CDATA[<h2>Brooch</h2>

<p>wtf is a brooch.</p>

<p>http://en.wikipedia.org/wiki/Brooch</p>

<p>Decorative jewelry that can be attached to garments, often to hold them
closed. Could be collars to shirt, could be holding together a robe-ish
thing. Brooch brooch brooch. Remember that shit.</p>

<h2>Android HW Accel</h2>

<p>There&#8217;s hardware acceleration in the Android rendering pipeline since
Honeycomb, Android 3.0, which came out Feb 2011. By default,
the manifest attr that controls this is set to false:</p>

<pre><code>&lt;application ... android:hardwareAccelerated="false"&gt;
</code></pre>

<p>So you&#8217;d have to set that to true to enable hw accel globally. Then
there&#8217;s finer granularity for <code>window</code> and <code>View</code> via setFlags and
setLayerType.</p>

<h2>Amazon Local</h2>

<p>What it is? Google autocomplete search elucidates:</p>

<p>&#8220;amazon local vs&#8221;</p>

<ul>
<li>groupon</li>
<li>livingsocial</li>
<li>square</li>
</ul>


<p>Seems to promote your business via groupon-esque deals.</p>

<h2>Java Anonymous Classes</h2>

<p>Weird syntax I didn&#8217;t recognize. Basically lets you instantiate an
anonymous class assuming you don&#8217;t need to share the class. The cool
thing about this is that you can implement/instantiate an instance of a
class based entirely on an Interface (this was weird for me since
Interfaces in Java seem like these ephemeral ghostly non-existent things
that normally take a lot of verbose code to instantiate).</p>

<p>https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html</p>

<pre><code>public class HelloWorldAnonymousClasses {

    interface HelloWorld {
        public void greet();
        public void greetSomeone(String someone);
    }

    public void sayHello() {
        // this a function body!

        // this is a "local" class... which means you define it,
        // and...
        class EnglishGreeting implements HelloWorld {
            String name = "world";
            public void greet() {
                greetSomeone("world");
            }
            public void greetSomeone(String someone) {
                name = someone;
                System.out.println("Hello " + name);
            }
        }

        // ... THEN you instantiate it
        HelloWorld englishGreeting = new EnglishGreeting();

        // This is an anonymous class; define it at the same time
        // you instantiate it.
        HelloWorld frenchGreeting = new HelloWorld() {
            String name = "tout le monde";
            public void greet() {
                greetSomeone("tout le monde");
            }
            public void greetSomeone(String someone) {
                name = someone;
                System.out.println("Salut " + name);
            }
        };
</code></pre>

<h2>Wadsworth Constant</h2>

<p>http://www.urbandictionary.com/define.php?term=Wadsworth+Constant</p>

<blockquote><p>The Wadsworth Constant is the fundamental idea that the true meaning of a video, conversation, or comment approaches importance after approximately 30% of it has been skipped over.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cransible]]></title>
    <link href="http://machty.github.com/blog/2015/05/11/cransible/"/>
    <updated>2015-05-11T23:38:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/05/11/cransible</id>
    <content type="html"><![CDATA[<h2>ControlPersist</h2>

<p>A feature of SSH that multiplexes ssh sessions over one TCP connection,
cuts down TCP connection overhead, etc. Ansible benefits from it.</p>

<h2>Host-based authentication</h2>

<p>hence <code>pg_hba.conf</code>.</p>

<h2>binstubs and gem</h2>

<p>here&#8217;s a binstub</p>

<pre><code>require 'rubygems'
gem 'bundler'
load Gem.bin_path('bundler', 'bundle')
</code></pre>

<p>binstubs prep <code>$LOAD_PATH</code> (<code>$:</code> is the same thing) before a gem is run.</p>

<p>The <code>gem 'bundler'</code> command prepends <code>LOAD_PATH</code> with the specified
gem&#8217;s load paths. Additional calls to gem append after the load paths of
earlier gems.</p>

<h2>fail2ban</h2>

<p>scans your logfiles, looks for malicious activity, bans bad guys for a
while.</p>

<h2>Digital Ocean droplets have public IPs, ec2s are priv</h2>

<p>ec2 <em>does</em> expose public url but it has to go through a firewall defined
by your security group. Note that this is obvious because, within an ec2
instance, its IP is in one of the private IP address ranges
(10.something, 192.168.something, and i think 172.something).
So <em>can</em> you use a private IP publicly?</p>

<p>http://serverfault.com/questions/57155/can-an-ip-address-in-the-private-range-be-used-as-a-public-address</p>

<p>You <em>could</em>, but any network admin/ISP is going to block egress and
ingress packets sourced/destined for any of these ranges. This prevents
IP spoofing among other things, e.g. you can&#8217;t forge a fake packet and
expect it to be routed to some internal server, which might read and
respond to the packet and cause damage&#8230; all of this is avoided by
internal servers using private IPs.</p>

<h2>Ansible: modules vs playbooks vs rules</h2>

<ul>
<li>playbook

<ul>
<li>list of &#8220;plays&#8221;</li>
</ul>
</li>
<li>play

<ul>
<li>map a group of hosts to some well-defined roles</li>
</ul>
</li>
<li><h2>roles</h2></li>
<li>tasks

<ul>
<li>call to an ansible module (which can directly be done via something
like <code>ansible somehost -m ping</code></li>
<li>tasks are performed one at a time (though they probably branch out
simultaneously on multiple hosts)</li>
</ul>
</li>
<li>module

<ul>
<li>can be executed directly via <code>ansible</code> or via playbooks</li>
<li>a specific command, can make changes to a variety of server types</li>
<li>e.g.

<ul>
<li>ansible webservers -m service -a &#8220;name=httpd state=started&#8221;</li>
<li>ansible webservers -m ping</li>
<li>ansible webservers -m command -a &#8220;/sbin/reboot -t now&#8221;</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Ansible tags</h2>

<p>http://docs.ansible.com/playbooks_tags.html</p>

<p>Use tags to run subsets of a playbook.</p>

<ul>
<li>tag certain tasks</li>
<li>specify at run time a tag of which tasks to run</li>
<li>you can also tag includes

<ul>
<li>such that if you specify tags to ansible-playbook, it won&#8217;t include
those rules unless tagged</li>
</ul>
</li>
</ul>


<h2>Sudo password is yours, not roots!!!!</h2>

<p>http://www.howtogeek.com/111479/htg-explains-whats-the-difference-between-sudo-su/</p>

<blockquote><p>When you execute sudo command, the system prompts you for your current user account’s password before running command as the root user. By default, Ubuntu remembers the password for fifteen minutes and won’t ask for a password again until the fifteen minutes are up.</p></blockquote>

<p>This is why you have a sudoers file! You define who&#8217;s allowed to run as
root user and let them run as sudo.</p>

<p><code>su -c 'some command'</code> on the other hand asks for root&#8217;s password.</p>

<h2>Debian Hosts file</h2>

<p>https://www.debian.org/doc/manuals/debian-reference/ch05.en.html#_the_hostname_resolution</p>

<blockquote><p>The IP address 127.0.1.1 in the second line of this example may not be found on some other Unix-like systems. The Debian Installer creates this entry for a system without a permanent IP address as a workaround for some software (e.g., GNOME) as documented in the bug #719621.</p>

<p>The <host_name> matches the hostname defined in the &#8220;/etc/hostname&#8221;.</p>

<p>For a system with a permanent IP address, that permanent IP address should be used here instead of 127.0.1.1.</p>

<p>For a system with a permanent IP address and a fully qualified domain name (FQDN) provided by the Domain Name System (DNS), that canonical <host_name>.<domain_name> should be used instead of just <host_name>.</p></blockquote>

<h2>Loopback</h2>

<p>e.g. localhost; it&#8217;s a way to access a computer&#8217;s own network services
via a network interface. I guess I knew this, but I just didn&#8217;t think
about how it unifies the interface&#8230; e.g. whether it&#8217;s local or remote,
just use IP all the time.</p>

<h2>ifconfig</h2>

<p>&#8220;interface config&#8221;</p>

<h2>debops: run site.yml first</h2>

<p>Don&#8217;t skip this step!</p>

<p>I used <code>rails_deploy</code> before site.yml and things were just ambiguously
missing and I had to patch them up.</p>

<h2>/etc/shadow</h2>

<p>It&#8217;s where all the encrypted passwords live. <code>/etc/passwd</code> is all the
user names, but lots of applications need access to it, so it can&#8217;t be
plaintext. SO in <code>passwd</code> you put &#8216;x&#8217; for password and that causes
<code>/etc/shadow</code> to be looked up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Streams]]></title>
    <link href="http://machty.github.com/blog/2015/04/15/ember-streams/"/>
    <updated>2015-04-15T14:13:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/04/15/ember-streams</id>
    <content type="html"><![CDATA[<h2>Ember Streams</h2>

<p>My goal is to tease out the differences between Ember Streams and Rx.</p>

<p><code>ember-metal/lib/streams/stream.js</code></p>

<p>A stream has subscribers.</p>

<h2>ConnectableObservable</h2>

<p>Wraps a single subscription. Broadcasts events from this single
subscription to all subscribers.</p>

<h2>Rx Disposable</h2>

<p>Anything with a <code>.dispose</code> method. So, what&#8217;s disposable in Rx?</p>

<ul>
<li>subscriptions</li>
<li>observers</li>
</ul>


<p>What&#8217;s it used for?</p>

<ul>
<li>cleaning up some resource after subscriptions no longer need it</li>
<li>generic disposal of no-longer needed objects

<ul>
<li>e.g. internal (non-detach) observers are disposable, but not really
for the purpose of cleaning up some resource, but just making sure
that no more events make it through</li>
</ul>
</li>
</ul>


<p>There isn&#8217;t a Subscription object in Rx, but you can think of the return
value of <code>observable.subscribe</code> to be a &#8220;subscription&#8221;. Technically it&#8217;s
an &#8220;auto-detach&#8221; observer; an auto-detach observer proxies to an
underlying observer. When an auto-detach observer is disposed of, it
disposed of the underyling subscribed observables&#8230; except that an
observable isn&#8217;t a disposable; observables return disposables from their
subscribe methods.</p>

<p>Another way of thinking about this is that, on their own, observables
don&#8217;t act/exist/do anything until they&#8217;re brought to life by a
subscription. There&#8217;s nothing to &#8220;dispose&#8221; of until there is a
subscription. Once someone subscribes, <em>then</em> you have a bunch of stuff
that needs to be cleaned up at some point, hence disposables.</p>

<p>Disposables have their use beyond Rx; <code>dispose</code> is kind of like a
destructor; JavaScript doesn&#8217;t have destructors. Destructors don&#8217;t make
<em>as</em> much sense in garbage-collected languages because their timing is
non-deterministic (often it ends up being more practical to manually
manage this yourself).</p>

<h2>Ember <code>destroy</code></h2>

<p>Ember&#8217;s got &#8220;destroy&#8221;-ables&#8230; <code>destroy</code> methods on objects, and
<code>isDestroyed</code> properties that get set and checked, assertions if things
are called on destroyed objects, etc.</p>

<h3>Ember Object destroy</h3>

<ul>
<li>schedules call to <code>willDestroy</code> hook, meant for subclasses to
implement</li>
<li>aggressively tears down meta object

<ul>
<li>destroys bindings/observers

<ul>
<li>hence anyone listening to events on the obj or binding to values
won&#8217;t get any more updates.</li>
</ul>
</li>
<li>enables eager GC of metadata (it&#8217;s pretty easy in JS/any dynamic
language to keep around references to stuff you don&#8217;t care about any
more; at least with destroy you can eagerly remove things)</li>
</ul>
</li>
</ul>


<h3>EventDispatcher destroy</h3>

<p>Removes all dispatcher-added jQuery event listeners. Calls super.</p>

<h3>Collection View</h3>

<p>Calls super, removes array observers (which live on the content array
and delegate to the collection view), destroy empty view.</p>

<h3>Core View</h3>

<p>First off, CoreView is &#8220;deprecated&#8221; in that it shouldn&#8217;t be used
directly, but Ember.View still extends it.</p>

<p>Calls super, destroys the DOM el (?), some other crap.</p>

<p>Probably doesn&#8217;t make sense to write about until Glimmer.</p>

<h2>Rx Observers</h2>

<p>Class hierarchy</p>

<ul>
<li>Observer

<ul>
<li>AbstractObserver

<ul>
<li>AnonymousObserver</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>You can fulfill the Observer contract without using an Rx Observer
class:</p>

<p>http://jsbin.com/nupafu/11/edit?js,console</p>

<pre><code>console.clear();

var onNext      = () =&gt; { console.log('next'); };
var onError     = () =&gt; { console.log('error'); };
var onCompleted = () =&gt; { console.log('completed'); };

var pojo = { onNext, onError, onCompleted };

var legitObserver = Rx.Observer.create(onNext, onError, onCompleted);
// same thing:
// var legitObserver = new Rx.AnonymousObserver(onNext, onError, onCompleted);

Rx.Observable.range(1,5).subscribe(pojo);
Rx.Observable.range(1,5).subscribe(pojo);

Rx.Observable.range(1,5).subscribe(legitObserver);
Rx.Observable.range(1,5).subscribe(legitObserver);
</code></pre>

<p>The difference is that <code>legitObserver</code>&#8217;s hooks only fire for the first
subscription, and nothing fires for the second; the pojo on the other
hand runs through the range twice. Why? Because <code>Rx.Observer.create</code>
creates an AnonymousObserver, which is an AbstractObserver, and
AbstractObserver sets an <code>isStopped=true</code> flag to prevent further events
from coming through. In other words, generally speaking an observer is
only meant to be attached to one subscription, but if you want the same
object to receive events from multiple observables (and for some stupid
reason you don&#8217;t want to call <code>Observable.prototype.merge</code> then you can
just pass <code>subscribe</code> some pojo with the necessary <code>onNext</code>, <code>onError</code>,
<code>onCompleted</code> methods defined.</p>

<p>Of course you can subscribe the same handler fns and internally two
separate AnonymousObservers will get created, so events from both
subscriptions will fire:</p>

<pre><code>Rx.Observable.range(1,5).subscribe(onNext, onError, onCompleted);
Rx.Observable.range(1,5).subscribe(onNext, onError, onCompleted);
</code></pre>

<h2>JS <code>_super</code> pattern</h2>

<p>Seems obvious, but a decently nice pattern for calling a superclass&#8217;s
method, taken from Ember&#8217;s streams:</p>

<pre><code>merge(SomeSubclass.prototype, {
  /* ... */

  _super$destroy: SomeSuperclass.prototype.destroy,

  destroy() {
    this._super$destroy();

    // do subclass-specific stuff
  }
});
</code></pre>

<h2>Routeable components / attrs / query params</h2>

<pre><code>export default Ember.Route.extend({
  queryParams: {
    page: {
      default: 1,
      // refresh: true,
      // API: infer/generate action name based on param?
    }
  },

  model(params) {
    // params has all params, including QPs
  },

  attrs() {
    return {
      model: this.model(),
      updatePage: this.actions.updatePage
    }
  },

  actions: {
    updatePage(newPage) {
      // this is a manual implementation of the inferred action
      // based on page QP

      // default implementation:
      // when refresh: false (default)
      this.component.set('page', newPage);

      //this.component.set('page', newPage);
    },
  },
});

// articles template
// 



// articles component
export default Ember.Component.extend({
  // implicit attrs

  //attrTypes: {
  //  page: number,
  //},

  page: null,

  // this is called initial render and prop updates
  // (willReceiveAttrs called re-render only)
  willRender(attrs) {
    this.set('page', attrs.page);
  },
});
</code></pre>

<p>Lessons Learned:</p>

<ul>
<li>Route passes in read-only (non-mut) attrs to routeable component</li>
<li><p>This prevents type-writer query params</p>

<p>  // my-input component
  export default Ember.Component.extend({</p>

<pre><code>actions: {
  doSomethingThatChangesValue() {
    // TODO: mut api for changing thing
    attrs.setValue...??
  },
},
</code></pre>

<p>  });</p></li>
</ul>


<h2><code>bashrc</code> and <code>bash_profile</code></h2>

<p>ALWAYS forget the difference between these things. One of them is for
login shells, one is both. Blurg.</p>

<p>Answer:</p>

<ul>
<li><code>.bashrc</code> is read for interactive, non-login shells</li>
<li><code>.bash_profile</code> is read for login shells</li>
<li>Mac OS X uses login shells for its terminals, iTerm included</li>
<li>hence, might make sense to just source <code>.bashrc</code> from <code>.bash_profile</code></li>
</ul>


<p>Also, the meaning of <code>rc</code> isn&#8217;t totally known; it could be &#8220;run
commands&#8221; or &#8220;runtime configuration&#8221; but no one really agrees.</p>

<h2>Glimmer Streams</h2>

<p>KeyStream takes a source obj stream and a path and streams property values
based on the provided key. Can be generated via sourceStream.get(&#8216;wat&#8217;).
A source stream is just a stream of objects. KeyStreams stream property
changes on objects. Changing the underlying object of the source stream
will fire a change event on the KeyStream. KeyStreams watch for changes
using Ember Observers (addObserver/removeObserver)</p>

<p>KeyStreams (among others) have a setSource that changes the underyling
stream of objects; calling setSource will always cause a notify().</p>

<p>Why? mmun says:</p>

<blockquote><p>in order to not notify we would have to eagerly compute the stream value
and compare to the last value</p></blockquote>

<p>So it&#8217;s a tradeoff between minimizing notify spam and losing value laziness.</p>

<p>TODO: how do views use baseContext?</p>

<p>ContextStream is a</p>

<h2>Bash Completion</h2>

<p>http://tldp.org/LDP/abs/html/tabexpansion.html</p>

<ul>
<li>works w Env vars, e.g. <code>$BASH_[tab]</code></li>
<li>use <code>complete</code> to specify rules for a command, e.g. match
filenames, filter by this regex, etc</li>
<li>use <code>compgen</code> to pass shit to a filter fn written in bash
(prefixed by underscore by convention)</li>
</ul>


<h2>why nom/bom/nombom</h2>

<p>Most ember devs have to do something like this due to NPM fidgetries:</p>

<pre><code>alias nombom='npm cache clear &amp;&amp; bower cache clean &amp;&amp; rm -rf node_modules bower_components &amp;&amp; npm install &amp;&amp; bower install'
alias nom='npm cache clear &amp;&amp; rm -rf node_modules &amp;&amp; npm install'
alias bom='bower cache clean &amp;&amp; rm -rf bower_components &amp;&amp; bower install'
</code></pre>

<p>Why is this necessary? Because:</p>

<ol>
<li>Even though npm will take into consideration your project&#8217;s
dependency versions when choosing the version of dependencies of
dependencies, once that package has been installed in <code>node_modules</code>,
even if you bump your project&#8217;s dependencies, that old version will
be cached in deep nestings of <code>node_modules</code>, hence it&#8217;s safest to
nuke <code>node_modules</code>. Afaik only explains the <code>rm -rf node_modules</code>
side of things.</li>
<li>NPM won&#8217;t install a newer version of a dependency if a matching one
exists in the NPM cache (<code>~/.npm/...</code>). Wait, isn&#8217;t this desirable?
Shouldn&#8217;t this be a cue to bump your dependency version?</li>
</ol>


<p>This seems to be the chief reason why nombom is the only way to sane
dependency installation:</p>

<ul>
<li>NPM caches modules by their version, e.g. <code>fstream@1.0.4</code> (these gets
stored in <code>~/.npm/fstream/1.0.4/package.tgz</code></li>
</ul>


<h2>Bash + vim (or whatever)</h2>

<ol>
<li><code>set -o vi</code> so that bash is in Vim mode</li>
<li>Type out a command</li>
<li>Press escape (to leave &#8220;insert mode&#8221;)</li>
<li>press <code>v</code> to open vim w the current command</li>
<li>Save and quit to execute the command</li>
</ol>


<h2>Anamorphism</h2>

<p>http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html</p>

<p>Generating a (potentially infinite) vector from a scalar. Also known as
an unfold.</p>

<p>Actually this is better:</p>

<p>http://www.introtorx.com/Content/v1.0.10621.0/08_Transformation.html</p>

<ul>
<li>Ana(morphism) T &#8211;> IObservable<T></li>
<li>Cata(morphism) IObservable<T> &#8211;> T</li>
<li>Bind IObservable<T1> &#8211;> IObservable<T2></li>
</ul>


<h2>Hot observables, connect vs refCount vs singleInstance</h2>

<p>http://jsbin.com/nupafu/20/edit?html,js,console,output</p>

<p>I haven&#8217;t done <code>singleInstance</code> yet, but basically it&#8217;s like
<code>publish().refCount()</code> except it&#8217;ll resubscribe if refcount goes to 0
and then back to 1.</p>

<h2>The ultimate nom nuance</h2>

<p><code>npm</code> will assemble/download all project dependencies with the following
rule:</p>

<ul>
<li>dependencies are installed only into the rootmost dependencies that
specifies that dependency, e.g.</li>
</ul>


<p>If</p>

<pre><code>proj
  - foo
  - bar
    - baz
      - foo
</code></pre>

<p>The <code>npm</code> will <em>NOT</em> install a <code>baz/node_modules/foo</code> but will rather
install a single foo at the root <code>node_modules</code>; the reason this works
in Node land is that <code>require</code> always starts at the current dir and
traverses upward.</p>

<p>Shitty example: start with</p>

<pre><code>proj
  - bar
    - baz
      - foo
</code></pre>

<p>then install at top level foo</p>

<pre><code>proj
  - foo
  - bar
    - baz
      - foo
</code></pre>

<p><code>npm</code> will not remove <code>foo</code> from <code>baz</code>&#8230; you wind up with two different
versions of <code>foo</code>, shadowing each other. Holy shit!!!!!</p>

<p>NPM <code>dedupe</code> would remove the second foo. NPM 3 will probably call
dedupe automatically when you do <code>npm install</code>. But dedupe has its own
issues, not the least of which is that no one knows about it and it&#8217;s
one more thing to tell your team about.</p>

<p>MAIN POINT OF LEARNING:</p>

<p><code>npm</code> delicately stitches things together such that Node&#8217;s folder-bubbling
<code>require</code> resolution semantics can find the packages installed by <code>npm</code>.
It doesn&#8217;t override <code>$LOAD_PATH</code> like Bundler does or anything like
that.</p>

<h2>NPM cherry-pick</h2>

<pre><code>git cherry-pick -x f2c270e8d76e81a1921bbc31777aa3ac570ca87a
</code></pre>

<p>This is how I pulled in a change on an already-merged
<code>idempotent-rerender</code>.</p>

<h2>OnErrorResumeNext</h2>

<p>What a horrible name!</p>

<p>Basically, it&#8217;s <code>concat</code> that automatically recovers from errors.</p>

<p>http://jsbin.com/nupafu/22/edit</p>

<p>http://www.introtorx.com/Content/v1.0.10621.0/11_AdvancedErrorHandling.html</p>

<blockquote><p>Just the title of this section will send a shudder down the spines of old VB developers! In Rx, there is an extension method called OnErrorResumeNext that has similar semantics to the VB keywords/statement that share the same name.</p>

<p>Just as the OnErrorResumeNext keyword warranted mindful use in VB, so should it be used with caution in Rx. It will swallow exceptions quietly and can leave your program in an unknown state.</p></blockquote>

<h2>Observable#finally invoked even on dispose</h2>

<p>http://jsbin.com/nupafu/24/edit?html,js,console,output</p>

<h2>ConnectableObservables can reconnect</h2>

<p>http://jsbin.com/nupafu/25/edit?html,js,console,output</p>

<pre><code>var c = Rx.Observable.interval(500).publish();

c.subscribe((v) =&gt; {
  console.log(v);
});

// returns a disposable that disconnects.
var s = c.connect();

setTimeout(() =&gt; {
  s.dispose();
  s = c.connect();
}, 1200);
</code></pre>

<h2>Multicast</h2>

<p>Didn&#8217;t understand this til I understood <code>publishLast()</code> and <code>replay()</code>,
which basically apply <code>multicast</code> functionality through async subject
and replay subject, respectively. Basically replay and async subjects
just define different forms of caching, and if you want to share that
functionality with connectable observable then you wanna use multicast.</p>

<pre><code>.Publish() = .Multicast(new Subject&lt;T&gt;)
.PublishLast() = .Multicast(new AsyncSubject&lt;T&gt;)
.Replay() = .Multicast(new ReplaySubject&lt;T&gt;)
</code></pre>

<h2>Windows</h2>

<p>I&#8217;ve talked about before, grokking it better now:</p>

<p>http://jsbin.com/nupafu/27/edit?js,console,output</p>

<pre><code>var o = Rx.Observable.range(5, 20);

// HOT 
var shared = o.publish().refCount();

var openings = shared;//.filter((_, idx) =&gt; idx % 3 === 0);

shared.window(openings, () =&gt; 
  shared.filter((v, idx) =&gt; v % 5 === 0)
).selectMany((obs) =&gt; {
  return obs.toArray();
}).subscribe((arr) =&gt; {
  console.log(arr);
});
</code></pre>

<p>Takeaways:</p>

<ul>
<li>closing selector gets passed the value emitted by windowOpenings that
caused it to be opened in the first place.</li>
<li>if the closing selector is based on the same source data stream, you
almost certainly want to use <code>publish().refCount()</code>, or at least make
sure the source stream is hot, or if it&#8217;s cold it doesn&#8217;t expensively
re-create / duplicate some underlying resource</li>
</ul>


<h2>Subscribing inside Observer.create()</h2>

<p>The contract for Observer.create is to</p>

<ul>
<li>fire <code>onNext*(onComplete|OnError)?</code> on the observer passed in</li>
<li>return a disposable</li>
</ul>


<p>Based on that, the following is a perfectly valid way to alias an
observable:</p>

<p>http://jsbin.com/nupafu/30/edit</p>

<pre><code>var proxy = Rx.Observable.create((o) =&gt; {
  return Rx.Observable.interval(200).subscribe(o);
});

proxy.subscribe((v) =&gt; {
  console.log(v);
});
</code></pre>

<p><code>proxy</code> behaves just like <code>interval</code>.</p>

<h2>C# <code>+=</code> and <code>-=</code> event subscription syntax</h2>

<pre><code>this.Click += (s,e) =&gt; { MessageBox.Show(
   ((MouseEventArgs)e).Location.ToString());};
</code></pre>

<h2><code>Either&lt;LeftT, RightT&gt;</code></h2>

<p>In Rxx, <code>Either</code> is used a bunch to imply a broadcast of data from
either source sequence A or source sequence B; one nice use case of it
is how their <code>Retry</code> method works.</p>

<p>http://rxx.codeplex.com/discussions/401272</p>

<p>Basically, vanilla Rx retry disposes of the error that causes the retry
to happen, which means it&#8217;s trick to do logging in a nice composable
way.</p>

<h2>Apple IP is <code>17.***.***.***</code></h2>

<p>http://tapity.com/17-the-secret-to-finding-out-how-many-apple-employees-dig-your-stuff/</p>

<p>https://support.apple.com/en-us/HT203609</p>

<blockquote><p>The entire 17.0.0.0/8 address block is assigned to Apple</p></blockquote>

<p>So you can check your logs to see if Apple&#8217;s snooping your shit.</p>

<h2><code>embedded.mobileprovision</code></h2>

<p>It is present in ALL <code>.ipa</code>s generated by XCode <em>including App Store
builds</em>, but by the time you download <em>from the App Store</em>, it has been
stripped out.</p>

<h2>RxJava lifts, other things</h2>

<p>https://speakerdeck.com/dlew/reactive-extensions-beyond-the-basics</p>

<ul>
<li>hot sequences have no subscription side effects</li>
<li><p>cold sequences may have subscription side effects</p></li>
<li><p>Observable.just(&#8220;1&#8221;)</p>

<ul>
<li>cold, because generates that string every subscription</li>
</ul>
</li>
<li>Observable.interval()

<ul>
<li>cold, no duh</li>
</ul>
</li>
<li>ReplaySubject

<ul>
<li>cold???</li>
<li>hot if you&#8217;re first subscriber</li>
<li>cold if there are items to replay, and then hot thereafter</li>
</ul>
</li>
</ul>


<h2>Redis: why use hash?</h2>

<p>Why do</p>

<pre><code>HSET somehash key val
</code></pre>

<p>when you can do HGET</p>

<h2>redistogo disables <code>CONFIG</code> command</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1:39 PM &lt;machty&gt; any idea why on redis 2.8.11 i'm getting ERR unknown command 'config' ? docs say config command exists since 2.0.0
</span><span class='line'>1:48 PM &lt;machty&gt; actually i think it's because CONFIG is disabled by redistogo service... unfortunately both CONFIG GET and CONFIG SET :/
</span><span class='line'>1:55 PM &lt;xxxx&gt; machty: I actually work for Redistogo
</span><span class='line'>1:55 PM &lt;xxxx&gt; We do disable it indeed
</span><span class='line'>1:56 PM &lt;machty&gt; xxxx: ah, i guess there's no way to dynamically get maxmemory? was thinking of using it for alerts
</span><span class='line'>1:56 PM &lt;xxxx&gt; Unfortunately not, there was talk of working on API for it but that development kind of got halted</span></code></pre></td></tr></table></div></figure>


<p>Apparently a lot of effort is being shifted from redistogo to
ObjectRocket redis, which:</p>

<ul>
<li>doesn&#8217;t disable CONFIG</li>
<li>has high availability (HA) enabled by default via sentinels</li>
<li>http://redis.io/topics/sentinel</li>
</ul>


<h2>nethack</h2>

<p>What is it?</p>

<h2>Logstash</h2>

<p>https://www.youtube.com/watch?v=RuUFnog29M4</p>

<ul>
<li><a href="http://www.nagios.org/">nagios</a>: infrastructure monitoring</li>
<li>log = timestamp + data</li>
<li>Logstash

<ul>
<li>open source</li>
<li>config file is nginx-ish</li>
<li>output graphs and a bunch of other things</li>
<li>use grok

<ul>
<li>write patterns, and give them name</li>
<li>reusable regex</li>
<li>comes w 100 patterns</li>
<li>no need for regex skills</li>
</ul>
</li>
<li>data filter included to handle all varieties of timestamp format</li>
<li>stop inventing time formats</li>
<li>multiline filter for errors w stack trace</li>
<li>gettimeofday</li>
<li>NTP

<ul>
<li>network time protocol, used for syncing servers</li>
<li>if apache uses gettimeofday</li>
</ul>
</li>
<li>feature

<ul>
<li>transport and process logs to and from anywhere

<ul>
<li>get them in analyzable format</li>
</ul>
</li>
<li>provide search and analytics</li>
</ul>
</li>
<li>community

<ul>
<li>kibana: web interface for logstache</li>
<li>logstash-cli: search / analytics from commandline</li>
</ul>
</li>
<li>dreamhost deployment

<ul>
<li>20k apache events/sec peak</li>
<li>250 mil events/day</li>
<li>75gb day</li>
<li>160 web servers</li>
<li>7 logstach / elasticsearch servers</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>ELK</h2>

<p>http://blog.qbox.io/indexing-heroku-logs-into-elasticsearch-with-logstash</p>

<ul>
<li>elastic search

<ul>
<li>searchable database</li>
</ul>
</li>
<li>logstash

<ul>
<li>parses/processes logs from many sources, stores in centralized location</li>
</ul>
</li>
<li>kibana</li>
</ul>


<p>https://www.elastic.co/webinars/elk-stack-devops-environment</p>

<ul>
<li>installation

<ul>
<li>download, untar, and run</li>
</ul>
</li>
</ul>


<p>So who the fuck uses ELK stack? Just enormous companies that manage
their own custom infrastructures?</p>

<p>Answer: anyone who does enough devops to</p>

<ul>
<li>be smart enough to set it up</li>
<li>know the pain of living without it</li>
</ul>


<p>Logstash is generally meant to live on the machine that&#8217;s producing the
logs, and then it can forward it on to an elasticsearch cluster..</p>

<h2>Ruby logging</h2>

<blockquote><p>A flexible logging library for use in Ruby programs based on the design of Java&#8217;s log4j library.</p></blockquote>

<p>https://github.com/TwP/logging</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shiggity wat]]></title>
    <link href="http://machty.github.com/blog/2015/03/25/shiggity-wat/"/>
    <updated>2015-03-25T11:15:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/03/25/shiggity-wat</id>
    <content type="html"><![CDATA[<h2>IP Spoofing</h2>

<p>What&#8217;s to stop you from sending out packets with someone else&#8217;s IP as
the source?</p>

<p>http://en.wikipedia.org/wiki/IP_address_spoofing</p>

<ul>
<li>packet filtering

<ul>
<li>ingress: gateway blocks incoming packets with source IP that can
only belong to someone inside of the network</li>
<li>egress: gateway blocking outgoing packets with source IP from
outside of the network (altruistic since it prevents hackers from
hacking folk outside of the network)</li>
</ul>
</li>
<li>upper layer protocol

<ul>
<li>TCP prevents IP spoofing by use of sequence numbers; an attacker
would have to guess at a correct sequence number in order for it to
be considered valid</li>
</ul>
</li>
</ul>


<h2>RxJS</h2>

<h3>generate</h3>

<pre><code>var source = Rx.Observable.generate(
    0,
    function (x) { return x &lt; 3; }, // terminate condition
    function (x) { return x + 1; }, // step fn
    function (x) { return x*2; }    // map fn for values emitted...?
);
</code></pre>

<p>The last fn is weird&#8230; seems like the above is the equivalent of:</p>

<pre><code>var source = Rx.Observable.generate(
    0,
    function (x) { return x &lt; 3; }, 
    function (x) { return x + 1; },
    function (x) { return x; }    
).map(x =&gt; x*2);
</code></pre>

<p>So why embed the <code>map</code> operator? or as they call it the select.</p>

<pre><code>Rx.Observable.prototype.map === Rx.Observable.prototype.select // true
</code></pre>

<h3>generateWith relative/absolute time</h3>

<p>Like <code>generate</code> but adds a time selector fn: for each value you can
decide when it should fire. So you could feasible reverse the firing
time of a series of events, e.g. 1,2,3,4,5 fires in the reverse order:</p>

<pre><code>var source = Rx.Observable.generateWithRelativeTime(
    1,
    function (x) { return x &lt; 4; },
    function (x) { return x + 1; },
    function (x) { return x; },
    function (x) { return 100 * (5-x); }
);

"Next: 1"
"Next: 2"
"Next: 3"
"Completed"
</code></pre>

<p>NOPE I was wrong; the time selector generates the time <em>between</em> events,
not the time relative to the start of observation. I&#8217;m guessing that can
be accomplished via the absolute form:</p>

<pre><code>var now = Date.now();
var source = Rx.Observable.generateWithAbsoluteTime(
    1,
    function (x) { return x &lt; 4; },
    function (x) { return x + 1; },
    function (x) { return x; },
    function (x) { return now + 100 * (5-x); }
).timeInterval();

"Next: 1:402"
"Next: 2:6"
"Next: 3:2"
"Completed"
</code></pre>

<p>WRONG AGAIN! Order is preserved, with the already-elapsed events firing
immediately once the first one fires.</p>

<h3>generate as for loops:</h3>

<p>Instead of</p>

<pre><code>for (var x = 0; x &lt; 10; ++x) {
  console.log(x*2);
}
</code></pre>

<p>you do</p>

<pre><code>var source = Rx.Observable.generate(
    0,
    function (x) { return x &lt; 10; }, 
    function (x) { return x + 1; },  // ++x
    function (x) { return x*2; }  
);

// or source.subscribe
source.forEach((val) =&gt; {
  console.log(val);
});
</code></pre>

<p>Keep in mind that</p>

<pre><code>Rx.Observable.prototype.forEach === Rx.Observable.prototype.subscribe
</code></pre>

<p>They&#8217;re aliases of each other, they both:</p>

<ul>
<li>activate an observable</li>
<li>are intended to cause some sort of side effects</li>
</ul>


<p>Why write in observable form?</p>

<ul>
<li>composability</li>
<li>much harder to troll yourself w &#8220;global&#8221; mutable vars used for iteration</li>
<li>you&#8217;re writing in a way that can effortlessly handle the dimension of time</li>
</ul>


<h2>Subscriber stack</h2>

<p>How would you get more explicit bubbling behavior that we&#8217;re familiar
with from bubbling actions in Ember?</p>

<p>Basically I want there to be some root subject/observable on a parent
route, and then child routes can push their subscription onto that
observable&#8217;s stack of subscriptions, and only the subscription at the
top of the stack.</p>

<p>This doesn&#8217;t accomplish bubbling per se; it&#8217;s a non-bubbling form of
first-responder. Do we want bubbling?</p>

<p>Actually yeah I think we want bubbling; what we don&#8217;t want is routes
accidentally getting actions invoked on them because at some point later
in the game a child route invokes an action (just string names) and it
accidentally leaks out, causing havoc on parent routes, etc.</p>

<p>But to be able to pass on the action is probably nice.</p>

<pre><code>// within child route
someParentRoute.observableStack.subscribe((e) =&gt; {
  if (canHandle(e.value)) {
    // do stuff
  } else {
    e.bubble();
  }
});
</code></pre>

<p>and this subscription would be <code>dispose</code>d upon route deactivation so it
cleans itself up.</p>

<p>The problem with this is once you start needing to apply operators, you
need some way of signalling the bubble later on?</p>

<pre><code>someParentRoute.observableStack
               .delay(1000)
               .map((e) =&gt; someCopyThatStillPreservesBubbleFn})
               .subscribe((e) =&gt; {
                 if (canHandle(e.value)) {
                   // do stuff
                 } else {
                   e.bubble();
                 }
               });
</code></pre>

<h2>Alex versus invalidation</h2>

<p>https://github.com/ef4/liquid-fire/issues/222</p>

<h2>iOS 7 and 8 usage</h2>

<p>As of 3/29/2015:</p>

<ul>
<li>iOS 8: 77%</li>
<li>iOS 7: 20%</li>
<li>Earlier: 3%</li>
</ul>


<h2>WKWebView</h2>

<p>Only in iOS 8, comes with Nitro engine and bunch of other things.</p>

<p>http://nshipster.com/wkwebkit/</p>

<ul>
<li>https://github.com/Telerik-Verified-Plugins/WKWebView

<ul>
<li>probably the best stab at a working plugin</li>
<li>there are many issues (i would not use it at this point)</li>
<li>spins up an embedded server in order to:

<ul>
<li>bypass CORS</li>
<li>allow querying file:// protocol</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>It&#8217;s also only iOS8+; the plugin is smart enough to fall back to
UIWebView, but then you&#8217;ve just bumped an exponent on complexity, more
shit to test.</p>

<p>There is also Ludei Cocoonjs. But Iiiii couldn&#8217;t get it to work. :)</p>

<h2>Rx: switch</h2>

<p>When you already have an Observable of Observables, you can call
<code>.switch()</code> to produce an Observable that only emits values from the
most recent observable :) isn&#8217;t terminology fun.</p>

<p>So this:</p>

<pre><code>obs.map((val) =&gt; someObservableBasedOnVal)
   .switch();
</code></pre>

<p>is the same as</p>

<pre><code>obs.flatMapLatest((val) =&gt; someObservableBasedOnVal);
</code></pre>

<h2>Multiple cursors, DevTools and Vim</h2>

<p>Command click: multiple cursors</p>

<p>Cmd+D selects the next instance (effectively adding a multiple cursor).
Really a cursor is a selection with zero chars selected.</p>

<p>Just downloaded https://github.com/terryma/vim-multiple-cursors</p>

<p>Ctrl-n: select next occurrence of hovered word</p>

<p>Ctrl-p: undo most recent selection</p>

<p>Ctrl-x: skip current selection</p>

<p>MultipleCursorsFind: optionally select range in v mode, then type a
regex to select them shits as multiple cursors.</p>

<p>NOTE: in visual mode, <code>o</code> swaps the cursor to the other side to let you
modify the selection from the other end.</p>

<h2>Why flatMapLatest always trips me up</h2>

<p>http://jsbin.com/nupafu/1/edit?html,js,console</p>

<pre><code>console.clear();

Rx.Observable.just(1)
  .takeUntil(Rx.Observable.timer(10))
  .doOnCompleted(() =&gt; console.log("doOnCompleted"))
  .flatMapLatest(() =&gt; {
    return Rx.Observable.timer(500);
  })
  .subscribe(() =&gt; {
    console.log("EVENT");
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });
</code></pre>

<p>Output:</p>

<pre><code>"doOnCompleted"
"EVENT"
"COMPLETE"
</code></pre>

<p>This sequence might seem obvious here but I ALWAYS make the mistake of
thinking that because there&#8217;s a takeUntil on the source observable,
that&#8217;ll somehow cause all subscribing observables to immediately
complete. NOPE. If that were the case, then promise chains wouldn&#8217;t work
since they&#8217;re just single value observables that complete after their
first value, and if completion force completed any subscribers then you
couldn&#8217;t have async chains of logic. Anyway.</p>

<p>So I guess that means you really need to gate at every potential side
effect via takeUntil? e.g.</p>

<p>http://jsbin.com/nupafu/1/edit?html,js,console</p>

<pre><code>Rx.Observable.interval(200)
  .takeUntil(Rx.Observable.timer(250))
  .do(() =&gt; console.log("start"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("one"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("two"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("three"))
  .subscribe(() =&gt; {
    console.log("EVENT");
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });
</code></pre>

<p>Output:</p>

<pre><code>"start"
"one"
"two"
"three"
"EVENT"
"COMPLETE"
</code></pre>

<p>I guess I could dispose the sub, but then no onCompletes get fired
(and it&#8217;s also just bad style).</p>

<pre><code>console.clear();

var sub = Rx.Observable.interval(200)
  .takeUntil(Rx.Observable.timer(250))
  .do(() =&gt; console.log("start"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("one"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("two"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("three"))
  .subscribe(() =&gt; {
    console.log("EVENT");
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });

setTimeout(() =&gt; {
  sub.dispose();
}, 250);
</code></pre>

<p>Output:</p>

<pre><code>"start"
</code></pre>

<p>WHOA if I do onCompleted, then it skips all the shit in the middle
and still runs the completion handler!</p>

<p>http://jsbin.com/nupafu/4/edit</p>

<pre><code>console.clear();

var sub = Rx.Observable.interval(200)
  .takeUntil(Rx.Observable.timer(250))
  .do(() =&gt; console.log("start"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("one"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("two"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("three"))
  .subscribe(() =&gt; {
    console.log("EVENT");
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });

setTimeout(() =&gt; {
  sub.onCompleted();
}, 250);
</code></pre>

<p>Output:</p>

<pre><code>"start"
"COMPLETE"
</code></pre>

<p>Question: is there a way to construct your observables, without
resorting to chaining takeUntil&#8217;s before every side-effect, such that
some onComplete along the way skips everyone else&#8217;s?</p>

<p>http://jsbin.com/nupafu/6/edit</p>

<pre><code>console.clear();
var o = Rx.Observable.interval(200)
  .do(() =&gt; console.log("start"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("one"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("two"))
  .flatMapLatest(() =&gt; { return Rx.Observable.timer(500); })
  .do(() =&gt; console.log("three"));

o.merge(Rx.Observable.timer(250).map(false))
  .subscribe(function(v) {
    console.log("EVENT " + v);
    if (v === false) {
      this.onCompleted();
    }
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });

"start"
"EVENT false"
"COMPLETE"
"start"
"start"
"start"
"start"
"start"
"start"
"start"
"start"
"start"
...
</code></pre>

<p>Why? Does <code>this.onCompleted()</code> not kill the current subscription?</p>

<p>This works:</p>

<pre><code>var sub = o.merge(Rx.Observable.timer(250).map(false))
  .subscribe(function(v) {
    if (v === false) {
      sub.onCompleted();
    }
  }, null,
  () =&gt; {
    console.log("COMPLETE");
  });
</code></pre>

<p>Apparently sub !== this. sub is an auto-detach observer, this is an
anonymous observer. Some rxjs internals I don&#8217;t wanna go into right now.</p>

<p>Maybe there&#8217;s a merge first operator that&#8217;ll work here.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/amb.md</p>

<p><code>amb</code> is close, but once a value is produced from the flatMapChain, then
the terminating observable is ignored. I want something that stops on
the first completed thing.</p>

<p>Note that <code>amb</code> has <a href="http://www.randomhacks.net/2005/10/11/amb-operator/">roots in Lisp</a>.
The base functionality in RxJS I guess can be used to approximate
something like</p>

<p>Oh man, I might be a HUGE idiot&#8230; I JUST NEED TO FUCKING PUT THE
TAKEUNTIL AT THE END OMG</p>

<h2>I&#8217;m waiting</h2>

<p>http://i.imgur.com/4ETXzun.webm</p>

<h2>Observable.using</h2>

<p>Resource/disposable + observable = using</p>

<pre><code>Rx.Observable.
  using(
    function () { return openFile('temp.txt', 'w+'); },
    function (fd) {
      return Rx.Observable.range(0, 10000)
        .map(function (v) { return Buffer(v); })
        .flatMap(function (buffer) {
          return appendAsync(fd, buffer);
        });
    }
  )
  .subscribe();
</code></pre>

<p><code>using</code> makes it clear what the resource/disposable. Otherwise you might
mix the two awkwardly in the body of the fn passed to
<code>Observable.create</code>.</p>

<h2>Rx grammar</h2>

<p>Observable sequences have the following grammar:</p>

<pre><code>onNext* (onCompleted|onError)?
</code></pre>

<p>0 or more <code>onNext</code>s followed by an optional <code>onCompleted</code> OR <code>onError</code>.
Infinite sequences or disposed sequences might never see <code>onCompleted</code>
or <code>onError</code>.</p>

<h2>Observable.defer vs Observable.create</h2>

<p>Defer wraps another underlying observable in a factory function and
guarantees that each subscription to the outer observable gets a fresh
subscription to a totally newly-generated inner observable&#8230; but how is
this different from cold observables in general?</p>

<p>Well before I say that, lemme just say <code>defer</code> is a useful pattern for
when you want to kick off a sequence but don&#8217;t really know which
observable to start with; a lame attempt to do this is via</p>

<pre><code>Rx.Observable.just()
  .flatMap(() =&gt; {
    if (wat) {
      return oneObservable;
    } else {
      return anotherObservable;
    }
  })
</code></pre>

<p>This could more clearly be written as</p>

<pre><code>Rx.Observable.defer(() =&gt; {
  if (wat) {
    return oneObservable;
  } else {
    return anotherObservable;
  }
});
</code></pre>

<p>But hey, observables are cold&#8230; how is this different than writing</p>

<pre><code>var obs = wat ? oneObservable : anotherObservable;
return obs; // someone will subscribe to it
</code></pre>

<p>The difference is the decision as to which observable to use is set once
and for all for all future subscribers. HORRIBLE ENGRISH MR MATCHNEER.
In other words: either all subscribers get oneObservable or they get
anotherObservable. If you wanted to <em>defer</em> that decision until each
subscription, that&#8217;s when you use defer.</p>

<p>So why not just use a factory function without using <code>defer</code>, e.g.</p>

<pre><code>function getObservable() {
  var obs = wat ? oneObservable : anotherObservable;
}

// then anyone who wants to subscribe:
getObservable().subscribe();
getObservable().subscribe();
getObservable().subscribe();
</code></pre>

<p>These all get fresh observables. But then if you did</p>

<pre><code>var obs = getObservable();
obs.subscribe();
obs.subscribe();
obs.subscribe();
</code></pre>

<p>then these would all get the same observable decided by the single  call
to getObservable.</p>

<p>TL;DR, Rx is REALLY HARD. You have seemingly simple primitives of
observers and observables (saying nothing of that
almost-namespace-collision), but the way scalar things become vectors,
merged back into scalars, and not just at the events level but in the
primitives themselves, and how things are hot and cold. Jesus Christ.</p>

<h2>iOS Permissions</h2>

<ul>
<li>iOS7

<ul>
<li>no camera permissions</li>
<li>location permissions, but doesn&#8217;t distinguish b/w foreground/background</li>
<li>once denied, permissions dialog won&#8217;t show up</li>
</ul>
</li>
<li>iOS8

<ul>
<li>permissions for audio and video, separately</li>
<li>location

<ul>
<li>global location shutdown in addition to</li>
<li>app-specific:

<ul>
<li>authorized for &#8220;When in use&#8221;</li>
<li>authorized for background</li>
<li>denied</li>
</ul>
</li>
<li>if you change permissions

<ul>
<li>app will NOT restart</li>
<li>if you&#8217;re disabling geolocation, when you come back
into the app, you won&#8217;t get an error code about lack</li>
</ul>
</li>
</ul>
</li>
<li>for all permissions:

<ul>
<li>once denied, permissions dialog won&#8217;t show up

<ul>
<li>You can open Settings via settings url w some instructions
telling user to reset</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Today I learn top]]></title>
    <link href="http://machty.github.com/blog/2015/03/19/today-i-learn-top/"/>
    <updated>2015-03-19T09:18:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/03/19/today-i-learn-top</id>
    <content type="html"><![CDATA[<h2>top</h2>

<p>PR is priority, which is dynamic; a running process will get less and
less priority over time. NI is nice value; the fixed value that adds to
priority.</p>

<h2>Ruby mem</h2>

<p>http://samsaffron.com/archive/2014/04/08/ruby-2-1-garbage-collection-ready-for-production</p>

<ul>
<li>Ruby tracks malloc&#8217;s</li>
<li>classically, every <code>RUBY_GC_MALLOC_LIMIT</code> bytes,</li>
</ul>


<p>Heaps</p>

<ul>
<li>Ruby maintains heaps of RVALUES.</li>
<li>RVALUES are c union structs, variable size depending on x64, x32, etc,
that are low level representations of ruby objects</li>
<li>require &#8216;objspace&#8217; lets you access ObjectSpace, which exposes the
linked list of free Ruby objects.</li>
<li>RVALUES are collected and reused; mallocs only happen when you expand
beyong the RVALUE list.</li>
</ul>


<p>GC minor/major sweeps:</p>

<p>Flow is this:</p>

<ul>
<li><p><code>Object.allocate</code> (in the course of calling <code>new</code>)</p>

<ul>
<li>gimme a free RVALUE

<ul>
<li>if no free RVALUES, do a sweep</li>
<li>figure out along the way if it needs to be a major sweep</li>
<li>blah blah blah i don&#8217;t want to keep doing this</li>
</ul>
</li>
</ul>
</li>
<li><p>major sweep: run when malloc limit is hit (used to be 8MB, now it&#8217;s a
moving target)</p>

<ul>
<li>so you can malloc a bunch of times but once you hit malloc limit
it&#8217;s time for a major GC</li>
</ul>
</li>
<li>minor: run whenever heap slots run out

<ul>
<li>presumably, if this doesn&#8217;t free up enough mem, a malloc needs to
happen? or maybe a malloc always happens, and the minor sweep frees
up things for a future allocation attempts? either seem fine.</li>
</ul>
</li>
</ul>


<p>http://samsaffron.com/archive/2013/11/22/demystifying-the-ruby-gc</p>

<!--more-->


<h2>Over-arching question: returning memory to OS</h2>

<p>If you malloc a ton, will freeing it return it back to the OS?</p>

<p>Answer: prooooobably not. Alloc&#8217;d mem almost certainly won&#8217;t be returned
until process termination.</p>

<p>Why?</p>

<ul>
<li>malloc maintains an internal linked list of free data regions</li>
<li>when it runs out of this list, it syscalls <code>sbrk</code> to get more memory
from the OS</li>
<li>it uses this new region of memory to add new free data regions</li>
<li>you can&#8217;t return memory back to OS (with negative <code>sbrk</code>) unless none
of that region on the fringe is being used</li>
</ul>


<p>You could potentially use <code>mmap</code> to alloc a random page to some memory
mapped region, and it wouldn&#8217;t clash with the shared malloc linked list,
hence it&#8217;s easier to know after some mem intensive process is done with
the mapped region that it can be freed. But this is kind of uncommon.
And the point&#8217;s moot for Ruby which doesn&#8217;t really expose this
functionality for you.</p>

<p>So basically, most processes will grow and grow and grow and hopefully
plateau at some max mem usage, but won&#8217;t return mem to OS until
termination. Ruby processes fall into that category.</p>

<h2>Stripe idempotent requests</h2>

<p>https://stripe.com/docs/api?lang=curl#idempotent_requests</p>

<p>Awesome.</p>

<p>One gotcha: the same response is returned even if you change the params
you pass it (it doesn&#8217;t even seem to do any sort of validation of the
params; bogus charge tokens, currency type, etc, are all igored if it
can match idempotent id to a previous response).</p>

<h2>Postgres 9.4 jsonb and Rails 4.2</h2>

<p>http://robertbeene.com/rails-4-2-and-postgresql-9-4/</p>

<p>This is awesome. At the time of writing Heroku supports pg 9.3 out of
the box but has 9.4 in beta.</p>

<h2>Apple push notifications</h2>

<p>How does it work? Does it drain batteries? What about NAT?</p>

<p>From this <a href="https://support.apple.com/en-us/HT203609">bug/issue/report</a>:</p>

<ul>
<li>APNS prefers cellular connections to deliver push notifications</li>
<li>only if cell connection fails will it fall back to wifi</li>
<li>wifi is less likely to work due to firewalls blocking ports:

<ul>
<li>5223: default port (cell and wifi) to receive PNs from service</li>
<li>443: wifi-only fall back (because firewalls less likely to block SSL port)</li>
</ul>
</li>
</ul>


<p>http://android.stackexchange.com/a/32116/99197</p>

<p>So:</p>

<ul>
<li>push services use keep-alives</li>
<li>a keep alive is like a duplicate ACK pack w 0 data and has no effect
but to keep NAT caches alive.</li>
<li>probably at ~10m intervals to undercut NAT timeouts</li>
<li>NATs are variable depending on the network but 10m minimum on TCP
seems safe.</li>
<li>keep-alives will wake up the radio; all TCP reads must wake up the
radio, but this is inexpensive given that it&#8217;s every 10 min, shared by
entire OS.</li>
<li>NATs are more aggressive on UDP since UDP has no concept of a closed
connection; TCP is more forgivable since it at least tells you when
a connection is closed and hence NATs can be cleared.</li>
</ul>


<h2>MVCC</h2>

<p>Multi-version concurrency control</p>

<ul>
<li>reads see a snapshot of data, which may or may not be the latest</li>
<li>writes write the data elsewhere, mark old data as obsolete</li>
<li>reads hence don&#8217;t block writes, writes don&#8217;t block reads</li>
<li>but transaction commits can fail</li>
</ul>


<p>MVCC generally provides both a consistent/simple programming and
reasonably level of efficiency. In some cases a traditional locking
model might behave better to avoid retry hell.</p>

<p>SQL standard implements four levels of transaction isolation. The most
strict is <em>serializable</em>: given a set of serializable transactions,
any concurrent execution of this set produces the exact same result
as if the transactions were executed serially (one at a time, no
time overlap).</p>

<p>Example of serializable sets of transactions:</p>

<ul>
<li>all transactions are read-only (a bunch of SELECTs)</li>
<li>there is no overlap between what is read / written</li>
</ul>


<p>Other transaction levels are defined in terms of the following phenomena
that take place when transactions start to affect each other:</p>

<ul>
<li>dirty read: read another uncommitted trx&#8217;s written data</li>
<li>non-repeatable read: a second read within the same transaction
produces different results because another trx has committed
a write to that same data</li>
<li>phantom read: the set of (themselves-unchanged) rows returned from a
search query changes within a trx because some other since-committed
trx&#8217;s write affected the query, e.g. you&#8217;re querying <code>people</code> table
based on some dynamic criteria of another table, and while nothing&#8217;s
changed about the <code>people</code> table, the other table changed, resulting
in a second identical query returning different results

<ul>
<li><a href="http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Phantom_reads">actually this example is way better</a>:
your selection criteria is static, and a committed write from
another trx puts it into that selection criteria</li>
<li>worth noting that this might only be possible for INSERTs performed
by other trx&#8217;s; UPDATEs impacting a query between writes I think
would fall under non-repeatable read protection</li>
<li><em>Serializable</em> isolation means that the SELECT queries would
essentially lock out matching ranges, even on INSERTs.</li>
</ul>
</li>
</ul>


<p>Given the above-defined phenomena, the other three isolation levels (in
addition to <em>Serializable</em>) are:</p>

<ul>
<li><em>read uncommitted</em>: where the following are possible

<ul>
<li>dirty read</li>
<li>non-repeatable read</li>
<li>phantom read</li>
<li>Distinguishing characteristic: it can read the writes of
another uncommitted transaction</li>
</ul>
</li>
<li><em>read committed</em>:

<ul>
<li>non-repeatable read</li>
<li>phantom read</li>
<li>Distinguishing characteristic: if other transaction commits writes
between this trx&#8217;s reads, the reads might produce different results,
but uncommitted writes will never impact this trx&#8217;s reads.</li>
</ul>
</li>
<li><em>repeatable read</em>:

<ul>
<li>phantom read</li>
</ul>
</li>
</ul>


<p>Corner case:</p>

<ul>
<li><code>SELECT * FROM users WHERE age BETWEEN 10 AND 20;</code></li>
<li>other trx: write and commit user age 25</li>
<li><code>SELECT * FROM users WHERE age BETWEEN 10 AND 30;</code></li>
</ul>


<p>If the new user shows up in the second select, is it:</p>

<ul>
<li><code>serializable</code>?

<ul>
<li>Answer: I think YES. Since the data has been fully committed by the
time the second SELECT is performed, all <em>Serializable</em> guarantees
are maintained. Technically speaking, the range lock hasn&#8217;t been
acquired yet on the second INSERT.</li>
</ul>
</li>
</ul>


<h2>Isolation levels in postgres</h2>

<ul>
<li>isolation levels can be set per-transaction</li>
<li>default isolation level can be set via <code>SET SESSION CHARACTERISTICS</code>.</li>
<li>default level is <code>read committed</code>.</li>
<li>isolation levels only apply to what the current transaction can see of
other transactions, rather than isolating the effects of this
transaction from being seeable from other transactions.

<ul>
<li>metaphor: everyone chooses their own transaction goggles; they
choose what light is let in</li>
</ul>
</li>
<li>SERIALIZABLE is the only method that&#8217;ll throw an error (only in trx&#8217;s
marked as serializable) in cases where phenomenon are produced that
couldn&#8217;t have occurred in a one-at-a-time, serial setting.

<ul>
<li>so the other isolation modes just limit the kind of data they see
(and probably stress the engine in different ways depending on
how many locks/snapshots are in place) but won&#8217;t fire errors</li>
</ul>
</li>
</ul>


<p>So when does locking / blocking occur?</p>

<p>Answer: during conflicting writes.</p>

<ul>
<li>Read Committed:

<ul>
<li>selection criteria (selecting the rows to update) is same as SELECT,
in that it&#8217;ll only see rows committed before start time</li>
<li>but if, mid query, another uncommitted transaction writes to a given
row, locking will occur

<ul>
<li>if other trx commits, re-check search criteria and perform update
based on latest criteria</li>
<li>if other trx rolls back, ignore the write and proceed</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>So you still have read isolation between uncommitted trx&#8217;s, but writes
still &#8220;see&#8221; that uncommitted trx&#8217;s have been writing, and THAT&#8217;s when
locking occurs.</p>

<p>In such a case, two update queries might update sets of data
differently; if this is desired to be prevented, use SERIALIZABLE,
which&#8217;ll error if this case is detected.</p>

<p>By definition, then, a <code>serialization failure</code> rollback cannot happen if
there are <code>&lt;= 1</code> SERIALIZATION transactions.  WRONG WRONG WRONG. They
can happen for repeatable read!!!! See below!</p>

<blockquote><p>Because of the above rule, it is possible for an updating command to see an inconsistent snapshot: it can see the effects of concurrent updating commands on the same rows it is trying to update, but it does not see effects of those commands on other rows in the database. This behavior makes Read Committed mode unsuitable for commands that involve complex search conditions; however, it is just right for simpler cases. For example, consider updating bank balances with transactions like:</p></blockquote>

<pre><code>BEGIN;
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 12345;
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 7534;
COMMIT;
</code></pre>

<p>This is fine and safe even if some other trx updates acctnum 12345, but
more complex cases might troll:</p>

<h2>Repeatable reads also can yield serialization failure!</h2>

<blockquote><p>Applications using this level must be prepared to retry transactions due to serialization failures.</p></blockquote>

<p>If a first updater commits and changes/deletes the row, then ROLLBACK
occurs. &#8220;ERROR: could not serialize access due to concurrent update&#8221;.</p>

<p>In this case, the transaction should be retried. The second round will
see the most up to date info (unless more concurrent writes occur, in
which case the transaction might be retried).</p>

<p>So this is super rigorous (and increasingly expensive), but it is still
possible to miss out on some newly added data that now matches a
selection set, and some other corner cases. Only SERIALIZABLE can
prevent these.</p>

<p>These are some excellent, clear, tests from Rails that elucidate things.</p>

<p>https://github.com/rails/rails/blob/master/activerecord/test/cases/transaction_isolation_test.rb#L39</p>

<h2>Serialization gotcha</h2>

<p>I was trying to test serialization isolation to get it to error out as
expected w the following code (in a rake task):</p>

<pre><code>class P3 &lt; ActiveRecord::Base
  self.table_name = 'purchases'
end

Purchase.establish_connection
P3.establish_connection

Purchase.transaction(isolation: :serializable) do
  Purchase.last.update(last_activity_at: DateTime.now)
  P3.transaction(isolation: :serializable) do
    # Hangs here
    P3.last.update(last_activity_at: DateTime.now)
  end
  Purchase.last.update(last_activity_at: DateTime.now-5.seconds)
end
</code></pre>

<p>Of note:</p>

<p>The separate class pointing to the same table is necessary so that
the same postgres connection/session isn&#8217;t reused/shared (connections
on ActiveRecord classes are shared by default w
<code>ActiveRecord::Base.connection</code>, but you can give each ActiveRecord
class its own database connection, or point it to a separate
database, etc, via <code>establish_connection</code>. If you didn&#8217;t do this, the
above code would error out saying either you can&#8217;t nest transactions
or that you can set isolation level when joining a parent
transaction. Only MS-SQL supports true nested transactions, hence the
rails default of nested transactions using the same database
connection is to join them into a single transaction. Weird Shit.</p>

<p>Anyway, I ran the above code and it hanged within Postgres on
<code># Hangs here</code>. I was expecting a serialization error to fire at that
point (and theoretically it probably could and probably still be
consistent with the SQL standards on serializable transactions), but
postgres will actually block on that nested write while it waits for the
outer transaction to commit before it&#8217;ll detect the error and fire, but
since Ruby is blocked on that inner write, the outer block never runs to
completion, hence a deadlock. Note this wouldn&#8217;t happen under normal
circumstances but is only happning due to the hacky way I&#8217;m testing this
thing.</p>

<p>So anyway if you put it into threads you can start seeing these
exceptions throwing as expected:</p>

<pre><code>class P3 &lt; ActiveRecord::Base
  self.table_name = 'purchases'
end

Purchase.establish_connection
P3.establish_connection

t1 = Thread.new {
  loop {
    begin
      Purchase.transaction(isolation: :serializable) do
        Purchase.last.update(last_activity_at: DateTime.now-5.seconds)
      end
    rescue ActiveRecord::StatementInvalid =&gt; e
      raise e unless e.original_exception.is_a?(PG::TRSerializationFailure)
      retry
    end
    puts "t1 SUCCESS\n"
  }
}

t2 = Thread.new {
  loop {
    begin
      P3.transaction(isolation: :serializable) do
        P3.last.update(last_activity_at: DateTime.now)
      end
    rescue ActiveRecord::StatementInvalid =&gt; e
      raise e unless e.original_exception.is_a?(PG::TRSerializationFailure)
      retry
    end
    puts "t2 SUCCESS\n"
  }
}
</code></pre>

<p>Of note: the <code>TRSerializationFailure</code> error is specific to the <code>pg</code> gem
and adapter, and Rails doesn&#8217;t raise adapter-specific exceptions but
instead wraps them in the general <code>ActiveRecord::StatementInvalid</code>
error which lets you access the original <code>TRSerializationFailure</code>
exception via <code>original_exception</code>.</p>

<h2>Timezones</h2>

<p>http://en.wikipedia.org/wiki/List_of_tz_database_time_zones</p>

<p>List of time zone information is maintained by IANA:
http://en.wikipedia.org/wiki/Tz_database</p>

<p>Text files are provided by IANA, then <code>zic</code> is used to compile time
zones info to binary and stored in <code>/usr/share/zoneinfo</code>, e.g.
<code>/usr/share/zoneinfo/America/New_York</code>.</p>

<p>This is how you can set a default timezone in Ruby (and Heroku, etc)</p>

<pre><code>ENV['TZ']="America/New_York"
Time.now # 2015-03-23 11:46:26 -0400
ENV['TZ']="America/Phoenix"
Time.now # 2015-03-23 08:48:03 -0700
</code></pre>

<p>Ultimately it just tries to resolve a TZ in <code>/usr/share/zoneinfo</code> :)</p>

<p>What&#8217;s the local timezone?</p>

<pre><code>$ ls -l /etc/localtime
# lrwxr-xr-x  1 root  wheel  36 Mar 12 02:47 /etc/localtime -&gt; /usr/share/zoneinfo/America/New_York
</code></pre>

<p>Pretty cool.</p>

<p>Even on Mac OS X you can change the timezone this way (such that System
Preferences > Date &amp; Time will immediately update, as will your clock).</p>

<pre><code>sudo ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post with the most]]></title>
    <link href="http://machty.github.com/blog/2015/02/21/post-with-the-most/"/>
    <updated>2015-02-21T16:33:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/21/post-with-the-most</id>
    <content type="html"><![CDATA[<h2>DI, Clojure Components</h2>

<p>https://www.youtube.com/watch?v=13cmHf_kt-Q</p>

<p>A component is an object (just like in OOP) that encapsulates some state
but really just tries to focus on behavior rather than the manipulation
of that internal state.</p>

<p>Types of Components:</p>

<ul>
<li><p>State Wrapper</p>

<ul>
<li>e.g. wrap a stateful connection to a database</li>
<li>e.g. open expensive connection object on create, kill on destroy

<ul>
<li><code>(defrecord DB [host conn])</code>

<ul>
<li>host and conn are meant to be private fields, but privacy
isn&#8217;t actually enforcible in clojure</li>
</ul>
</li>
<li>Public API

<ul>
<li><code>(defn query [db &amp; ...] (.doStatement (:conn db)))</code></li>
<li>these functions <em>do</em> access the conn and host fields; they&#8217;re
the &#8220;public methods&#8221;</li>
</ul>
</li>
<li>Constructor

<ul>
<li>You don&#8217;t have to just use (and maybe shouldn&#8217;t use?) the
default defrecord constructor (e.g. ->DB)</li>
<li>Instead you should expose more convenient constructors that
are themselves side-effect less but return the record.</li>
<li>e.g. <code>(defn db [host] (map-&gt;DB {:host host}))</code></li>
<li>NOTE: <code>map-&gt;RECORDNAME</code> is something declared for you by
the <code>defrecord</code> macro, specifically <code>(declare ~(symbol (str 'map-&gt; gname))</code></li>
<li>Again, no side effects&#8230; a constructor just produces an object,
but that object still needs to be kicked into gear in some way,
let&#8217;s say, via:</li>
</ul>
</li>
<li>Lifeycle Protocol

<ul>
<li>Side effects!</li>
</ul>
</li>
</ul>


<p>(defrecord DB [host conn]
  component/Lifecycle
  (start [this]</p>

<pre><code>(assoc this   ;; returns new thing!!! don't just sideeffect the obj
  :conn (Driver/connect host)))
</code></pre>

  (stop [this]

<pre><code>(.stop conn)
this)
</code></pre></li>
</ul>
</li>
<li><p>Service Wrapper</p>

<ul>
<li>a service like Email is initialized with, say, host and api-key,
but after that point, everyone just needs to pass args like
address and body to use it; that state is encapsulated.</li>
</ul>
</li>
<li><p>Domain Model</p>

<ul>
<li>some subset of functionality and represent as a component</li>
<li>as opposed to OOP where you&#8217;d have a Customer obj with both state
for a specific customer as well as methods to control behavior and
manipulate state, a <code>Customers</code> domain model is an aggregate of
behavioral operations.</li>
<li><p>behavioral dependencies are encapsulated together; a Customers
object depends on the db state wrapper and email service</p>

<p>(defrecord Customers [db email])</p>

<p>;; public api:
(defn notify [customers name message]
  (let [{:keys [db email]} customers</p>

<pre><code>    address (query db ... name)]
(send email address message)))
</code></pre></li>
</ul>
</li>
<li><p>Domain Model (cont.)</p>

<ul>
<li>fetches db and email dependencies from customers record&#8230;</li>
<li>&#8230; queries address from db</li>
<li>&#8230; and uses the email service to send it to the customer</li>
</ul>
</li>
<li><p>Constructing components</p>

<ul>
<li>make a <code>defn</code>, tell the name of the dependences with :keywords.</li>
</ul>
</li>
<li>Associative injection

<ul>
<li>a system (container in Ember) is just a map</li>
<li>if you want to stub dependencies, just assoc those stubs

<ul>
<li>weakness: if you base these test systems off the live one,
if you add another component to the live one, you have to
remember to stub it out (hence isolated containers)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Sample RxJsbin w testing</h2>

<p>http://jsbin.com/colora/31/edit</p>

<p>Good lord do they need help w docs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OMG I'm in California]]></title>
    <link href="http://machty.github.com/blog/2015/02/17/omg-calfornia/"/>
    <updated>2015-02-17T05:45:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/17/omg-calfornia</id>
    <content type="html"><![CDATA[<h2>Definitive Ubuntu folder hierarchy</h2>

<p>https://help.ubuntu.com/community/LinuxFilesystemTreeOverview</p>

<pre><code>/bin is a place for most commonly used terminal commands, like ls, mount, rm, etc.

/boot contains files needed to start up the system, including the Linux kernel, a RAM disk image and bootloader configuration files.

/dev contains all device files, which are not regular files but instead refer to various hardware devices on the system, including hard drives.

/etc contains system-global configuration files, which affect the system's behavior for all users.

/home home sweet home, this is the place for users' home directories.

/lib contains very important dynamic libraries and kernel modules

/media is intended as a mount point for external devices, such as hard drives or removable media (floppies, CDs, DVDs).

/mnt is also a place for mount points, but dedicated specifically to "temporarily mounted" devices, such as network filesystems.

/opt can be used to store addition software for your system, which is not handled by the package manager.

/proc is a virtual filesystem that provides a mechanism for kernel to send information to processes.

/root is the superuser's home directory, not in /home/ to allow for booting the system even if /home/ is not available.

/sbin contains important administrative commands that should generally only be employed by the superuser.

/srv can contain data directories of services such as HTTP (/srv/www/) or FTP.

/sys is a virtual filesystem that can be accessed to set or obtain information about the kernel's view of the system.

/tmp is a place for temporary files used by applications.

/usr contains the majority of user utilities and applications, and partly replicates the root directory structure, containing for instance, among others, /usr/bin/ and /usr/lib.

/var is dedicated variable data that potentially changes rapidly; a notable directory it contains is /var/log where system log files are kept.
</code></pre>

<h2>init.d vs init</h2>

<p><code>init.d</code> is old-school SystemV style, wherein you have executable
scripts in <code>/etc/init.d</code> folder which have case statements matching
<code>reload</code>, <code>start</code>, etc, and doing some behavior based on that.</p>

<p><code>/etc/init</code> houses the newer Upstart format largely adopted by Ubuntu,
and within that you have a bunch of <code>.conf</code> files for managing daemons.</p>

<p>init.d / SystemV:</p>

<pre><code>/etc/init.d/nginx restart
</code></pre>

<p>upstart</p>

<pre><code>restart nginx 
# looks up /etc/init/nginx.conf
</code></pre>

<h2>Apple Store Wonkery</h2>

<p>Failed to upload the app, many times, provisioning profile and
certificate shit due to know laptop. Final error within Application
Loader was due to ITMS-4088 error, and was solved when 1) built
everything with fresh certificates / prov profs under machty and 2)
deployed via the other email account which shall not be publicly named
because security.</p>

<h2>File Dialog slowness on 2011 MBP Yosemite</h2>

<p>Just upgraded my 2011 MBP (w SSD drive) to Yosemite and notice a bug
that every time a file dialog closes, regardless of the app, and
regardless of whether a file was chosen or the user cancels, there is a
~15s hanging spinner until it unfreezes. This happens:</p>

<ul>
<li>if the view mode is anything other than Icon mode (e.g. for any list view), AND</li>
<li>there are audio/video files in the folder (e.g. mp3, aiff, mov)</li>
</ul>


<p>If there&#8217;s text only files, or even pdfs or dmgs or other things with
icons, it&#8217;s fine, but one audio/visual</p>

<!--more-->


<h2>Refresh Open With menu</h2>

<pre><code>/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user 
</code></pre>

<p>http://www.tekrevue.com/tip/rebuild-launchservices-fix-duplicate-entries-os-xs-open-menu/</p>

<h2>Linux Groups Flush at Login</h2>

<p>http://superuser.com/a/275240</p>

<p>TLDR if you change <code>/etc/group</code>, changed users will need to re-login
to see those changes.</p>

<p>If it&#8217;s a daemon whose uid has changed group memberships, then you just
need to restart it, no need for system restart or anything like that.</p>

<h2>Git only tracks executable perms</h2>

<p>If you chmod changes to rw, git won&#8217;t notice, but if you change
executable perms, it will. Reason being git is distributable and
portable, and r/w perms don&#8217;t exist on all systems where as executables
generally do.</p>

<p>http://stackoverflow.com/questions/1071241/how-does-git-handle-folder-permission</p>

<h2>Sticky bit</h2>

<p>http://askubuntu.com/questions/432699/what-is-the-sticky-bit-t-permission-and-why-does-tmp-have-it</p>

<p>mnemonic: <code>/tmp</code> is the canonical sticky bit example, and sticky bit
shows up as <code>t</code>&#8230; <code>/tmp</code> <code>t</code> <code>/tmp</code> <code>t</code>.</p>

<p>It means, regardless of permissions, that only a files owner can delete
or rename a file.</p>

<h2>Postgres host-based auth</h2>

<p>Config for host-based authentication are in <code>pg_hba.conf</code></p>

<h2>Bash/shell script: default vals</h2>

<p>From ansible :</p>

<pre><code>PYTHONPATH=${PYTHONPATH-""}
</code></pre>

<p>This doesn&#8217;t make noise</p>

<pre><code>echo ${USER-`say wat`}
</code></pre>

<p>This doesck</p>

<pre><code>echo ${USERABSDUOASBD-`say wat`}
</code></pre>

<h2>perms stored on inode, duh</h2>

<p>So hard links can&#8217;t have separate permissions:</p>

<pre><code>$ :: ls -l
-rw-r--r--  2 machty  staff  0 Feb 11 06:08 a
-rw-r--r--  2 machty  staff  0 Feb 11 06:08 b

$ :: chmod 000 a
$ :: ls -l
----------  2 machty  staff  0 Feb 11 06:08 a
----------  2 machty  staff  0 Feb 11 06:08 b
</code></pre>

<h2>PXE, Cobbler</h2>

<p>PXE means Preboot Execution Environment, which uses UDP, DHCP, other
basic network stuff to boot a system pulling dynamic information /
images from some host.</p>

<p>Cobbler</p>

<p>http://www.cobblerd.org/about.html</p>

<h2><code>.dispose()</code> in Rx</h2>

<p>What has a dispose method?</p>

<p>Only observers (and subjects, which is an observer+observable).
Calling dispose on an observer immediately desubscribes any subscribers
and prevents the delivery of any additional messages, INCLUDING
termination messages.</p>

<p>Subscriptions also have <code>.dispose</code>.</p>

<p>Twist: a subscription IS an observer!</p>

<p>http://jsbin.com/zufeze/3/edit?js,console,output</p>

<p>TL;DR just like the <code>observer</code> passed to <code>Rx.Observable.create</code>, you can
call <code>.onNext</code> and <code>.onCompleted</code> to a subscription!!!!!</p>

<p>You push to observers/subscriptions. An observer is a subscription to a
stream of data. It expects notifications of additional values and
termination/error events.</p>

<h2><code>dematerialize</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var source = Rx.Observable
</span><span class='line'>    .from([
</span><span class='line'>        Rx.Notification.createOnNext(42),
</span><span class='line'>        Rx.Notification.createOnCompleted()
</span><span class='line'>    ])
</span><span class='line'>    .dematerialize();
</span><span class='line'>
</span><span class='line'>var subscription = source.subscribe(
</span><span class='line'>    function (x) {
</span><span class='line'>        console.log('Next: ' + x.toString());
</span><span class='line'>    },
</span><span class='line'>    function (err) {
</span><span class='line'>        console.log('Error: ' + err);
</span><span class='line'>    },
</span><span class='line'>    function () {
</span><span class='line'>        console.log('Completed');
</span><span class='line'>    });</span></code></pre></td></tr></table></div></figure>


<p>If <code>dematerialize</code> hadn&#8217;t been called here, you&#8217;d see
<code>Next: onCompleted</code> show up; dematerialize makes sure onErrors
and onCompleteds (available explicitly via <code>Rx.Notification</code>)
are treated as actual <code>onCompleted</code> and <code>onError</code> events rather
then <code>onNext</code> values.</p>

<p>The implementation is simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  observableProto.dematerialize = function () {
</span><span class='line'>        var source = this;
</span><span class='line'>            return new AnonymousObservable(function (o) {
</span><span class='line'>                    return source.subscribe(function (x) { return
</span><span class='line'>                    x.accept(o); }, function(e) { o.onError(e); },
</span><span class='line'>                    function () { o.onCompleted(); });
</span><span class='line'>                        }, this);
</span><span class='line'>              };</span></code></pre></td></tr></table></div></figure>


<p>Basically, <code>observer.accept</code> will look out for onCompletes and onErrors
and cause the recursion.</p>

<h3>Pausable/stubbable promises</h3>

<p>http://jsbin.com/jefawi/1/edit</p>

<p>TODO:</p>

<ul>
<li>finish example</li>
<li>stub the resolution of the promise, or replace the entire promise?</li>
<li>maybe we want a stubbableThen?</li>
</ul>


<p>You can make a promise stubbable via:</p>

<pre><code>new Promise.stubbable(function() {
}, requiredLabel);
</code></pre>

<p>this will give you a chance to complete override the resolver fn.</p>

<pre><code>someOtherPromise.then(..., ...);
</code></pre>

<p>you can stub in the middle of a chain via</p>

<pre><code>someOtherPromise.stubbable('label').then(..., ...);
</code></pre>

<p>this means the original promise will still run through</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I need ur luv]]></title>
    <link href="http://machty.github.com/blog/2015/02/04/i-need-ur-luv/"/>
    <updated>2015-02-04T05:45:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/04/i-need-ur-luv</id>
    <content type="html"><![CDATA[<h2>flatMapObserver</h2>

<p>Whereas flatMap merges the elements of the observable returned from the
mapping fn, flatMapObserver subscribes to each event of the incoming
observable via a similar API to observers, but the return of each fn is
an observable that gets merged/flatMapped.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmapobserver.md</p>

<p>NOTE: the observable returned from the onComplete handler does not
cause the generated stream to end; it&#8217;ll be merged with any (possibly
delayed) observables returned from onNext handler.</p>

<h2>State</h2>

<p>State a la Clojure/immutability separates value from
identity, value is a consistent concept over time, and once two values
are equal, they&#8217;re equal forever, because nothing is mutable.</p>

<p>So, what about app state where event handlers are set up? Say you&#8217;ve
done the functional/React-y thing and you have some leaf component that
fires an event into the ethos at some point in time, and you&#8217;ve fluxed
it into some event handler that <code>setState</code>s at the root level. This
event could happen after 10 seconds, 1000 seconds, or possibly
immediately. But if it&#8217;s immediately, is this fundamentally different
from a situation where things are <em>not</em> data down actions up? How is
this different from a two way binding with async settling?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watoozy]]></title>
    <link href="http://machty.github.com/blog/2015/01/26/watoozy/"/>
    <updated>2015-01-26T15:55:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/26/watoozy</id>
    <content type="html"><![CDATA[<h2>DAS</h2>

<p>&#8220;how and why to avoid nil&#8221;</p>

<p>I&#8217;d watched this before, but the last approach is most interesting:</p>

<ul>
<li>embrace immutability</li>
<li>embrace domain objects whose non-nullable properties are part of
their identity</li>
</ul>


<p>Other thoughts:</p>

<p>Block-less <code>it</code> rspec specs are considered pending; useful for writing
out a bunch of specifications at once and implementing them later.</p>

<p>&#8220;pushing complexity down&#8221;</p>

<p>When you&#8217;re writing a test whose behavior depends on dependencies (e.g.
MonthlyBilling class pushes the &#8220;who-to-charge&#8221; logic into the User
classes&#8217;s <code>charge</code> method), you&#8217;re writing a &#8220;systems test&#8221; /
integration test.</p>

<h2>Ebryn machtizzle</h2>

<p>Talking about the sideways problem</p>

<p>https://hackpad.com/Ebryn-Machty-Router-discussion-iRBXvKmKj5v</p>

<!--more-->


<h2>webkit-user-select screws input focusability</h2>

<p><code>use-select: none</code> disables selectability, which is often desirable in
mobile apps, hence:</p>

<pre><code>* {
  -webkit-user-select:none;
  user-select:none;
}
</code></pre>

<p>But on certain versions of iOS/Desktop Safari, it makes your inputs
unfocusable, so you fix with something ugly like:</p>

<pre><code>input[type="text"],
input[type="tel"],
input[type="email"],
input[type="user"],
input[type="password"],
input[type="search"] {
  -webkit-user-select: text;
  user-select: text;
}
</code></pre>

<h2>Banker&#8217;s rounding</h2>

<p>aka Round half to even</p>

<p>Round to nearest even neighbor when equidistant (5):</p>

<pre><code>$1.055 =&gt; $1.06
$1.045 =&gt; $1.04
</code></pre>

<p>It&#8217;s one of the main rounding algos for IEEE floating point.</p>

<h2>Rx Which to Use?</h2>

<p>Super useful.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/which-instance.md</p>

<h2>SSH dev ops respect</h2>

<p>Wanted a quick ssh script that a dev could use to deploy a wordpress
site. Really I just needed them to be able to log in and run a pull.</p>

<p>Solution:</p>

<ol>
<li>Use SSH Agent forwarding</li>
<li>Make the WP staging repo share the group of the remote user</li>
</ol>


<p>SSH Agent forwarding proxies your local SSH agent to the remote <code>sshd</code>,
so that remote <code>sshd</code> can use your local credentials to continue logging
into stuff. In this case, we wanted forwarding to grant access to the
GitHub repo we wanted to pull from.</p>

<h2>iOS: changing app permissions SIGKILLs them</h2>

<p>e.g. if you tell your user to grant previously-declined permissions by
going to Settings > Privacy > App and switch permissions, then you app
must restart. Makes sense I suppose.</p>

<h2>iOS: open Settings from app</h2>

<p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplication_Class/index.html#//apple_ref/c/data/UIApplicationOpenSettingsURLString">Only available in iOS 8+</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reekris]]></title>
    <link href="http://machty.github.com/blog/2015/01/13/reekris/"/>
    <updated>2015-01-13T17:06:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/13/reekris</id>
    <content type="html"><![CDATA[<h2>More on Rx state machines</h2>

<p>From https://github.com/logicalguess/rx-state-machine</p>

<pre><code>// Pattern:
// 1. start off with initial door state, 
// 2. scan the UI event stream with a initial door state and a
//    transforming function. The transforming function is the thing
//    that runs the UI event on the current state, and returns the next state.
//    In this case the transforming fn is `transition`.
events.scan(door, transition).map(doorStatus)
    .subscribe(function (value) {
        view.render(value);
    });
</code></pre>

<p>So what I want to do is expose an API where you can group related events
into states, possibly share events between states, get an actions stream,
and&#8230; somehow transition elsewhere after that?</p>

<pre><code>var state = {
  submitForm: function() {
    // this is just a normal callback handler, just like actions api
  },

  // but maybe if you decorate your handler in some way...
  $submitForm: function(stream) {
    // ... you get a stream of actions instead
    // What should this API look like? How to export another stream
    // or property? 
    // Goals:
    // - make it easy/possible to
    //   - derive flag/state from action progress
    //   - 
  }
};

&lt;form &gt;
  &lt;SubmitButton action='submitForm'&gt;
&lt;/form&gt;
</code></pre>

<h2>Harness</h2>

<p>I don&#8217;t think I&#8217;ve ever grokked the word &#8220;harness&#8221; in a computer science
context.</p>

<blockquote><p>a set of straps and fittings by which a horse or other draft animal is fastened to a cart, plow, etc., and is controlled by its driver.</p></blockquote>

<p>So, a horse harness, wrapped around a horse to control it. Or a
parachute harness that wraps around a person to levitate them. Or a
child-restraining harness.</p>

<pre><code>so in this case, it takes a compiled ember CLI app that can normally run by itself, adds some bootstrap code, and runs it in a different environment

wrapper is maybe a synonym

but with slightly different connotations

I think of a harness as "holding the software in place" so you can make modifications to it, then run it

whereas wrapper implies you're trying to hide the underlying software
</code></pre>

<p>So put the otherwise self-contained / self-sufficient software in a
harness so you can run a bunch of tests on it, run it in a different
environment.</p>

<!--more-->


<h2>BHO Butane Hash Oil</h2>

<p>http://www.reddit.com/r/CrappyDesign/comments/2sacxp/this_is_butane_fluid_why/</p>

<p>http://www.theweedblog.com/what-is-marijuana-butane-hash-oil-bho-and-is-it-safe/</p>

<p>You can push pure liquid butane through ground marijuana, which absorbs
the cannibinoids, and then the butane evaporates, leaving some extremely
rich THC honey.</p>

<h2>ClojureScript</h2>

<p>Came after Clojure, is a pretty faithful redesign of Clojure, targeting
JS runtime (way more faithful than the meaningless Java vs JavaScript).</p>

<p>Differences:</p>

<ul>
<li>ClojureScript internally builds on top of protocols; no type-based
dispatching like there is (internally) for Clojure/Java classes

<ul>
<li>side effect of this is that implementations for protocols can be
scattered all over the code; it doesn&#8217;t need to bloat the definition
of a polymorphic fn in one place where it doesn&#8217;t belong via
manual switch/type-based dispatching</li>
</ul>
</li>
</ul>


<p><code>-</code> in a method name is just another character in the name. Used for low
level cljs fns, has no special meaning (in the way that preceding <code>.</code>
does).</p>

<h2>Do nils still stuck in ClojureScript?</h2>

<p>Gary Bernhardt (and many, many others) have been vocal about the evil of
leaky <code>nil</code>s in your program. In Ruby it&#8217;s particularly rampant/evil
because <code>Hash#[]</code> just returns <code>nil</code> if the key isn&#8217;t present (hence
it&#8217;s a good practice to use <code>Hash#fetch</code> if you really expect the value
to be there, in, say, an options hash), and whatever that value is gets
passed around and it&#8217;s later on, far away from the original nil leak,
that you get a <code>NoMethodError</code> on <code>NilClass</code> because you had something
in your code that looks like:</p>

<pre><code>obj.meth
</code></pre>

<p>Clojure(Script) isn&#8217;t object oriented, so it&#8217;d be something like</p>

<pre><code>(some-fn obj)
</code></pre>

<p>and if you&#8217;re using protocols, you&#8217;d define <code>some-fn</code> as a function
(method?) of that protocol, and if you wanted to &#8220;guard&#8221; against nils,
you&#8217;d provide an implementation of that protocol for <code>nil</code>.</p>

<p>So there is one benefit over OO in this case which is that you can give
<code>nil</code> meaning in the protocol in question without having to stash a
duck-typed method on <code>NilClass</code> (and hope no one else clobbers it),
which means your code won&#8217;t throw an ugly exception in the case of
<code>(some-fn obj)</code>, when it would for <code>nil.meth</code>, but there&#8217;s still damage
done by a leaked nil: if it&#8217;s easy to produce a nil and have it
referenced elsewhere in your code at some later time, the fact that it&#8217;s
a class/datatype that you never expected means it&#8217;s a lot easier for
other expected datatypes to accidentally become nil, but your
compiler/runtime won&#8217;t raise a fuss about it because this universal nil
object implements your protocol. If you had an error in your code and
actually passed the wrong datatype to a protocol method (that didn&#8217;t
implement that datatype), you&#8217;d actually get a compiler error (which is
what you want).</p>

<p>TL;DR nil leaks still exist in Clojure(Script), they&#8217;re potentially less
damaging than in an OO setting because of protocols, but it&#8217;s still
problematic because of the universality of <code>nil</code> and the likeliness that
protocols will be implemented for <code>nil</code>, hiding the problem. It also
doesn&#8217;t help that <code>(seq empty-list)</code> returns <code>nil</code>, but I&#8217;d have to
think about this problem more to expand the scope of my criticism. :) :)
:)</p>

<p>Note: it&#8217;s also probably important to distinguish between
intentional/accidental nils: it&#8217;s already bad to intentionally
incorporate <code>nil</code>s into your software&#8217;s design, but accidentaly <code>nil</code>s
do to <code>#[]</code> is even worse.</p>

<p>Relevant David Nolen / Gary Bernhardt tweetoff:
https://twitter.com/swannodette/status/555548047837380608</p>

<h2>Ruby Enumerable#zip</h2>

<p>This was a nice pattern: I was looking for a way to combine two arrays
via some fn but couldn&#8217;t find it: the following seemed to work:</p>

<pre><code>expected.zip(actual).all? { |a,b| a.quantity == b.quantity &amp;&amp; a.scan_code == b.scan_code }
</code></pre>

<h2>KVO vs Immutable</h2>

<p>KVO is PLOP (Place Oriented Programming). Putting new values in the same
place that everyone&#8217;s referencing, clobbering any sort of history,
mutating &#8220;state&#8221;.</p>

<p>But the nice thing is if you change that value, everyone gets updated.
But the subscription model is KVO. There&#8217;s always a subscription model.
Publish by replacing the place.</p>

<p>Publishing immutable objects has different challenges. There&#8217;s no
&#8220;place&#8221;. Either there&#8217;s a stream of immutable values, or a setState. All
subscriptions must be one of those. React child components are
&#8220;subscribed&#8221; by nature of being, well, child components, and they get
notified by render/setState. Consumers of a stream.</p>

<p>So what about async on an immutable obj? You&#8217;d probably use a promise or
a stream, fire a publish event when it comes back. Just in the same way
you&#8217;d do for a synchronous immutable update. This is obvious shit.</p>

<h2>Clojure: rifle-oriented programming</h2>

<p>http://thinkrelevance.com/blog/2009/08/12/rifle-oriented-programming-with-clojure-2</p>

<p>TODO: read this</p>

<h2>CSP w JS generators:</h2>

<p>https://github.com/ubolonton/js-csp</p>

<p>What ClojureScript accomplishes with macros, this achieves with
generators. Hence it&#8217;s only in Chrome >= 28 (current version at time of
writing is 39) but it&#8217;s behind experimental flag, and Firefox >= 27.</p>

<h2>Slalom: Constraints, animations, touch interactions, etc</h2>

<p>http://iamralpht.github.io/constraints/</p>

<h2>Bitmapped vector tree</h2>

<p>https://www.youtube.com/watch?v=mS264h8KGwk&amp;feature=youtu.be</p>

<ul>
<li>random access</li>
<li>efficient push</li>
<li>based on Phil Bagwell&#8217;s mutable Hash Array Map trie</li>
<li>updates on a path only update that path. Everything else can get
shared.</li>
<li>branching factor; length of each segment. 32 is the empirically
derived Clojure default.

<ul>
<li>7 max hops before you reach the end of an array that you can keep in
memory</li>
</ul>
</li>
</ul>


<h2>Rx Begin and end</h2>

<p>I want to express &#8220;fire resize events while the app is running&#8221;. I guess
I&#8217;d have to create some observable that begins on app creation and ends
on app destruction&#8230; first stab:</p>

<pre><code>Rx.Observable.fromEvent(window, 'resize')
             .takeWhile(Rx.Observable.timer(2000))
             .forEach(function() {
    console.log("hello");
});
</code></pre>

<p>I&#8217;m getting some error because takeWhile expects a predicate. Maybe
takeUntil will do it?</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/takeuntil.md</p>

<p>HUZZAH: http://jsbin.com/colora/9/edit?html,js,console,output</p>

<p>Now I just need to create an observable&#8230;</p>

<h2>Rx Emberified</h2>

<p>Didn&#8217;t expect to see this in fromEvent code in the RxJS repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  if (!!root.Ember && typeof root.Ember.addListener === 'function') 
</span><span class='line'>    return fromEventPattern(
</span><span class='line'>      function (h) { Ember.addListener(element, eventName, h); },
</span><span class='line'>      function (h) { Ember.removeListener(element, eventName, h); },
</span><span class='line'>      selector);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>selectMany === flatMap</h2>

<p>nuff said. Why is selectMany a good name though?</p>

<h2>LINQ</h2>

<p>http://en.wikipedia.org/wiki/Language_Integrated_Query</p>

<p>It&#8217;s syntax introduced into .NET languages for querying lists,
relational databases, observables, etc. Meant to be used in conjunction
w Rx.</p>

<h2>mies cljs template</h2>

<p>https://github.com/swannodette/mies</p>

<pre><code>▾ out/
  ▾ cljs/
      core.cljs
      core.cljs.cache.edn
      core.js
      core.js.map
  ▾ clojure/
    ▾ browser/
        event.cljs
        event.cljs.cache.edn
        event.js
        event.js.map
        net.cljs
        net.cljs.cache.edn
        net.js
        net.js.map
        repl.cljs
        repl.cljs.cache.edn
        repl.js
        repl.js.map
  ▾ goog/
    ▾ array/
        array.js
    ▾ asserts/
        asserts.js
    ▾ async/
        delay.js
        nexttick.js
        run.js
    ▾ debug/
        debug.js
        entrypointregistry.js
        error.js
        logbuffer.js
        logger.js
        logrecord.js
    ▾ disposable/
        disposable.js
        idisposable.js
    ▾ dom/
        browserfeature.js
        dom.js
        nodetype.js
        safe.js
        tagname.js
        tags.js
    ▾ events/
        browserevent.js
        browserfeature.js
        event.js
        eventhandler.js
        eventid.js
        events.js
        eventtarget.js
        eventtype.js
        listenable.js
        listener.js
        listenermap.js
    ▾ functions/
        functions.js
    ▾ html/
        safehtml.js
        safestyle.js
        safeurl.js
    ▾ i18n/
        bidi.js
    ▾ iter/
        iter.js
    ▾ json/
        json.js
    ▾ labs/
      ▾ useragent/
          browser.js
          engine.js
          util.js
    ▾ log/
        log.js
    ▾ math/
        coordinate.js
        math.js
        size.js
    ▾ messaging/
        abstractchannel.js
        messagechannel.js
    ▾ mochikit/
      ▾ async/
          deferred.js
    ▾ net/
      ▾ xpc/
          crosspagechannel.js
          crosspagechannelrole.js
          directtransport.js
          frameelementmethodtransport.js
          iframepollingtransport.js
          iframerelaytransport.js
          nativemessagingtransport.js
          nixtransport.js
          transport.js
          xpc.js
        errorcode.js
        eventtype.js
        httpstatus.js
        wrapperxmlhttpfactory.js
        xhrio.js
        xhrlike.js
        xmlhttp.js
        xmlhttpfactory.js
    ▾ object/
        object.js
    ▾ promise/
        promise.js
        resolver.js
        thenable.js
    ▾ reflect/
        reflect.js
    ▾ string/
        const.js
        string.js
        stringbuffer.js
        typedstring.js
    ▾ structs/
        collection.js
        map.js
        set.js
        structs.js
    ▾ testing/
        watchers.js
    ▾ timer/
        timer.js
    ▾ uri/
        uri.js
        utils.js
    ▾ useragent/
        useragent.js
      base.js
      deps.js
  ▾ hello_world/
      core.cljs
      core.cljs.cache.edn
      core.js
      core.js.map
▸ scripts/
▸ src/
▾ target/
  ▾ cljsbuild-compiler-1/
    ▸ cljs/
    ▸ clojure/
    ▸ hello_world/
      constants_table.js
  hello_world.js
  hello_world.min.js
  index.html
  project.clj
  README.md
</code></pre>

<h2>Rx return vs of</h2>

<pre><code>Rx.Observable.of(1,2,3,4)
</code></pre>

<p>vs</p>

<pre><code>Rx.Observable.return(1)
// aliases
Rx.Observable.just(value, [scheduler])
Rx.Observable.returnValue(value, [scheduler])
</code></pre>

<p><code>of</code> accepts multiple values&#8230; return just does 1? Why does there n</p>

<h2>Windows, buffers</h2>

<pre><code>* @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
</code></pre>

<p>Basically, a buffer TODO TODO TODO</p>

<h2>Value vs identity</h2>

<p>In ClojureScript, something something TODO</p>

<p>Sharp distinction between value and identity. Identities are things like
refs or atoms and you have to deference them to get the value. You can
use <code>=</code> fn to test value equality, and once equal, ALWAYS equal, thanks
to immutability.</p>

<h2>Promise-aware Ember Chainwatchers implemented in Rx</h2>

<p>http://emberjs.jsbin.com/penuko/4/edit</p>

<h2>Elm lang</h2>

<p>FRP lang that compiles to JS.</p>

<p>http://elm-lang.org/Blog.elm</p>

<p>http://www.infoq.com/presentations/elm-reactive-programming</p>

<h2><code>-&gt;</code> vs <code>-&gt;&gt;</code></h2>

<p>The difference is where the rest of one expression gets passed into the
following form(s).</p>

<pre><code>(-&gt; 1
  (- 2))
-1
</code></pre>

<p>vs</p>

<pre><code>(-&gt;&gt; 
  (- 2))
1
</code></pre>

<h2>Cljsbin</h2>

<p>http://cljsfiddle.net/</p>

<h2>Chrome Script/Framework Blackboxing</h2>

<p>https://developer.chrome.com/devtools/docs/blackboxing</p>

<p>Seems pretty awesome. TL;DR: skip framework/minified code when you&#8217;re
stepping in/over/out of it. Especially useful for iteration/callbacks.</p>

<h2>Rx Event capture</h2>

<p>Goal: have something work like <code>window.alert()</code>, but animated and async,
and effortless.</p>

<p>Restrictions: literally everything needs to pass through (and get
buffered by Rx), except maybe mousemoves?</p>

<p>What are important stream windows?</p>

<ul>
<li>Views/Components

<ul>
<li>receive UI events when window is &#8220;active/focused/live&#8221;

<ul>
<li>e.g. NOT when view is animating</li>
<li>NOT when view is destroyed</li>
</ul>
</li>
</ul>
</li>
<li>Anything</li>
</ul>


<p>Realization: controller/store/websocket events probably don&#8217;t need to be
buffered/filtered in any way, given that 99% of the events you&#8217;d like to
block probably come from UI events. Exceptions to this rule? Perhaps
some instance where you have a <code>window.alert()-ish</code> thing and the pushed
websockets data can&#8217;t be acted upon until the alert is tapped. My head
hurts a lot. Quite a bit. Ah, what about timers within views/components?
What if they go off in the middle of a thing? They should kinda be
considered a UI event&#8230; maybe?</p>

<p>Idea: components are meant to have inputs and outputs. And then ideally
they have some logic within themselves that encapsulates some tricky bit
of UI. But there are problems with this:</p>

<ul>
<li>Should it really be up to a component to switch between clicks and
taps for desktop / mobile?</li>
<li>Should a UI event like a click even be considered as &#8220;originating&#8221;
from that component?</li>
</ul>


<p>It seems like we should make it possible to inject these UI event
dependencies somehow? jQuery is probably effed&#8230; but if you&#8217;re using
jQuery you&#8217;ve already lost.</p>

<ul>
<li>We can use Rx/bacon/FRP to provide these events?</li>
<li>Who are the gate keepers? Parent DOM? Parent components?</li>
<li>Can we still make DOM event delegation work?</li>
</ul>


<p>So I guess we do</p>

<h2>eventPhase</h2>

<p>https://developer.mozilla.org/en-US/docs/Web/API/event.eventPhase</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Event.NONE = 0
</span><span class='line'>Event.CAPTURING_PHASE = 1
</span><span class='line'>Event.AT_TARGET = 2
</span><span class='line'>Event.BUBBLING_PHASE = 3</span></code></pre></td></tr></table></div></figure>


<h2>React capture phase</h2>

<p>http://facebook.github.io/react/docs/events.html</p>

<p>React wraps native wrappers and provides a SyntheticEvent interface that
also does event delegation to keep things cheap. <code>nativeEvent</code> gives you
access to the (not-browser-unified) native event object.</p>

<p>You can also get capture-phase handlers to fire by adding <code>Capture</code> to
the name of the handler. Preeeetty clever I guess.</p>

<p>Still trying to find the cleverest way.</p>

<h2>Rx guidelines</h2>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/designguidelines/readme.md</p>

<h2>Rx 010101 series into windows</h2>

<p>http://jsbin.com/colora/15/edit</p>

<h2>oaijsd</h2>

<p>http://jsbin.com/sedeta/1/edit?html,js,output</p>

<h2>LayerVault</h2>

<p>git for design.</p>

<h2>Rx Schedulers</h2>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/schedulers.md</p>

<h2>Rx-ish integration in React</h2>

<p>TODO: research this</p>

<p>https://github.com/facebook/react/issues/2928</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A life of possibilities]]></title>
    <link href="http://machty.github.com/blog/2015/01/07/a-life-of-possibilities/"/>
    <updated>2015-01-07T14:07:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/07/a-life-of-possibilities</id>
    <content type="html"><![CDATA[<h2>More actions shit</h2>

<p>Scenario: mobile app, I have a back button, I don&#8217;t want it to cause
another transition if the app is in mid-transition.</p>

<p>Mid-transition means:</p>

<ul>
<li>data has already started loading for a target route, or</li>
<li>some animation is underway, e.g. liquid fire</li>
</ul>


<p>Present day Ember:</p>

<ul>
<li><code>willTransition</code> hook to check some &#8220;isTransitioning&#8221; state (which you
have to remember to properly set and unset (though ember could/should
probably provide this for you))</li>
<li>some other router reopen hook, override transitionTo behavior. Pretty
crappy.</li>
</ul>


<p>React w react-router:</p>

<pre><code>Router.run(routes, function (Handler) {
  // custom data-loading logic, construct your own chain of promises
  // ...
  // maybe use flatMapLatest so that you're only responding to the
  // most recent transition, and then eventually:
  // React.render(&lt;Handler/&gt;, document.body);

  // this could be modeled by a stream 
});
</code></pre>

<p>Hmm so I want to be able to push values into a stream (let&#8217;s call it raw
stream), but have it only come out the other side if some other&#8230;
stream? predicate? allows it.</p>

<h2>Rx/Bacon Diagrams</h2>

<ul>
<li>Bacon: <code>flatMapConcat</code> (or <code>flatMapWithConcurrencyLimit(1)</code>)</li>
<li>Rx: <code>concatAll</code></li>
</ul>


<p>Flatten, preserve order of previously started streams (buffers later streams)</p>

<pre><code>...{1}
......{2........3}
.........{}
............{4}
{...1..2........3.4}
</code></pre>

<ul>
<li>Bacon: <code>flatMap</code> (or <code>flatMapWithConcurrencyLimit(infinity)</code>)</li>
<li>Rx: <code>mergeAll</code></li>
</ul>


<p>Flatten, don&#8217;t preserve order (no buffering). (limiting concurrency
means buffering).</p>

<pre><code>...{1}
......{2........3}
.........{}
............{4}

produces
{...1..2.....4..3}
</code></pre>

<ul>
<li>Bacon: <code>flatMapLatest</code></li>
<li>Rx: <code>switchLatest</code></li>
</ul>


<p>Flatten, unsubscribe from previous streams, RIGHT when the new stream
begins, not on its first value!</p>

<pre><code>...{1}
......{2........3}
............{4}

produces
{...1..2.....4}
</code></pre>

<p>and</p>

<pre><code>...{1}
......{2........3}
............{.........4}

produces
{...1..2.....4}
</code></pre>

<h2>CircleCI uses ClojureScript/Om</h2>

<p>http://blog.circleci.com/local-state-global-concerns/</p>

<h2>MRR</h2>

<p>Monthly recurring revenue: a way to calculate monthly revenue based off
of multiple dissimilar subscription terms.</p>

<h2>Observable of 1 is a promise</h2>

<p>http://www.infoq.com/presentations/async-programming-netflix</p>

<p>Promises can&#8217;t be cancelled.</p>

<ul>
<li>Work is already being done (in flight)</li>
<li>No way to stop it</li>
</ul>


<p>Observables are lazy. You can build a giant nested logical chunk of
observable but nothing happens until, say, a <code>forEach</code> subscribes to the
result of an observable that all the internal logic kicks into place.
Not true for promises (unless someone implements a lazy thennable).</p>

<p>TODO: hot vs cold observables distinction? does this exist in bacon?</p>

<p>This is how the <code>retry</code> operator works&#8230; in the same way you can call
<code>forEach</code> N times on an observable and kick start all the internal
logic/event handlers, retry will internally do this until it gets a
non-error response.</p>

<p>This is unless promises, which have the <code>.then</code> operator:</p>

<ul>
<li>Regardless of whether you call <code>.then</code>, the promise logic has already started</li>
<li>Calling <code>.then</code> at the same time just subscribes to the single,
already running promise, and <code>.then</code> on an already resolved promise
just returns that.</li>
</ul>


<!--more-->


<h2>phone it in</h2>

<p>http://www.urbandictionary.com/define.php?term=phone+it+in</p>

<blockquote><p>Perform an act in a perfunctory, uncommitted fashion, as if it didn&#8217;t matter.</p>

<p>She sang the National Anthem, but she was just phoning it in as far as I could tell.</p></blockquote>

<h2>ENZ in Trojan ENZ</h2>

<p>https://answers.yahoo.com/question/index?qid=20070211111727AAnr6Kn</p>

<p>It refers to the reservoir tip at the end (ENZ = ends) to prevent fluids
from leaking from rubbing.</p>

<h2>Clojure: &#8220;classes&#8221; not coupled to namespace</h2>

<p>In Clojure, given you have, say, a Person record, you can extend Person
to two different protocols that have the same method name (so long as
those protocols are in two different namespaces. This is a nice because
in, say, Java, you might be implementing methods from N different
interfaces, yet (possibly unnecessarily) sharing the same private data
and other items on the same namespace.</p>

<h2>defrecord</h2>

<pre><code>(ns alex/wat)

(defprotocol ALEX (lol [a]))

(defrecord AlexThing [a b c]
  ALEX
  (lol [a] (println a)))
</code></pre>

<p>err clearly i&#8217;m doing something wrong&#8230; this is null pointer
exceptioning.</p>

<h2>can&#8217;t use recur and get polymorphism</h2>

<p>Unlikely to bite, but worth pointing out that whatever you pass as the
first arg to <code>recur</code> won&#8217;t dynamically dispatch, because <code>recur</code> is
really just a looping construct. I can&#8217;t see how this would actually
matter though? Maybe I don&#8217;t get it.</p>

<h2>ISeq, IPersistentStack</h2>

<p><code>I</code> stands for interface.</p>

<h2>Dynamic Dispatch</h2>

<p>Dynamic dispatch is the selection of which method to run in a
polymorphic setting. Which implementation of <code>foo</code> should run here?</p>

<pre><code>(foo thing)
</code></pre>

<p>From what I understand, Clojure will look for protocols that specify
<code>foo</code> and check if <code>thing</code> is part of that. If a protocol is found but
<code>thing</code> doesn&#8217;t implement it, then boom, but Clojure will also try and
find a multi-method. (TODO: figure out the order of resolution?)</p>

<p>Multimethods can be simple and dispatch on the type of some map
property, or it can run a more complicated functions to determine which
to run. I believe the difference between this and switch-on-type
inheritance is blah blah blah write this later.</p>

<h2>famo.us</h2>

<p>http://famo.us/university/</p>

<p>Baby&#8217;s first famous.</p>

<p>TODO: Engines, Contexts, and Surfaces.</p>

<p>Surfaces</p>

<ul>
<li>Seems to pos abs, 100% width and height by default; size actually
inherits from parent surface/context.</li>
</ul>


<p>State Modifiers</p>

<ul>
<li>seem to just wrap transform matrices</li>
</ul>


<p>http://devchat.tv/js-jabber/128-jsj-famo-us-with-steve-newcomb</p>

<ul>
<li>Rendering in the browser is faster than rendering in the browser

<ul>
<li>Multiplying matrices is CPU-bound</li>
<li>Browsers were meant to lay out text docs w links, etc., that&#8217;s
highly optimized</li>
<li>Layout engine optimized for matrix-based layouts; famo.us layout
engine &#8220;14x&#8221; faster than using CSS-based browser matrices. Why?
Because lots of browser layout stuff <em>isn&#8217;t</em> GPU stuff, but rather
the static text layout stuff that <em>is</em> highly optimized.</li>
</ul>
</li>
<li>Create the scene in JS

<ul>
<li>Post to DOM

<ul>
<li>used for context, text/titles</li>
</ul>
</li>
<li>Post to SVG</li>
<li>Post to WebGL

<ul>
<li>high end graphics</li>
</ul>
</li>
</ul>
</li>
<li>e.g. write in famo.us, use their render tree, render to each thing</li>
<li>vs ionic

<ul>
<li>ionic still relies on DOM</li>
<li>famo.us puts way more into JavaScript, render tree / physics engine
all lives in JS.</li>
<li>future-feasible to run ionic templates in famo.us</li>
</ul>
</li>
<li>rendering in famo.us

<ul>
<li>render the RenderTree</li>
<li>based on that, produce flattest dom possible

<ul>
<li>important to minimize DOM and manage it wisely, else reflow, frame
rate volatility</li>
</ul>
</li>
</ul>
</li>
<li>Physics Engines

<ul>
<li>Unreal / iOS</li>
<li>Native-feeling animations; prevent the feeling of html5</li>
</ul>
</li>
<li><p>Docker</p>

<ul>
<li>docker containers</li>
<li>containing a system, making it highly portable</li>
<li>famous wants a front-end container, e.g. write a carousel container,
implementations might swap as time goes on, fetching all the
libraries to present it happens automatically, etc.</li>
</ul>
</li>
<li><p>align</p>

<ul>
<li>sets anchor point on the element (defaults to upper left corner)</li>
</ul>
</li>
<li>origin

<ul>
<li>sets default 0,0 point that children will be inserted into.</li>
</ul>
</li>
</ul>


<h2>wtf is a graphics context</h2>

<p>Wtf is context is general. Is it unavoidable that this word be used all
the time?</p>

<p>https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_overview/dq_overview.html#//apple_ref/doc/uid/TP30001066-CH202-TPXREF131</p>

<p>It comes up in so many graphicsy shit. It kinda just means &#8220;where all
state is stored&#8221;.</p>

<p>You have an Engine, where all the API logic (and maybe hardware
interfacing logic) lives, and you have to feed it different contexts to
operate on.</p>

<p>Both Quartz and famo.us describe the context as a &#8220;drawing destination&#8221;;
in Quartz you could apply the same butterfly-drawing routines to both a
page that you want to print on, or a bitmap graphics context, or a
window context (obtained by your application from the window server).</p>

<h2>Opqaue Data Type</h2>

<p>A data type whose interface is incompletely specified, and only
internal, private fns/methods have access to its internals. e.g. the
Quartz 2D graphics context is an opaque data type; you don&#8217;t/can&#8217;t care
what its internals are but you know you have to supply it to all API
calls (or like OpenGL you might be able to swap out the current graphics
context).</p>

<p>Usually the context includes the canvas that you&#8217;re drawing to, current
fill color, depth of field settings, etc.</p>

<h2>Rx Marbles</h2>

<p>http://rxmarbles.com/</p>

<ul>
<li>sample: Use one stream to control the sample rate of another.</li>
<li>startWith: create a new stream that immediately emits a value</li>
<li>distinct: remember past values, prevent refires</li>
<li>distinctUntilChanged: pretty much just &#8220;uniq&#8221;? prevent duplicate
values in a row</li>
<li>findIndex: return the index of the stream</li>
<li>pausable: zip two stream, true/false values of one starts/stops the
flow of the other: HINT HINT HINT can totally use this for pausing
streams during animations / route transitions / any async shit!</li>
<li>pausableBuffered: remember/buffer the paused items, fire them once
&#8220;true&#8221; comes in!!!!!!!</li>
<li>skip/take: skips or takes the first N elements</li>
<li>skipLast/takeLast: skips or takes the last N elements of the stream;
is smart enough to start emitting values if the buffered size exceeds
N, rather than naively waiting for the stream to run to completeion</li>
<li>skipUntil: ignore shits until the thing comes in.</li>
</ul>


<h2>Reactive MVC</h2>

<p>http://futurice.com/blog/reactive-mvc-and-the-virtual-dom</p>

<ul>
<li>React inspired by reactive programming, ended up mix of interactive
and reactive patterns: TODO what is interactive?</li>
<li>If a change in <code>foo</code> affects <code>bar</code>, and <code>foo</code> is responsible for
telling <code>bar</code>, it&#8217;s interactive; reactive would be <code>bar</code> just
magically responding&#8230;</li>
<li>Interactive: &#8220;module X defines which others modules X affects&#8221;</li>
<li>Reactive: &#8220;module X defines which other modules affects X&#8221;

<ul>
<li>often implemented w EventEmitter (see below)</li>
</ul>
</li>
<li>Controllers are inherently interactive, so get rid of em</li>
<li>Models should export Observables, views should subscribe to model
events.</li>
<li>Fill the gap of controller:</li>
</ul>


<h2>EventEmitter</h2>

<pre><code>#!/usr/bin/env node

var EventEmitter = require('events').EventEmitter;

var ee = new EventEmitter();

ee.on('wattles', function(foo) {
  console.log("received some serious wattles", foo);
});

console.log("numlisteners:", ee.listeners('wattles').length)

setTimeout(function() {
  ee.emit('wattles', 123);
}, 2000);
</code></pre>

<h2>Kefir.js</h2>

<p>http://pozadi.github.io/kefir/</p>

<p>FRP JS lib based on Bacon and Rx but focused on high perf, low mem
usage.</p>

<p>Like Bacon, it distinguishes b/w Properties and EventStreams.</p>

<h2>Cycle.js</h2>

<p>https://github.com/staltz/cycle</p>

<p>This framework is based on the seminal blog
http://futurice.com/blog/reactive-mvc-and-the-virtual-dom</p>

<p>and these slides http://staltz.com/dont-react</p>

<h2>Ideas</h2>

<p>I believe Cycle.js has no concept of a component. The idea that even a
little business / stateful logic lives in the component riles that guy&#8217;s
feathers, but components are crucial for simplifying the mental model
and easily packaging / reusing things. Seems that nuts hasn&#8217;t been
cracked in Cycle.js yet.</p>

<p>UPDATE: components are custom elements in cycle.js
https://github.com/staltz/cycle/blob/master/src/custom-elements.js</p>

<p>(There&#8217;s also unanswered questions about minimizing use of globals,
dependency injection, etc.)</p>

<p>It also seems pretty bad that there&#8217;s lots of examples of reaching in
and grabbing the <code>data-wat-id</code> out of the event target.</p>

<p>So it still seems pretty good that the job of a component is to
translate DOM events into component domain events. A DayCellComponent
in a calendar should translate click/tap events&#8230;</p>

<h2>Taps/Clicks, who&#8217;s responsible?</h2>

<p>Is it up to a component to discern b/w a tap and a click? Some other way
of using input stream?</p>

<p>In Ember we could do something like override &#8220; to mean
different things in different contexts, tap vs click (which I use).</p>

<p>It&#8217;s pretty nice being able to do that; I guess in React you&#8217;d use
<code>withContext</code>?</p>

<p>This seems like a nice hookable thing for event delegation&#8230; oh wait it
already is in ember.</p>

<p>Maybe &#8220; should declare an input stream that you can hook into
n the component?</p>

<p>HERE IS a very concrete question I&#8217;d like to resolve:</p>

<p>Given:</p>

<ul>
<li>You have a list of items</li>
<li>Selecting an item expands an item</li>
<li>Only one item can be expanded at a time</li>
<li>In a desktop setting, &#8220;selections&#8221; happen via clicks, in a mobile
setting, &#8220;selections&#8221; happen via taps</li>
</ul>


<p>You&#8217;ll probably model this with:</p>

<ul>
<li>a ListComponent</li>
<li>ItemComponents</li>
</ul>


<p>My beef (and TODO list):</p>

<ul>
<li>Does it make sense for <code>ItemComponent</code>s to attach their own event
listeners?

<ul>
<li>What if they just got a stream of input? That means something
outside could:

<ul>
<li>decide whether taps or clicks were to be used for selection,
and child components would just receive a selectionEventStream
that they could respond to

<ul>
<li>Hmmm, but given the constraint</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Note that iOS let&#8217;s you suspend/resume touch interactions in general:
http://iosdevelopertips.com/event-handling/suspend-touch-events.html
But I think we want something more granular.</p>

<p>There seems to be a tug of war between re-render everything and
streamify everything. E.g. you diff the data and get per item stream
updates of isExpanded streams&#8230; so that you can re-render only those
items&#8230;? What&#8217;s the goal of this?</p>

<p>If you have virtual dom and re-render all the time, then when you do
want streams?</p>

<ul>
<li>Business logic, series of queries, async, and updating properties
along the way. Maybe UI isn&#8217;t much of a place for streams?
Unless I can show that there is UI not elegantly handled by virtual
DOM, I should drop trying to force streams into UI somehow&#8230;</li>
<li>It still seems like there&#8217;s a place for it though in app state in
general, particularly in actions management.

<ul>
<li>In particular, I never want to have to set some isLoading flag every
again. I should never have to check timerIds and cancel them ever
again. I should never have a bunch of transient properties every
again. Actions should jump start some process and you can listen to
their completion. Everything else: virtual dom (and virtual dom
can/should depend on these properties that you expose). Virtual DOM
state is explicit.</li>
</ul>
</li>
</ul>


<p>OK WE ARE GETTING CLOSE: handlebars/htmlbars templates have the benefit
of declaring loud and clear which properties are depended on for
rendering. If any of those properties change, it amounts to an implicit
setState. Otherwise there&#8217;s no need to re-render (this is all still
implying that KVO exists in Ember somehow).</p>

<pre><code>dismissStream = timer(2000).map(() =&gt; false)
newActionStreams = ... something that fires when a new event starts
// newActionStreams = filter(UIevents, () =&gt; actionIsUnderway???)
postActionMessageStream = race(dismissStream, newActionStreams)
</code></pre>

<p>OK OK OK so what I want is a way to express</p>

<ul>
<li>progression of time in a template</li>
<li>current values, certain flags, etc, without setting boolean properties</li>
</ul>


<p>Let&#8217;s say we have a stream of status on some complex multi-step async
process:</p>

<pre><code>observable = someUIEvent.flatMapLatest(some ajax with retries)
                        .followedBySomeOtherAsync
                        .followedBySomeOtherThing

// maybe...
observable = someUIEvent(someAjaxThing).flatMapLatest(some ajax with retries).state("stepOne")
                        .followedBySomeOtherAsync.state("stepTwo")
                        .followedBySomeOtherThing.state("stepThree")
</code></pre>

<p>There&#8217;s not really a nice mechanism for representing this in a
template without a lot of manual <code>.set</code>s. It&#8217;s like we want some kind of
switch statement?</p>

<pre><code>    &lt;h3&gt;Loading  items from server&lt;/h3&gt;

    &lt;p&gt;
      Here are all the step one things.
    &lt;/p&gt;

    &lt;h3&gt;Please select from the following options:&lt;/h3&gt;

    &lt;ul&gt;

        &lt;li &gt;&lt;/li&gt;

    &lt;/ul&gt;
</code></pre>

<p>Does this make sense? Maybe we just want / need a switch statement in
general. This would also have to work with LiquidFire as well&#8230;</p>

<p>But what the above demonstates is:</p>

<ul>
<li>scoped properties linked to progressive states within an
observable/promises</li>
<li>no global/manual flag management</li>
<li>no timer ids to set and reset</li>
</ul>


<p>TODO:</p>

<ul>
<li>Just have to find the sweet spot with plugging this stuff into ember
in a way people prefer.</li>
<li>How to you go back to a previous &#8220;state&#8221;? What is a &#8220;state&#8221;? How do
people normally model state machines in rx?</li>
</ul>


<p>https://github.com/logicalguess/rx-state-machine</p>

<h2>The silk road</h2>

<p>http://www.wired.com/2015/01/why-silk-road-trial-matters/</p>

<ul>
<li>Ross Ulbricht

<ul>
<li>aka Dread Pirate Roberts</li>
<li>accused of running silk road</li>
<li>accused of hiring hitmen for 2-6 killings, none which were carried out</li>
<li>defended by attorney Joshua Dratel, financed by a bitcoin mogul</li>
</ul>
</li>
<li>Silk Road

<ul>
<li>anonymized by bitcoin and Tor</li>
<li>copycat markets: Evolution and Agora</li>
</ul>
</li>
<li>Trial

<ul>
<li>Will highlight/expose vulnerabilities for other sites to learn from</li>
<li>Will highlight/set precedent of whether screenshots are admissible
for evidence</li>
</ul>
</li>
<li>Fourth amendment:

<ul>
<li>The Fourth Amendment (Amendment IV) to the United States Constitution is the part of the Bill of Rights that prohibits unreasonable searches and seizures and requires any warrant to be judicially sanctioned and supported by probable cause.</li>
<li>Warrantless searches apply</li>
<li>FBI pretty much admitted to hacking the site without warrant to
obtain IP, find dread pirate</li>
<li>FBI investigators likely to be questions, 4th amendment repeated again</li>
</ul>
</li>
<li>Linked in profile: https://www.linkedin.com/in/rossulbricht</li>
<li>Breaking Bad

<ul>
<li>Ulbricht first sold shrooms on silk road, then</li>
<li>expansion into anarchist community / drug market</li>
<li>hiring hitmen?</li>
</ul>
</li>
</ul>


<h2>React keys vs refs</h2>

<p>Clojure has a concept of refs (and similar concurrency primitives) to
add the concept of identity to a value that changes over time (given
that Clojure has immutable data types but still needs to synchronize
and share data b/w threads).</p>

<p>In React, you use keys to distinguish array values so that your
renders don&#8217;t do weird things; how would this work given immutable
datatypes?</p>

<ul>
<li>Well, if only the array changes but the items in that array are the
same, then you&#8217;re fine</li>
<li>But if, say, the selected item has modified, then the previous
reference is invalid/points to an older version of the thing</li>
</ul>


<p>Maybe there&#8217;s a sexy way we could handle this in ember&#8230; maintain a ref
to a changing value.</p>

<h2>Observables and Observables</h2>

<ul>
<li>Observable

<ul>
<li>changing values over time</li>
</ul>
</li>
<li>Observer

<ul>
<li>consumes observers</li>
</ul>
</li>
</ul>


<p>Observables don&#8217;t do anything on their own until they&#8217;re consumed in
some way. SO WEIRD. But the following doesn&#8217;t do anything&#8230;</p>

<pre><code>var obs = Rx.Observable.return('wat').do(function(a) {
    console.log("do", a);
});
</code></pre>

<p>until you add</p>

<pre><code>function K() {}
obs.forEach(K);
obs.forEach(K);
</code></pre>

<p>So what I&#8217;d like is a statemachine with its own stream events, w auto
desubscribe/dispose/etc</p>

<pre><code>var defaultState = {
};

var defaultState = {
};

var states = {
  defaultState: {
  },

  editingItem: function() {
    // TODO: define streams/actions for leaving this state
    // tapping another item leaves it....
  },

  savingItem: {
  }
};
</code></pre>

<h2>Bacon state machine</h2>

<p>http://jsbin.com/qihabo/2/edit?html,js,console,output</p>

<pre><code>Bacon.fromArray([1,2,3]).withStateMachine(0, function(sum, e) {
   if (e.hasValue()) {
       return [sum + e.value(), []];
   } else if (e.isEnd()) {
       return [sum, [new Bacon.Next(function() { return sum; }), e]];
   } else {
       alert("asd")
       return [sum, []];
   }
}).log();
</code></pre>

<p>TL;DR it&#8217;s a state machine only for computing the next value of stream,
it&#8217;s not some implementation of a state machine or anything like that.</p>

<p>Could be useful in the rare cases where you can&#8217;t represent what you
want in the form of other stream operators.</p>

<h2>Sequences of Coincidence</h2>

<p>http://www.introtorx.com/Content/v1.0.10621.0/17_SequencesOfCoincidence.html#SequencesOfCoincidence</p>

<p>I think this is what I&#8217;ve been looking for; handling actions differently
if they occur within the &#8220;window&#8221; of another event, e.g. &#8220;handle these
actions if they happen while a given route is active (and the router is
stable / not loading transitions)&#8221;.</p>

<p>Buffers are conceptually grouped with window operators:</p>

<p>It converts a stream of values into a stream of buffered arrays of
values, buffered according to time, or some buffer size, or whatever.
In other words buffer takes <code>IObservable&lt;T&gt;</code> and returns
<code>IObservable&lt;IList&lt;T&gt;&gt;</code>.</p>

<pre><code>source|-0-1-2-3-4-5-6-7-8-9|
result|-----0-----3-----6-9|
            1     4     7
            2     5     8
</code></pre>

<p>The analogy is that a window is open when Buffer receives first value,
and window closes when buffer&#8217;s full or time elapses.
Windows return <code>IObservable&lt;IObservable&lt;T&gt;&gt;</code></p>

<p>So the subscribe handler of a window passes you the observable, rather
than the already flattened List that Buffer would give to you.</p>

<p>So in rxjs: http://jsbin.com/colora/3/edit</p>

<pre><code>var source = Rx.Observable.timer(0, 50)
  .window(function () { return Rx.Observable.timer(125); })
  .take(4)
  .flatMap(function (x) { return x.toArray(); });

var subscription = source.subscribe(
  function (x) {
    console.log('Next: ' + x);
  },
  function (err) {
    console.log('Error: ' + err);
  },
  function () {
    console.log('Completed');
  });
</code></pre>

<p>produces</p>

<pre><code>"Next: 0,1,2"
"Next: 3,4,5"
"Next: 6,7"
"Next: 8,9,10"
</code></pre>

<p>Why 6,7? Because the initial timer w 50ms period never stops firing:</p>

<pre><code>starting timer: 0----50---100--150--200--250--300--350--400--450--500--550--600--650
close timer:    0-----------125----------250---------375----------500
window1:        0    1     2 |
window2:                        3    4   5|
window3:                                       6   7  |
window4:                                                 8   9  10|
</code></pre>

<p>The 50ms period never stops firing and it&#8217;s on the third iteration where
because of the relative late start of the next period timer firing after
the beginning of the 125ms close interval, it can only get 2 events in
before the stream closes.</p>

<p>SO WTF do I want to do with this: something about windows for
currently active route states? Does that make sense?</p>

<p>There&#8217;s apparently a version that lets you overlap windows&#8230; why would
this be useful? I don&#8217;t know! And it doesn&#8217;t seem like it&#8217;s implemented
in RxJS, but the idea is you provide an observable that fires when a
window should be opened, and a close observer that runs for each new
window, so if your close fires at a larger interval than opens happen,
then you&#8217;ll have overlapping streams, which I guess means, say, a &#8220;3&#8221; or
&#8220;4&#8221; might be fired on multiple streams sprung up.</p>

<h2>RxJs Joins</h2>

<p>Note that all of this is part of the <code>coincidence</code> lib of Rx.</p>

<p>Join operator joins too sequence; zip is kind of a join, but zip is based
on index, and join does sequences.</p>

<p>zip accepts</p>

<ul>
<li>a &#8220;left&#8221; observable: each value produced opens another window</li>
<li>a &#8220;right&#8221; observable: produces values that pair open with the values
of left, while left stream is still open.</li>
<li>a &#8220;left duration&#8221; fn: returns an observable whose first value or
closing will close the left-generated observable (note: it doesn&#8217;t
even matter what type the closing value/observable is)</li>
</ul>


<p>So &#8220;right&#8221; values that start after &#8220;left&#8221; values will still be joined
with cached, previously opened windows. e.g.</p>

<pre><code>L 0-1-2-3-4-5-
</code></pre>

<p>plus</p>

<pre><code>R --A---B---C-
</code></pre>

<p>produces</p>

<pre><code>0, A
1, A
0, B
1, B
2, B
3, B
0, C
1, C
2, C
3, C
4, C
5, C
</code></pre>

<p>Interesting:</p>

<blockquote><p>Now it seems fairly obvious that, if I immediately closed the window by returning Observable.Empty<Unit>, or perhaps Observable.Return(0), windows would never be opened thus no pairs would ever get produced. However, what could I do to make sure that these windows did not overlap- so that, once a second value was produced I would no longer see the first value? Well, if we returned the left sequence from the leftDurationSelector, that could do the trick. But wait, when we return the sequence left from the leftDurationSelector, it would try to create another subscription and that may introduce side effects. The quick answer to that is to Publish and RefCount the left sequence. If we do that, the results look more like this.</p></blockquote>

<p>In Rx the default is to always create a new subscription; it&#8217;s NOT like
a promise whereby a singleton promise has already started firing.
Solution: use Publish.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/publish.md</p>

<p>Publish allows for the sharing of subscriptions.</p>

<p>So my question is&#8230; does publishing on its own start its own
subscription? Naw, I think you need to call <code>connect</code> once you&#8217;ve added
all your subscribers.</p>

<p>http://jsbin.com/colora/6/edit</p>

<pre><code>var obs = Rx.Observable.return('wat').do(function(a) {
  console.log("do", a);
});

var p = obs.publish();

function K() {}
p.forEach(K);
p.forEach(K);gma


// uncomment this to actually fire side effects
//p.connect();
</code></pre>

<p>refCount is hard to describe&#8230;</p>

<p>http://stackoverflow.com/questions/7509503/how-can-i-create-an-rx-observable-which-stops-publishing-events-when-the-last-ob/7510245#7510245</p>

<p>Publish as in pub sub&#8230; you want to stop consuming resources once
everyone&#8217;s stopped subscribing?</p>

<p>http://www.zerobugbuild.com/?p=144</p>

<p>Publish creates a hot subscription, refCount makes it close when
subscribers are zero.</p>

<p>If you don&#8217;t do <code>refCount</code>, you have to do <code>connect</code>. If you don&#8217;t do
<code>connect</code> or <code>refCount</code>, I think the subscription never gets activated,
or something? I still don&#8217;t get it&#8230;</p>

<p>Anyway, back to join:</p>

<blockquote><p>The quick answer to that is to Publish and RefCount the left sequence. If we do that, the results look more like this:</p></blockquote>

<pre><code>left  |-0-1-2-3-4-5|
right |---A---B---C|
result|---1---3---5
          A   B   C
</code></pre>

<p>TL;DR once you start using right duration selector, you can implement
other operators.</p>

<p>TODO: watch
http://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-MinLINQ-The-Essence-of-LINQ</p>

<h2>console.log printf</h2>

<p>Saw this in Rx docs: https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/timer.md</p>

<pre><code>console.log("wat %s", 3);
</code></pre>

<p>Prints &#8220;wat 3&#8221; (but jsbin&#8217;s console.log override is not smart enough to
substitute).</p>
]]></content>
  </entry>
  
</feed>

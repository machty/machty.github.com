<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[machty's thoughtz]]></title>
  <link href="http://machty.github.com/atom.xml" rel="self"/>
  <link href="http://machty.github.com/"/>
  <updated>2015-03-23T16:12:44-04:00</updated>
  <id>http://machty.github.com/</id>
  <author>
    <name><![CDATA[Alex Matchneer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Today I learn top]]></title>
    <link href="http://machty.github.com/blog/2015/03/19/today-i-learn-top/"/>
    <updated>2015-03-19T09:18:00-04:00</updated>
    <id>http://machty.github.com/blog/2015/03/19/today-i-learn-top</id>
    <content type="html"><![CDATA[<h2>top</h2>

<p>PR is priority, which is dynamic; a running process will get less and
less priority over time. NI is nice value; the fixed value that adds to
priority.</p>

<h2>Ruby mem</h2>

<p>http://samsaffron.com/archive/2014/04/08/ruby-2-1-garbage-collection-ready-for-production</p>

<ul>
<li>Ruby tracks malloc&#8217;s</li>
<li>classically, every <code>RUBY_GC_MALLOC_LIMIT</code> bytes,</li>
</ul>


<p>Heaps</p>

<ul>
<li>Ruby maintains heaps of RVALUES.</li>
<li>RVALUES are c union structs, variable size depending on x64, x32, etc,
that are low level representations of ruby objects</li>
<li>require &#8216;objspace&#8217; lets you access ObjectSpace, which exposes the
linked list of free Ruby objects.</li>
<li>RVALUES are collected and reused; mallocs only happen when you expand
beyong the RVALUE list.</li>
</ul>


<p>GC minor/major sweeps:</p>

<p>Flow is this:</p>

<ul>
<li><p><code>Object.allocate</code> (in the course of calling <code>new</code>)</p>

<ul>
<li>gimme a free RVALUE

<ul>
<li>if no free RVALUES, do a sweep</li>
<li>figure out along the way if it needs to be a major sweep</li>
<li>blah blah blah i don&#8217;t want to keep doing this</li>
</ul>
</li>
</ul>
</li>
<li><p>major sweep: run when malloc limit is hit (used to be 8MB, now it&#8217;s a
moving target)</p>

<ul>
<li>so you can malloc a bunch of times but once you hit malloc limit
it&#8217;s time for a major GC</li>
</ul>
</li>
<li>minor: run whenever heap slots run out

<ul>
<li>presumably, if this doesn&#8217;t free up enough mem, a malloc needs to
happen? or maybe a malloc always happens, and the minor sweep frees
up things for a future allocation attempts? either seem fine.</li>
</ul>
</li>
</ul>


<p>http://samsaffron.com/archive/2013/11/22/demystifying-the-ruby-gc</p>

<!--more-->


<h2>Over-arching question: returning memory to OS</h2>

<p>If you malloc a ton, will freeing it return it back to the OS?</p>

<p>Answer: prooooobably not. Alloc&#8217;d mem almost certainly won&#8217;t be returned
until process termination.</p>

<p>Why?</p>

<ul>
<li>malloc maintains an internal linked list of free data regions</li>
<li>when it runs out of this list, it syscalls <code>sbrk</code> to get more memory
from the OS</li>
<li>it uses this new region of memory to add new free data regions</li>
<li>you can&#8217;t return memory back to OS (with negative <code>sbrk</code>) unless none
of that region on the fringe is being used</li>
</ul>


<p>You could potentially use <code>mmap</code> to alloc a random page to some memory
mapped region, and it wouldn&#8217;t clash with the shared malloc linked list,
hence it&#8217;s easier to know after some mem intensive process is done with
the mapped region that it can be freed. But this is kind of uncommon.
And the point&#8217;s moot for Ruby which doesn&#8217;t really expose this
functionality for you.</p>

<p>So basically, most processes will grow and grow and grow and hopefully
plateau at some max mem usage, but won&#8217;t return mem to OS until
termination. Ruby processes fall into that category.</p>

<h2>Stripe idempotent requests</h2>

<p>https://stripe.com/docs/api?lang=curl#idempotent_requests</p>

<p>Awesome.</p>

<p>One gotcha: the same response is returned even if you change the params
you pass it (it doesn&#8217;t even seem to do any sort of validation of the
params; bogus charge tokens, currency type, etc, are all igored if it
can match idempotent id to a previous response).</p>

<h2>Postgres 9.4 jsonb and Rails 4.2</h2>

<p>http://robertbeene.com/rails-4-2-and-postgresql-9-4/</p>

<p>This is awesome. At the time of writing Heroku supports pg 9.3 out of
the box but has 9.4 in beta.</p>

<h2>Apple push notifications</h2>

<p>How does it work? Does it drain batteries? What about NAT?</p>

<p>From this <a href="https://support.apple.com/en-us/HT203609">bug/issue/report</a>:</p>

<ul>
<li>APNS prefers cellular connections to deliver push notifications</li>
<li>only if cell connection fails will it fall back to wifi</li>
<li>wifi is less likely to work due to firewalls blocking ports:

<ul>
<li>5223: default port (cell and wifi) to receive PNs from service</li>
<li>443: wifi-only fall back (because firewalls less likely to block SSL port)</li>
</ul>
</li>
</ul>


<p>http://android.stackexchange.com/a/32116/99197</p>

<p>So:</p>

<ul>
<li>push services use keep-alives</li>
<li>a keep alive is like a duplicate ACK pack w 0 data and has no effect
but to keep NAT caches alive.</li>
<li>probably at ~10m intervals to undercut NAT timeouts</li>
<li>NATs are variable depending on the network but 10m minimum on TCP
seems safe.</li>
<li>keep-alives will wake up the radio; all TCP reads must wake up the
radio, but this is inexpensive given that it&#8217;s every 10 min, shared by
entire OS.</li>
<li>NATs are more aggressive on UDP since UDP has no concept of a closed
connection; TCP is more forgivable since it at least tells you when
a connection is closed and hence NATs can be cleared.</li>
</ul>


<h2>MVCC</h2>

<p>Multi-version concurrency control</p>

<ul>
<li>reads see a snapshot of data, which may or may not be the latest</li>
<li>writes write the data elsewhere, mark old data as obsolete</li>
<li>reads hence don&#8217;t block writes, writes don&#8217;t block reads</li>
<li>but transaction commits can fail</li>
</ul>


<p>MVCC generally provides both a consistent/simple programming and
reasonably level of efficiency. In some cases a traditional locking
model might behave better to avoid retry hell.</p>

<p>SQL standard implements four levels of transaction isolation. The most
strict is <em>serializable</em>: given a set of serializable transactions,
any concurrent execution of this set produces the exact same result
as if the transactions were executed serially (one at a time, no
time overlap).</p>

<p>Example of serializable sets of transactions:</p>

<ul>
<li>all transactions are read-only (a bunch of SELECTs)</li>
<li>there is no overlap between what is read / written</li>
</ul>


<p>Other transaction levels are defined in terms of the following phenomena
that take place when transactions start to affect each other:</p>

<ul>
<li>dirty read: read another uncommitted trx&#8217;s written data</li>
<li>non-repeatable read: a second read within the same transaction
produces different results because another trx has committed
a write to that same data</li>
<li>phantom read: the set of (themselves-unchanged) rows returned from a
search query changes within a trx because some other since-committed
trx&#8217;s write affected the query, e.g. you&#8217;re querying <code>people</code> table
based on some dynamic criteria of another table, and while nothing&#8217;s
changed about the <code>people</code> table, the other table changed, resulting
in a second identical query returning different results

<ul>
<li><a href="http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Phantom_reads">actually this example is way better</a>:
your selection criteria is static, and a committed write from
another trx puts it into that selection criteria</li>
<li>worth noting that this might only be possible for INSERTs performed
by other trx&#8217;s; UPDATEs impacting a query between writes I think
would fall under non-repeatable read protection</li>
<li><em>Serializable</em> isolation means that the SELECT queries would
essentially lock out matching ranges, even on INSERTs.</li>
</ul>
</li>
</ul>


<p>Given the above-defined phenomena, the other three isolation levels (in
addition to <em>Serializable</em>) are:</p>

<ul>
<li><em>read uncommitted</em>: where the following are possible

<ul>
<li>dirty read</li>
<li>non-repeatable read</li>
<li>phantom read</li>
<li>Distinguishing characteristic: it can read the writes of
another uncommitted transaction</li>
</ul>
</li>
<li><em>read committed</em>:

<ul>
<li>non-repeatable read</li>
<li>phantom read</li>
<li>Distinguishing characteristic: if other transaction commits writes
between this trx&#8217;s reads, the reads might produce different results,
but uncommitted writes will never impact this trx&#8217;s reads.</li>
</ul>
</li>
<li><em>repeatable read</em>:

<ul>
<li>phantom read</li>
</ul>
</li>
</ul>


<p>Corner case:</p>

<ul>
<li><code>SELECT * FROM users WHERE age BETWEEN 10 AND 20;</code></li>
<li>other trx: write and commit user age 25</li>
<li><code>SELECT * FROM users WHERE age BETWEEN 10 AND 30;</code></li>
</ul>


<p>If the new user shows up in the second select, is it:</p>

<ul>
<li><code>serializable</code>?

<ul>
<li>Answer: I think YES. Since the data has been fully committed by the
time the second SELECT is performed, all <em>Serializable</em> guarantees
are maintained. Technically speaking, the range lock hasn&#8217;t been
acquired yet on the second INSERT.</li>
</ul>
</li>
</ul>


<h2>Isolation levels in postgres</h2>

<ul>
<li>isolation levels can be set per-transaction</li>
<li>default isolation level can be set via <code>SET SESSION CHARACTERISTICS</code>.</li>
<li>default level is <code>read committed</code>.</li>
<li>isolation levels only apply to what the current transaction can see of
other transactions, rather than isolating the effects of this
transaction from being seeable from other transactions.

<ul>
<li>metaphor: everyone chooses their own transaction goggles; they
choose what light is let in</li>
</ul>
</li>
<li>SERIALIZABLE is the only method that&#8217;ll throw an error (only in trx&#8217;s
marked as serializable) in cases where phenomenon are produced that
couldn&#8217;t have occurred in a one-at-a-time, serial setting.

<ul>
<li>so the other isolation modes just limit the kind of data they see
(and probably stress the engine in different ways depending on
how many locks/snapshots are in place) but won&#8217;t fire errors</li>
</ul>
</li>
</ul>


<p>So when does locking / blocking occur?</p>

<p>Answer: during conflicting writes.</p>

<ul>
<li>Read Committed:

<ul>
<li>selection criteria (selecting the rows to update) is same as SELECT,
in that it&#8217;ll only see rows committed before start time</li>
<li>but if, mid query, another uncommitted transaction writes to a given
row, locking will occur

<ul>
<li>if other trx commits, re-check search criteria and perform update
based on latest criteria</li>
<li>if other trx rolls back, ignore the write and proceed</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>So you still have read isolation between uncommitted trx&#8217;s, but writes
still &#8220;see&#8221; that uncommitted trx&#8217;s have been writing, and THAT&#8217;s when
locking occurs.</p>

<p>In such a case, two update queries might update sets of data
differently; if this is desired to be prevented, use SERIALIZABLE,
which&#8217;ll error if this case is detected.</p>

<p>By definition, then, a <code>serialization failure</code> rollback cannot happen if
there are <code>&lt;= 1</code> SERIALIZATION transactions.  WRONG WRONG WRONG. They
can happen for repeatable read!!!! See below!</p>

<blockquote><p>Because of the above rule, it is possible for an updating command to see an inconsistent snapshot: it can see the effects of concurrent updating commands on the same rows it is trying to update, but it does not see effects of those commands on other rows in the database. This behavior makes Read Committed mode unsuitable for commands that involve complex search conditions; however, it is just right for simpler cases. For example, consider updating bank balances with transactions like:</p></blockquote>

<pre><code>BEGIN;
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 12345;
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 7534;
COMMIT;
</code></pre>

<p>This is fine and safe even if some other trx updates acctnum 12345, but
more complex cases might troll:</p>

<h2>Repeatable reads also can yield serialization failure!</h2>

<blockquote><p>Applications using this level must be prepared to retry transactions due to serialization failures.</p></blockquote>

<p>If a first updater commits and changes/deletes the row, then ROLLBACK
occurs. &#8220;ERROR: could not serialize access due to concurrent update&#8221;.</p>

<p>In this case, the transaction should be retried. The second round will
see the most up to date info (unless more concurrent writes occur, in
which case the transaction might be retried).</p>

<p>So this is super rigorous (and increasingly expensive), but it is still
possible to miss out on some newly added data that now matches a
selection set, and some other corner cases. Only SERIALIZABLE can
prevent these.</p>

<p>These are some excellent, clear, tests from Rails that elucidate things.</p>

<p>https://github.com/rails/rails/blob/master/activerecord/test/cases/transaction_isolation_test.rb#L39</p>

<h2>Serialization gotcha</h2>

<p>I was trying to test serialization isolation to get it to error out as
expected w the following code (in a rake task):</p>

<pre><code>class P3 &lt; ActiveRecord::Base
  self.table_name = 'purchases'
end

Purchase.establish_connection
P3.establish_connection

Purchase.transaction(isolation: :serializable) do
  Purchase.last.update(last_activity_at: DateTime.now)
  P3.transaction(isolation: :serializable) do
    # Hangs here
    P3.last.update(last_activity_at: DateTime.now)
  end
  Purchase.last.update(last_activity_at: DateTime.now-5.seconds)
end
</code></pre>

<p>Of note:</p>

<p>The separate class pointing to the same table is necessary so that
the same postgres connection/session isn&#8217;t reused/shared (connections
on ActiveRecord classes are shared by default w
<code>ActiveRecord::Base.connection</code>, but you can give each ActiveRecord
class its own database connection, or point it to a separate
database, etc, via <code>establish_connection</code>. If you didn&#8217;t do this, the
above code would error out saying either you can&#8217;t nest transactions
or that you can set isolation level when joining a parent
transaction. Only MS-SQL supports true nested transactions, hence the
rails default of nested transactions using the same database
connection is to join them into a single transaction. Weird Shit.</p>

<p>Anyway, I ran the above code and it hanged within Postgres on
<code># Hangs here</code>. I was expecting a serialization error to fire at that
point (and theoretically it probably could and probably still be
consistent with the SQL standards on serializable transactions), but
postgres will actually block on that nested write while it waits for the
outer transaction to commit before it&#8217;ll detect the error and fire, but
since Ruby is blocked on that inner write, the outer block never runs to
completion, hence a deadlock. Note this wouldn&#8217;t happen under normal
circumstances but is only happning due to the hacky way I&#8217;m testing this
thing.</p>

<p>So anyway if you put it into threads you can start seeing these
exceptions throwing as expected:</p>

<pre><code>class P3 &lt; ActiveRecord::Base
  self.table_name = 'purchases'
end

Purchase.establish_connection
P3.establish_connection

t1 = Thread.new {
  loop {
    begin
      Purchase.transaction(isolation: :serializable) do
        Purchase.last.update(last_activity_at: DateTime.now-5.seconds)
      end
    rescue ActiveRecord::StatementInvalid =&gt; e
      raise e unless e.original_exception.is_a?(PG::TRSerializationFailure)
      retry
    end
    puts "t1 SUCCESS\n"
  }
}

t2 = Thread.new {
  loop {
    begin
      P3.transaction(isolation: :serializable) do
        P3.last.update(last_activity_at: DateTime.now)
      end
    rescue ActiveRecord::StatementInvalid =&gt; e
      raise e unless e.original_exception.is_a?(PG::TRSerializationFailure)
      retry
    end
    puts "t2 SUCCESS\n"
  }
}
</code></pre>

<p>Of note: the <code>TRSerializationFailure</code> error is specific to the <code>pg</code> gem
and adapter, and Rails doesn&#8217;t raise adapter-specific exceptions but
instead wraps them in the general <code>ActiveRecord::StatementInvalid</code>
error which lets you access the original <code>TRSerializationFailure</code>
exception via <code>original_exception</code>.</p>

<h2>Timezones</h2>

<p>http://en.wikipedia.org/wiki/List_of_tz_database_time_zones</p>

<p>List of time zone information is maintained by IANA:
http://en.wikipedia.org/wiki/Tz_database</p>

<p>Text files are provided by IANA, then <code>zic</code> is used to compile time
zones info to binary and stored in <code>/usr/share/zoneinfo</code>, e.g.
<code>/usr/share/zoneinfo/America/New_York</code>.</p>

<p>This is how you can set a default timezone in Ruby (and Heroku, etc)</p>

<pre><code>ENV['TZ']="America/New_York"
Time.now # 2015-03-23 11:46:26 -0400
ENV['TZ']="America/Phoenix"
Time.now # 2015-03-23 08:48:03 -0700
</code></pre>

<p>Ultimately it just tries to resolve a TZ in <code>/usr/share/zoneinfo</code> :)</p>

<p>What&#8217;s the local timezone?</p>

<pre><code>$ ls -l /etc/localtime
# lrwxr-xr-x  1 root  wheel  36 Mar 12 02:47 /etc/localtime -&gt; /usr/share/zoneinfo/America/New_York
</code></pre>

<p>Pretty cool.</p>

<p>Even on Mac OS X you can change the timezone this way (such that System
Preferences > Date &amp; Time will immediately update, as will your clock).</p>

<pre><code>sudo ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post with the most]]></title>
    <link href="http://machty.github.com/blog/2015/02/21/post-with-the-most/"/>
    <updated>2015-02-21T16:33:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/21/post-with-the-most</id>
    <content type="html"><![CDATA[<h2>DI, Clojure Components</h2>

<p>https://www.youtube.com/watch?v=13cmHf_kt-Q</p>

<p>A component is an object (just like in OOP) that encapsulates some state
but really just tries to focus on behavior rather than the manipulation
of that internal state.</p>

<p>Types of Components:</p>

<ul>
<li><p>State Wrapper</p>

<ul>
<li>e.g. wrap a stateful connection to a database</li>
<li>e.g. open expensive connection object on create, kill on destroy

<ul>
<li><code>(defrecord DB [host conn])</code>

<ul>
<li>host and conn are meant to be private fields, but privacy
isn&#8217;t actually enforcible in clojure</li>
</ul>
</li>
<li>Public API

<ul>
<li><code>(defn query [db &amp; ...] (.doStatement (:conn db)))</code></li>
<li>these functions <em>do</em> access the conn and host fields; they&#8217;re
the &#8220;public methods&#8221;</li>
</ul>
</li>
<li>Constructor

<ul>
<li>You don&#8217;t have to just use (and maybe shouldn&#8217;t use?) the
default defrecord constructor (e.g. ->DB)</li>
<li>Instead you should expose more convenient constructors that
are themselves side-effect less but return the record.</li>
<li>e.g. <code>(defn db [host] (map-&gt;DB {:host host}))</code></li>
<li>NOTE: <code>map-&gt;RECORDNAME</code> is something declared for you by
the <code>defrecord</code> macro, specifically <code>(declare ~(symbol (str 'map-&gt; gname))</code></li>
<li>Again, no side effects&#8230; a constructor just produces an object,
but that object still needs to be kicked into gear in some way,
let&#8217;s say, via:</li>
</ul>
</li>
<li>Lifeycle Protocol

<ul>
<li>Side effects!</li>
</ul>
</li>
</ul>


<p>(defrecord DB [host conn]
  component/Lifecycle
  (start [this]</p>

<pre><code>(assoc this   ;; returns new thing!!! don't just sideeffect the obj
  :conn (Driver/connect host)))
</code></pre>

  (stop [this]

<pre><code>(.stop conn)
this)
</code></pre></li>
</ul>
</li>
<li><p>Service Wrapper</p>

<ul>
<li>a service like Email is initialized with, say, host and api-key,
but after that point, everyone just needs to pass args like
address and body to use it; that state is encapsulated.</li>
</ul>
</li>
<li><p>Domain Model</p>

<ul>
<li>some subset of functionality and represent as a component</li>
<li>as opposed to OOP where you&#8217;d have a Customer obj with both state
for a specific customer as well as methods to control behavior and
manipulate state, a <code>Customers</code> domain model is an aggregate of
behavioral operations.</li>
<li><p>behavioral dependencies are encapsulated together; a Customers
object depends on the db state wrapper and email service</p>

<p>(defrecord Customers [db email])</p>

<p>;; public api:
(defn notify [customers name message]
  (let [{:keys [db email]} customers</p>

<pre><code>    address (query db ... name)]
(send email address message)))
</code></pre></li>
</ul>
</li>
<li><p>Domain Model (cont.)</p>

<ul>
<li>fetches db and email dependencies from customers record&#8230;</li>
<li>&#8230; queries address from db</li>
<li>&#8230; and uses the email service to send it to the customer</li>
</ul>
</li>
<li><p>Constructing components</p>

<ul>
<li>make a <code>defn</code>, tell the name of the dependences with :keywords.</li>
</ul>
</li>
<li>Associative injection

<ul>
<li>a system (container in Ember) is just a map</li>
<li>if you want to stub dependencies, just assoc those stubs

<ul>
<li>weakness: if you base these test systems off the live one,
if you add another component to the live one, you have to
remember to stub it out (hence isolated containers)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Sample RxJsbin w testing</h2>

<p>http://jsbin.com/colora/31/edit</p>

<p>Good lord do they need help w docs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OMG I'm in California]]></title>
    <link href="http://machty.github.com/blog/2015/02/17/omg-calfornia/"/>
    <updated>2015-02-17T05:45:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/17/omg-calfornia</id>
    <content type="html"><![CDATA[<h2>Definitive Ubuntu folder hierarchy</h2>

<p>https://help.ubuntu.com/community/LinuxFilesystemTreeOverview</p>

<pre><code>/bin is a place for most commonly used terminal commands, like ls, mount, rm, etc.

/boot contains files needed to start up the system, including the Linux kernel, a RAM disk image and bootloader configuration files.

/dev contains all device files, which are not regular files but instead refer to various hardware devices on the system, including hard drives.

/etc contains system-global configuration files, which affect the system's behavior for all users.

/home home sweet home, this is the place for users' home directories.

/lib contains very important dynamic libraries and kernel modules

/media is intended as a mount point for external devices, such as hard drives or removable media (floppies, CDs, DVDs).

/mnt is also a place for mount points, but dedicated specifically to "temporarily mounted" devices, such as network filesystems.

/opt can be used to store addition software for your system, which is not handled by the package manager.

/proc is a virtual filesystem that provides a mechanism for kernel to send information to processes.

/root is the superuser's home directory, not in /home/ to allow for booting the system even if /home/ is not available.

/sbin contains important administrative commands that should generally only be employed by the superuser.

/srv can contain data directories of services such as HTTP (/srv/www/) or FTP.

/sys is a virtual filesystem that can be accessed to set or obtain information about the kernel's view of the system.

/tmp is a place for temporary files used by applications.

/usr contains the majority of user utilities and applications, and partly replicates the root directory structure, containing for instance, among others, /usr/bin/ and /usr/lib.

/var is dedicated variable data that potentially changes rapidly; a notable directory it contains is /var/log where system log files are kept.
</code></pre>

<h2>init.d vs init</h2>

<p><code>init.d</code> is old-school SystemV style, wherein you have executable
scripts in <code>/etc/init.d</code> folder which have case statements matching
<code>reload</code>, <code>start</code>, etc, and doing some behavior based on that.</p>

<p><code>/etc/init</code> houses the newer Upstart format largely adopted by Ubuntu,
and within that you have a bunch of <code>.conf</code> files for managing daemons.</p>

<p>init.d / SystemV:</p>

<pre><code>/etc/init.d/nginx restart
</code></pre>

<p>upstart</p>

<pre><code>restart nginx 
# looks up /etc/init/nginx.conf
</code></pre>

<h2>Apple Store Wonkery</h2>

<p>Failed to upload the app, many times, provisioning profile and
certificate shit due to know laptop. Final error within Application
Loader was due to ITMS-4088 error, and was solved when 1) built
everything with fresh certificates / prov profs under machty and 2)
deployed via the other email account which shall not be publicly named
because security.</p>

<h2>File Dialog slowness on 2011 MBP Yosemite</h2>

<p>Just upgraded my 2011 MBP (w SSD drive) to Yosemite and notice a bug
that every time a file dialog closes, regardless of the app, and
regardless of whether a file was chosen or the user cancels, there is a
~15s hanging spinner until it unfreezes. This happens:</p>

<ul>
<li>if the view mode is anything other than Icon mode (e.g. for any list view), AND</li>
<li>there are audio/video files in the folder (e.g. mp3, aiff, mov)</li>
</ul>


<p>If there&#8217;s text only files, or even pdfs or dmgs or other things with
icons, it&#8217;s fine, but one audio/visual</p>

<!--more-->


<h2>Refresh Open With menu</h2>

<pre><code>/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user 
</code></pre>

<p>http://www.tekrevue.com/tip/rebuild-launchservices-fix-duplicate-entries-os-xs-open-menu/</p>

<h2>Linux Groups Flush at Login</h2>

<p>http://superuser.com/a/275240</p>

<p>TLDR if you change <code>/etc/group</code>, changed users will need to re-login
to see those changes.</p>

<p>If it&#8217;s a daemon whose uid has changed group memberships, then you just
need to restart it, no need for system restart or anything like that.</p>

<h2>Git only tracks executable perms</h2>

<p>If you chmod changes to rw, git won&#8217;t notice, but if you change
executable perms, it will. Reason being git is distributable and
portable, and r/w perms don&#8217;t exist on all systems where as executables
generally do.</p>

<p>http://stackoverflow.com/questions/1071241/how-does-git-handle-folder-permission</p>

<h2>Sticky bit</h2>

<p>http://askubuntu.com/questions/432699/what-is-the-sticky-bit-t-permission-and-why-does-tmp-have-it</p>

<p>mnemonic: <code>/tmp</code> is the canonical sticky bit example, and sticky bit
shows up as <code>t</code>&#8230; <code>/tmp</code> <code>t</code> <code>/tmp</code> <code>t</code>.</p>

<p>It means, regardless of permissions, that only a files owner can delete
or rename a file.</p>

<h2>Postgres host-based auth</h2>

<p>Config for host-based authentication are in <code>pg_hba.conf</code></p>

<h2>Bash/shell script: default vals</h2>

<p>From ansible :</p>

<pre><code>PYTHONPATH=${PYTHONPATH-""}
</code></pre>

<p>This doesn&#8217;t make noise</p>

<pre><code>echo ${USER-`say wat`}
</code></pre>

<p>This doesck</p>

<pre><code>echo ${USERABSDUOASBD-`say wat`}
</code></pre>

<h2>perms stored on inode, duh</h2>

<p>So hard links can&#8217;t have separate permissions:</p>

<pre><code>$ :: ls -l
-rw-r--r--  2 machty  staff  0 Feb 11 06:08 a
-rw-r--r--  2 machty  staff  0 Feb 11 06:08 b

$ :: chmod 000 a
$ :: ls -l
----------  2 machty  staff  0 Feb 11 06:08 a
----------  2 machty  staff  0 Feb 11 06:08 b
</code></pre>

<h2>PXE, Cobbler</h2>

<p>PXE means Preboot Execution Environment, which uses UDP, DHCP, other
basic network stuff to boot a system pulling dynamic information /
images from some host.</p>

<p>Cobbler</p>

<p>http://www.cobblerd.org/about.html</p>

<h2><code>.dispose()</code> in Rx</h2>

<p>What has a dispose method?</p>

<p>Only observers (and subjects, which is an observer+observable).
Calling dispose on an observer immediately desubscribes any subscribers
and prevents the delivery of any additional messages, INCLUDING
termination messages.</p>

<p>Subscriptions also have <code>.dispose</code>.</p>

<p>Twist: a subscription IS an observer!</p>

<p>http://jsbin.com/zufeze/3/edit?js,console,output</p>

<p>TL;DR just like the <code>observer</code> passed to <code>Rx.Observable.create</code>, you can
call <code>.onNext</code> and <code>.onCompleted</code> to a subscription!!!!!</p>

<p>You push to observers/subscriptions. An observer is a subscription to a
stream of data. It expects notifications of additional values and
termination/error events.</p>

<h2><code>dematerialize</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var source = Rx.Observable
</span><span class='line'>    .from([
</span><span class='line'>        Rx.Notification.createOnNext(42),
</span><span class='line'>        Rx.Notification.createOnCompleted()
</span><span class='line'>    ])
</span><span class='line'>    .dematerialize();
</span><span class='line'>
</span><span class='line'>var subscription = source.subscribe(
</span><span class='line'>    function (x) {
</span><span class='line'>        console.log('Next: ' + x.toString());
</span><span class='line'>    },
</span><span class='line'>    function (err) {
</span><span class='line'>        console.log('Error: ' + err);
</span><span class='line'>    },
</span><span class='line'>    function () {
</span><span class='line'>        console.log('Completed');
</span><span class='line'>    });</span></code></pre></td></tr></table></div></figure>


<p>If <code>dematerialize</code> hadn&#8217;t been called here, you&#8217;d see
<code>Next: onCompleted</code> show up; dematerialize makes sure onErrors
and onCompleteds (available explicitly via <code>Rx.Notification</code>)
are treated as actual <code>onCompleted</code> and <code>onError</code> events rather
then <code>onNext</code> values.</p>

<p>The implementation is simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  observableProto.dematerialize = function () {
</span><span class='line'>        var source = this;
</span><span class='line'>            return new AnonymousObservable(function (o) {
</span><span class='line'>                    return source.subscribe(function (x) { return
</span><span class='line'>                    x.accept(o); }, function(e) { o.onError(e); },
</span><span class='line'>                    function () { o.onCompleted(); });
</span><span class='line'>                        }, this);
</span><span class='line'>              };</span></code></pre></td></tr></table></div></figure>


<p>Basically, <code>observer.accept</code> will look out for onCompletes and onErrors
and cause the recursion.</p>

<h3>Pausable/stubbable promises</h3>

<p>http://jsbin.com/jefawi/1/edit</p>

<p>TODO:</p>

<ul>
<li>finish example</li>
<li>stub the resolution of the promise, or replace the entire promise?</li>
<li>maybe we want a stubbableThen?</li>
</ul>


<p>You can make a promise stubbable via:</p>

<pre><code>new Promise.stubbable(function() {
}, requiredLabel);
</code></pre>

<p>this will give you a chance to complete override the resolver fn.</p>

<pre><code>someOtherPromise.then(..., ...);
</code></pre>

<p>you can stub in the middle of a chain via</p>

<pre><code>someOtherPromise.stubbable('label').then(..., ...);
</code></pre>

<p>this means the original promise will still run through</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I need ur luv]]></title>
    <link href="http://machty.github.com/blog/2015/02/04/i-need-ur-luv/"/>
    <updated>2015-02-04T05:45:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/02/04/i-need-ur-luv</id>
    <content type="html"><![CDATA[<h2>flatMapObserver</h2>

<p>Whereas flatMap merges the elements of the observable returned from the
mapping fn, flatMapObserver subscribes to each event of the incoming
observable via a similar API to observers, but the return of each fn is
an observable that gets merged/flatMapped.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmapobserver.md</p>

<p>NOTE: the observable returned from the onComplete handler does not
cause the generated stream to end; it&#8217;ll be merged with any (possibly
delayed) observables returned from onNext handler.</p>

<h2>State</h2>

<p>State a la Clojure/immutability separates value from
identity, value is a consistent concept over time, and once two values
are equal, they&#8217;re equal forever, because nothing is mutable.</p>

<p>So, what about app state where event handlers are set up? Say you&#8217;ve
done the functional/React-y thing and you have some leaf component that
fires an event into the ethos at some point in time, and you&#8217;ve fluxed
it into some event handler that <code>setState</code>s at the root level. This
event could happen after 10 seconds, 1000 seconds, or possibly
immediately. But if it&#8217;s immediately, is this fundamentally different
from a situation where things are <em>not</em> data down actions up? How is
this different from a two way binding with async settling?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watoozy]]></title>
    <link href="http://machty.github.com/blog/2015/01/26/watoozy/"/>
    <updated>2015-01-26T15:55:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/26/watoozy</id>
    <content type="html"><![CDATA[<h2>DAS</h2>

<p>&#8220;how and why to avoid nil&#8221;</p>

<p>I&#8217;d watched this before, but the last approach is most interesting:</p>

<ul>
<li>embrace immutability</li>
<li>embrace domain objects whose non-nullable properties are part of
their identity</li>
</ul>


<p>Other thoughts:</p>

<p>Block-less <code>it</code> rspec specs are considered pending; useful for writing
out a bunch of specifications at once and implementing them later.</p>

<p>&#8220;pushing complexity down&#8221;</p>

<p>When you&#8217;re writing a test whose behavior depends on dependencies (e.g.
MonthlyBilling class pushes the &#8220;who-to-charge&#8221; logic into the User
classes&#8217;s <code>charge</code> method), you&#8217;re writing a &#8220;systems test&#8221; /
integration test.</p>

<h2>Ebryn machtizzle</h2>

<p>Talking about the sideways problem</p>

<p>https://hackpad.com/Ebryn-Machty-Router-discussion-iRBXvKmKj5v</p>

<!--more-->


<h2>webkit-user-select screws input focusability</h2>

<p><code>use-select: none</code> disables selectability, which is often desirable in
mobile apps, hence:</p>

<pre><code>* {
  -webkit-user-select:none;
  user-select:none;
}
</code></pre>

<p>But on certain versions of iOS/Desktop Safari, it makes your inputs
unfocusable, so you fix with something ugly like:</p>

<pre><code>input[type="text"],
input[type="tel"],
input[type="email"],
input[type="user"],
input[type="password"],
input[type="search"] {
  -webkit-user-select: text;
  user-select: text;
}
</code></pre>

<h2>Banker&#8217;s rounding</h2>

<p>aka Round half to even</p>

<p>Round to nearest even neighbor when equidistant (5):</p>

<pre><code>$1.055 =&gt; $1.06
$1.045 =&gt; $1.04
</code></pre>

<p>It&#8217;s one of the main rounding algos for IEEE floating point.</p>

<h2>Rx Which to Use?</h2>

<p>Super useful.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/which-instance.md</p>

<h2>SSH dev ops respect</h2>

<p>Wanted a quick ssh script that a dev could use to deploy a wordpress
site. Really I just needed them to be able to log in and run a pull.</p>

<p>Solution:</p>

<ol>
<li>Use SSH Agent forwarding</li>
<li>Make the WP staging repo share the group of the remote user</li>
</ol>


<p>SSH Agent forwarding proxies your local SSH agent to the remote <code>sshd</code>,
so that remote <code>sshd</code> can use your local credentials to continue logging
into stuff. In this case, we wanted forwarding to grant access to the
GitHub repo we wanted to pull from.</p>

<h2>iOS: changing app permissions SIGKILLs them</h2>

<p>e.g. if you tell your user to grant previously-declined permissions by
going to Settings > Privacy > App and switch permissions, then you app
must restart. Makes sense I suppose.</p>

<h2>iOS: open Settings from app</h2>

<p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplication_Class/index.html#//apple_ref/c/data/UIApplicationOpenSettingsURLString">Only available in iOS 8+</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reekris]]></title>
    <link href="http://machty.github.com/blog/2015/01/13/reekris/"/>
    <updated>2015-01-13T17:06:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/13/reekris</id>
    <content type="html"><![CDATA[<h2>More on Rx state machines</h2>

<p>From https://github.com/logicalguess/rx-state-machine</p>

<pre><code>// Pattern:
// 1. start off with initial door state, 
// 2. scan the UI event stream with a initial door state and a
//    transforming function. The transforming function is the thing
//    that runs the UI event on the current state, and returns the next state.
//    In this case the transforming fn is `transition`.
events.scan(door, transition).map(doorStatus)
    .subscribe(function (value) {
        view.render(value);
    });
</code></pre>

<p>So what I want to do is expose an API where you can group related events
into states, possibly share events between states, get an actions stream,
and&#8230; somehow transition elsewhere after that?</p>

<pre><code>var state = {
  submitForm: function() {
    // this is just a normal callback handler, just like actions api
  },

  // but maybe if you decorate your handler in some way...
  $submitForm: function(stream) {
    // ... you get a stream of actions instead
    // What should this API look like? How to export another stream
    // or property? 
    // Goals:
    // - make it easy/possible to
    //   - derive flag/state from action progress
    //   - 
  }
};

&lt;form &gt;
  &lt;SubmitButton action='submitForm'&gt;
&lt;/form&gt;
</code></pre>

<h2>Harness</h2>

<p>I don&#8217;t think I&#8217;ve ever grokked the word &#8220;harness&#8221; in a computer science
context.</p>

<blockquote><p>a set of straps and fittings by which a horse or other draft animal is fastened to a cart, plow, etc., and is controlled by its driver.</p></blockquote>

<p>So, a horse harness, wrapped around a horse to control it. Or a
parachute harness that wraps around a person to levitate them. Or a
child-restraining harness.</p>

<pre><code>so in this case, it takes a compiled ember CLI app that can normally run by itself, adds some bootstrap code, and runs it in a different environment

wrapper is maybe a synonym

but with slightly different connotations

I think of a harness as "holding the software in place" so you can make modifications to it, then run it

whereas wrapper implies you're trying to hide the underlying software
</code></pre>

<p>So put the otherwise self-contained / self-sufficient software in a
harness so you can run a bunch of tests on it, run it in a different
environment.</p>

<!--more-->


<h2>BHO Butane Hash Oil</h2>

<p>http://www.reddit.com/r/CrappyDesign/comments/2sacxp/this_is_butane_fluid_why/</p>

<p>http://www.theweedblog.com/what-is-marijuana-butane-hash-oil-bho-and-is-it-safe/</p>

<p>You can push pure liquid butane through ground marijuana, which absorbs
the cannibinoids, and then the butane evaporates, leaving some extremely
rich THC honey.</p>

<h2>ClojureScript</h2>

<p>Came after Clojure, is a pretty faithful redesign of Clojure, targeting
JS runtime (way more faithful than the meaningless Java vs JavaScript).</p>

<p>Differences:</p>

<ul>
<li>ClojureScript internally builds on top of protocols; no type-based
dispatching like there is (internally) for Clojure/Java classes

<ul>
<li>side effect of this is that implementations for protocols can be
scattered all over the code; it doesn&#8217;t need to bloat the definition
of a polymorphic fn in one place where it doesn&#8217;t belong via
manual switch/type-based dispatching</li>
</ul>
</li>
</ul>


<p><code>-</code> in a method name is just another character in the name. Used for low
level cljs fns, has no special meaning (in the way that preceding <code>.</code>
does).</p>

<h2>Do nils still stuck in ClojureScript?</h2>

<p>Gary Bernhardt (and many, many others) have been vocal about the evil of
leaky <code>nil</code>s in your program. In Ruby it&#8217;s particularly rampant/evil
because <code>Hash#[]</code> just returns <code>nil</code> if the key isn&#8217;t present (hence
it&#8217;s a good practice to use <code>Hash#fetch</code> if you really expect the value
to be there, in, say, an options hash), and whatever that value is gets
passed around and it&#8217;s later on, far away from the original nil leak,
that you get a <code>NoMethodError</code> on <code>NilClass</code> because you had something
in your code that looks like:</p>

<pre><code>obj.meth
</code></pre>

<p>Clojure(Script) isn&#8217;t object oriented, so it&#8217;d be something like</p>

<pre><code>(some-fn obj)
</code></pre>

<p>and if you&#8217;re using protocols, you&#8217;d define <code>some-fn</code> as a function
(method?) of that protocol, and if you wanted to &#8220;guard&#8221; against nils,
you&#8217;d provide an implementation of that protocol for <code>nil</code>.</p>

<p>So there is one benefit over OO in this case which is that you can give
<code>nil</code> meaning in the protocol in question without having to stash a
duck-typed method on <code>NilClass</code> (and hope no one else clobbers it),
which means your code won&#8217;t throw an ugly exception in the case of
<code>(some-fn obj)</code>, when it would for <code>nil.meth</code>, but there&#8217;s still damage
done by a leaked nil: if it&#8217;s easy to produce a nil and have it
referenced elsewhere in your code at some later time, the fact that it&#8217;s
a class/datatype that you never expected means it&#8217;s a lot easier for
other expected datatypes to accidentally become nil, but your
compiler/runtime won&#8217;t raise a fuss about it because this universal nil
object implements your protocol. If you had an error in your code and
actually passed the wrong datatype to a protocol method (that didn&#8217;t
implement that datatype), you&#8217;d actually get a compiler error (which is
what you want).</p>

<p>TL;DR nil leaks still exist in Clojure(Script), they&#8217;re potentially less
damaging than in an OO setting because of protocols, but it&#8217;s still
problematic because of the universality of <code>nil</code> and the likeliness that
protocols will be implemented for <code>nil</code>, hiding the problem. It also
doesn&#8217;t help that <code>(seq empty-list)</code> returns <code>nil</code>, but I&#8217;d have to
think about this problem more to expand the scope of my criticism. :) :)
:)</p>

<p>Note: it&#8217;s also probably important to distinguish between
intentional/accidental nils: it&#8217;s already bad to intentionally
incorporate <code>nil</code>s into your software&#8217;s design, but accidentaly <code>nil</code>s
do to <code>#[]</code> is even worse.</p>

<p>Relevant David Nolen / Gary Bernhardt tweetoff:
https://twitter.com/swannodette/status/555548047837380608</p>

<h2>Ruby Enumerable#zip</h2>

<p>This was a nice pattern: I was looking for a way to combine two arrays
via some fn but couldn&#8217;t find it: the following seemed to work:</p>

<pre><code>expected.zip(actual).all? { |a,b| a.quantity == b.quantity &amp;&amp; a.scan_code == b.scan_code }
</code></pre>

<h2>KVO vs Immutable</h2>

<p>KVO is PLOP (Place Oriented Programming). Putting new values in the same
place that everyone&#8217;s referencing, clobbering any sort of history,
mutating &#8220;state&#8221;.</p>

<p>But the nice thing is if you change that value, everyone gets updated.
But the subscription model is KVO. There&#8217;s always a subscription model.
Publish by replacing the place.</p>

<p>Publishing immutable objects has different challenges. There&#8217;s no
&#8220;place&#8221;. Either there&#8217;s a stream of immutable values, or a setState. All
subscriptions must be one of those. React child components are
&#8220;subscribed&#8221; by nature of being, well, child components, and they get
notified by render/setState. Consumers of a stream.</p>

<p>So what about async on an immutable obj? You&#8217;d probably use a promise or
a stream, fire a publish event when it comes back. Just in the same way
you&#8217;d do for a synchronous immutable update. This is obvious shit.</p>

<h2>Clojure: rifle-oriented programming</h2>

<p>http://thinkrelevance.com/blog/2009/08/12/rifle-oriented-programming-with-clojure-2</p>

<p>TODO: read this</p>

<h2>CSP w JS generators:</h2>

<p>https://github.com/ubolonton/js-csp</p>

<p>What ClojureScript accomplishes with macros, this achieves with
generators. Hence it&#8217;s only in Chrome >= 28 (current version at time of
writing is 39) but it&#8217;s behind experimental flag, and Firefox >= 27.</p>

<h2>Slalom: Constraints, animations, touch interactions, etc</h2>

<p>http://iamralpht.github.io/constraints/</p>

<h2>Bitmapped vector tree</h2>

<p>https://www.youtube.com/watch?v=mS264h8KGwk&amp;feature=youtu.be</p>

<ul>
<li>random access</li>
<li>efficient push</li>
<li>based on Phil Bagwell&#8217;s mutable Hash Array Map trie</li>
<li>updates on a path only update that path. Everything else can get
shared.</li>
<li>branching factor; length of each segment. 32 is the empirically
derived Clojure default.

<ul>
<li>7 max hops before you reach the end of an array that you can keep in
memory</li>
</ul>
</li>
</ul>


<h2>Rx Begin and end</h2>

<p>I want to express &#8220;fire resize events while the app is running&#8221;. I guess
I&#8217;d have to create some observable that begins on app creation and ends
on app destruction&#8230; first stab:</p>

<pre><code>Rx.Observable.fromEvent(window, 'resize')
             .takeWhile(Rx.Observable.timer(2000))
             .forEach(function() {
    console.log("hello");
});
</code></pre>

<p>I&#8217;m getting some error because takeWhile expects a predicate. Maybe
takeUntil will do it?</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/takeuntil.md</p>

<p>HUZZAH: http://jsbin.com/colora/9/edit?html,js,console,output</p>

<p>Now I just need to create an observable&#8230;</p>

<h2>Rx Emberified</h2>

<p>Didn&#8217;t expect to see this in fromEvent code in the RxJS repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  if (!!root.Ember && typeof root.Ember.addListener === 'function') 
</span><span class='line'>    return fromEventPattern(
</span><span class='line'>      function (h) { Ember.addListener(element, eventName, h); },
</span><span class='line'>      function (h) { Ember.removeListener(element, eventName, h); },
</span><span class='line'>      selector);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>selectMany === flatMap</h2>

<p>nuff said. Why is selectMany a good name though?</p>

<h2>LINQ</h2>

<p>http://en.wikipedia.org/wiki/Language_Integrated_Query</p>

<p>It&#8217;s syntax introduced into .NET languages for querying lists,
relational databases, observables, etc. Meant to be used in conjunction
w Rx.</p>

<h2>mies cljs template</h2>

<p>https://github.com/swannodette/mies</p>

<pre><code>▾ out/
  ▾ cljs/
      core.cljs
      core.cljs.cache.edn
      core.js
      core.js.map
  ▾ clojure/
    ▾ browser/
        event.cljs
        event.cljs.cache.edn
        event.js
        event.js.map
        net.cljs
        net.cljs.cache.edn
        net.js
        net.js.map
        repl.cljs
        repl.cljs.cache.edn
        repl.js
        repl.js.map
  ▾ goog/
    ▾ array/
        array.js
    ▾ asserts/
        asserts.js
    ▾ async/
        delay.js
        nexttick.js
        run.js
    ▾ debug/
        debug.js
        entrypointregistry.js
        error.js
        logbuffer.js
        logger.js
        logrecord.js
    ▾ disposable/
        disposable.js
        idisposable.js
    ▾ dom/
        browserfeature.js
        dom.js
        nodetype.js
        safe.js
        tagname.js
        tags.js
    ▾ events/
        browserevent.js
        browserfeature.js
        event.js
        eventhandler.js
        eventid.js
        events.js
        eventtarget.js
        eventtype.js
        listenable.js
        listener.js
        listenermap.js
    ▾ functions/
        functions.js
    ▾ html/
        safehtml.js
        safestyle.js
        safeurl.js
    ▾ i18n/
        bidi.js
    ▾ iter/
        iter.js
    ▾ json/
        json.js
    ▾ labs/
      ▾ useragent/
          browser.js
          engine.js
          util.js
    ▾ log/
        log.js
    ▾ math/
        coordinate.js
        math.js
        size.js
    ▾ messaging/
        abstractchannel.js
        messagechannel.js
    ▾ mochikit/
      ▾ async/
          deferred.js
    ▾ net/
      ▾ xpc/
          crosspagechannel.js
          crosspagechannelrole.js
          directtransport.js
          frameelementmethodtransport.js
          iframepollingtransport.js
          iframerelaytransport.js
          nativemessagingtransport.js
          nixtransport.js
          transport.js
          xpc.js
        errorcode.js
        eventtype.js
        httpstatus.js
        wrapperxmlhttpfactory.js
        xhrio.js
        xhrlike.js
        xmlhttp.js
        xmlhttpfactory.js
    ▾ object/
        object.js
    ▾ promise/
        promise.js
        resolver.js
        thenable.js
    ▾ reflect/
        reflect.js
    ▾ string/
        const.js
        string.js
        stringbuffer.js
        typedstring.js
    ▾ structs/
        collection.js
        map.js
        set.js
        structs.js
    ▾ testing/
        watchers.js
    ▾ timer/
        timer.js
    ▾ uri/
        uri.js
        utils.js
    ▾ useragent/
        useragent.js
      base.js
      deps.js
  ▾ hello_world/
      core.cljs
      core.cljs.cache.edn
      core.js
      core.js.map
▸ scripts/
▸ src/
▾ target/
  ▾ cljsbuild-compiler-1/
    ▸ cljs/
    ▸ clojure/
    ▸ hello_world/
      constants_table.js
  hello_world.js
  hello_world.min.js
  index.html
  project.clj
  README.md
</code></pre>

<h2>Rx return vs of</h2>

<pre><code>Rx.Observable.of(1,2,3,4)
</code></pre>

<p>vs</p>

<pre><code>Rx.Observable.return(1)
// aliases
Rx.Observable.just(value, [scheduler])
Rx.Observable.returnValue(value, [scheduler])
</code></pre>

<p><code>of</code> accepts multiple values&#8230; return just does 1? Why does there n</p>

<h2>Windows, buffers</h2>

<pre><code>* @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
</code></pre>

<p>Basically, a buffer TODO TODO TODO</p>

<h2>Value vs identity</h2>

<p>In ClojureScript, something something TODO</p>

<p>Sharp distinction between value and identity. Identities are things like
refs or atoms and you have to deference them to get the value. You can
use <code>=</code> fn to test value equality, and once equal, ALWAYS equal, thanks
to immutability.</p>

<h2>Promise-aware Ember Chainwatchers implemented in Rx</h2>

<p>http://emberjs.jsbin.com/penuko/4/edit</p>

<h2>Elm lang</h2>

<p>FRP lang that compiles to JS.</p>

<p>http://elm-lang.org/Blog.elm</p>

<p>http://www.infoq.com/presentations/elm-reactive-programming</p>

<h2><code>-&gt;</code> vs <code>-&gt;&gt;</code></h2>

<p>The difference is where the rest of one expression gets passed into the
following form(s).</p>

<pre><code>(-&gt; 1
  (- 2))
-1
</code></pre>

<p>vs</p>

<pre><code>(-&gt;&gt; 
  (- 2))
1
</code></pre>

<h2>Cljsbin</h2>

<p>http://cljsfiddle.net/</p>

<h2>Chrome Script/Framework Blackboxing</h2>

<p>https://developer.chrome.com/devtools/docs/blackboxing</p>

<p>Seems pretty awesome. TL;DR: skip framework/minified code when you&#8217;re
stepping in/over/out of it. Especially useful for iteration/callbacks.</p>

<h2>Rx Event capture</h2>

<p>Goal: have something work like <code>window.alert()</code>, but animated and async,
and effortless.</p>

<p>Restrictions: literally everything needs to pass through (and get
buffered by Rx), except maybe mousemoves?</p>

<p>What are important stream windows?</p>

<ul>
<li>Views/Components

<ul>
<li>receive UI events when window is &#8220;active/focused/live&#8221;

<ul>
<li>e.g. NOT when view is animating</li>
<li>NOT when view is destroyed</li>
</ul>
</li>
</ul>
</li>
<li>Anything</li>
</ul>


<p>Realization: controller/store/websocket events probably don&#8217;t need to be
buffered/filtered in any way, given that 99% of the events you&#8217;d like to
block probably come from UI events. Exceptions to this rule? Perhaps
some instance where you have a <code>window.alert()-ish</code> thing and the pushed
websockets data can&#8217;t be acted upon until the alert is tapped. My head
hurts a lot. Quite a bit. Ah, what about timers within views/components?
What if they go off in the middle of a thing? They should kinda be
considered a UI event&#8230; maybe?</p>

<p>Idea: components are meant to have inputs and outputs. And then ideally
they have some logic within themselves that encapsulates some tricky bit
of UI. But there are problems with this:</p>

<ul>
<li>Should it really be up to a component to switch between clicks and
taps for desktop / mobile?</li>
<li>Should a UI event like a click even be considered as &#8220;originating&#8221;
from that component?</li>
</ul>


<p>It seems like we should make it possible to inject these UI event
dependencies somehow? jQuery is probably effed&#8230; but if you&#8217;re using
jQuery you&#8217;ve already lost.</p>

<ul>
<li>We can use Rx/bacon/FRP to provide these events?</li>
<li>Who are the gate keepers? Parent DOM? Parent components?</li>
<li>Can we still make DOM event delegation work?</li>
</ul>


<p>So I guess we do</p>

<h2>eventPhase</h2>

<p>https://developer.mozilla.org/en-US/docs/Web/API/event.eventPhase</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Event.NONE = 0
</span><span class='line'>Event.CAPTURING_PHASE = 1
</span><span class='line'>Event.AT_TARGET = 2
</span><span class='line'>Event.BUBBLING_PHASE = 3</span></code></pre></td></tr></table></div></figure>


<h2>React capture phase</h2>

<p>http://facebook.github.io/react/docs/events.html</p>

<p>React wraps native wrappers and provides a SyntheticEvent interface that
also does event delegation to keep things cheap. <code>nativeEvent</code> gives you
access to the (not-browser-unified) native event object.</p>

<p>You can also get capture-phase handlers to fire by adding <code>Capture</code> to
the name of the handler. Preeeetty clever I guess.</p>

<p>Still trying to find the cleverest way.</p>

<h2>Rx guidelines</h2>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/designguidelines/readme.md</p>

<h2>Rx 010101 series into windows</h2>

<p>http://jsbin.com/colora/15/edit</p>

<h2>oaijsd</h2>

<p>http://jsbin.com/sedeta/1/edit?html,js,output</p>

<h2>LayerVault</h2>

<p>git for design.</p>

<h2>Rx Schedulers</h2>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/schedulers.md</p>

<h2>Rx-ish integration in React</h2>

<p>TODO: research this</p>

<p>https://github.com/facebook/react/issues/2928</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A life of possibilities]]></title>
    <link href="http://machty.github.com/blog/2015/01/07/a-life-of-possibilities/"/>
    <updated>2015-01-07T14:07:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/07/a-life-of-possibilities</id>
    <content type="html"><![CDATA[<h2>More actions shit</h2>

<p>Scenario: mobile app, I have a back button, I don&#8217;t want it to cause
another transition if the app is in mid-transition.</p>

<p>Mid-transition means:</p>

<ul>
<li>data has already started loading for a target route, or</li>
<li>some animation is underway, e.g. liquid fire</li>
</ul>


<p>Present day Ember:</p>

<ul>
<li><code>willTransition</code> hook to check some &#8220;isTransitioning&#8221; state (which you
have to remember to properly set and unset (though ember could/should
probably provide this for you))</li>
<li>some other router reopen hook, override transitionTo behavior. Pretty
crappy.</li>
</ul>


<p>React w react-router:</p>

<pre><code>Router.run(routes, function (Handler) {
  // custom data-loading logic, construct your own chain of promises
  // ...
  // maybe use flatMapLatest so that you're only responding to the
  // most recent transition, and then eventually:
  // React.render(&lt;Handler/&gt;, document.body);

  // this could be modeled by a stream 
});
</code></pre>

<p>Hmm so I want to be able to push values into a stream (let&#8217;s call it raw
stream), but have it only come out the other side if some other&#8230;
stream? predicate? allows it.</p>

<h2>Rx/Bacon Diagrams</h2>

<ul>
<li>Bacon: <code>flatMapConcat</code> (or <code>flatMapWithConcurrencyLimit(1)</code>)</li>
<li>Rx: <code>concatAll</code></li>
</ul>


<p>Flatten, preserve order of previously started streams (buffers later streams)</p>

<pre><code>...{1}
......{2........3}
.........{}
............{4}
{...1..2........3.4}
</code></pre>

<ul>
<li>Bacon: <code>flatMap</code> (or <code>flatMapWithConcurrencyLimit(infinity)</code>)</li>
<li>Rx: <code>mergeAll</code></li>
</ul>


<p>Flatten, don&#8217;t preserve order (no buffering). (limiting concurrency
means buffering).</p>

<pre><code>...{1}
......{2........3}
.........{}
............{4}

produces
{...1..2.....4..3}
</code></pre>

<ul>
<li>Bacon: <code>flatMapLatest</code></li>
<li>Rx: <code>switchLatest</code></li>
</ul>


<p>Flatten, unsubscribe from previous streams, RIGHT when the new stream
begins, not on its first value!</p>

<pre><code>...{1}
......{2........3}
............{4}

produces
{...1..2.....4}
</code></pre>

<p>and</p>

<pre><code>...{1}
......{2........3}
............{.........4}

produces
{...1..2.....4}
</code></pre>

<h2>CircleCI uses ClojureScript/Om</h2>

<p>http://blog.circleci.com/local-state-global-concerns/</p>

<h2>MRR</h2>

<p>Monthly recurring revenue: a way to calculate monthly revenue based off
of multiple dissimilar subscription terms.</p>

<h2>Observable of 1 is a promise</h2>

<p>http://www.infoq.com/presentations/async-programming-netflix</p>

<p>Promises can&#8217;t be cancelled.</p>

<ul>
<li>Work is already being done (in flight)</li>
<li>No way to stop it</li>
</ul>


<p>Observables are lazy. You can build a giant nested logical chunk of
observable but nothing happens until, say, a <code>forEach</code> subscribes to the
result of an observable that all the internal logic kicks into place.
Not true for promises (unless someone implements a lazy thennable).</p>

<p>TODO: hot vs cold observables distinction? does this exist in bacon?</p>

<p>This is how the <code>retry</code> operator works&#8230; in the same way you can call
<code>forEach</code> N times on an observable and kick start all the internal
logic/event handlers, retry will internally do this until it gets a
non-error response.</p>

<p>This is unless promises, which have the <code>.then</code> operator:</p>

<ul>
<li>Regardless of whether you call <code>.then</code>, the promise logic has already started</li>
<li>Calling <code>.then</code> at the same time just subscribes to the single,
already running promise, and <code>.then</code> on an already resolved promise
just returns that.</li>
</ul>


<!--more-->


<h2>phone it in</h2>

<p>http://www.urbandictionary.com/define.php?term=phone+it+in</p>

<blockquote><p>Perform an act in a perfunctory, uncommitted fashion, as if it didn&#8217;t matter.</p>

<p>She sang the National Anthem, but she was just phoning it in as far as I could tell.</p></blockquote>

<h2>ENZ in Trojan ENZ</h2>

<p>https://answers.yahoo.com/question/index?qid=20070211111727AAnr6Kn</p>

<p>It refers to the reservoir tip at the end (ENZ = ends) to prevent fluids
from leaking from rubbing.</p>

<h2>Clojure: &#8220;classes&#8221; not coupled to namespace</h2>

<p>In Clojure, given you have, say, a Person record, you can extend Person
to two different protocols that have the same method name (so long as
those protocols are in two different namespaces. This is a nice because
in, say, Java, you might be implementing methods from N different
interfaces, yet (possibly unnecessarily) sharing the same private data
and other items on the same namespace.</p>

<h2>defrecord</h2>

<pre><code>(ns alex/wat)

(defprotocol ALEX (lol [a]))

(defrecord AlexThing [a b c]
  ALEX
  (lol [a] (println a)))
</code></pre>

<p>err clearly i&#8217;m doing something wrong&#8230; this is null pointer
exceptioning.</p>

<h2>can&#8217;t use recur and get polymorphism</h2>

<p>Unlikely to bite, but worth pointing out that whatever you pass as the
first arg to <code>recur</code> won&#8217;t dynamically dispatch, because <code>recur</code> is
really just a looping construct. I can&#8217;t see how this would actually
matter though? Maybe I don&#8217;t get it.</p>

<h2>ISeq, IPersistentStack</h2>

<p><code>I</code> stands for interface.</p>

<h2>Dynamic Dispatch</h2>

<p>Dynamic dispatch is the selection of which method to run in a
polymorphic setting. Which implementation of <code>foo</code> should run here?</p>

<pre><code>(foo thing)
</code></pre>

<p>From what I understand, Clojure will look for protocols that specify
<code>foo</code> and check if <code>thing</code> is part of that. If a protocol is found but
<code>thing</code> doesn&#8217;t implement it, then boom, but Clojure will also try and
find a multi-method. (TODO: figure out the order of resolution?)</p>

<p>Multimethods can be simple and dispatch on the type of some map
property, or it can run a more complicated functions to determine which
to run. I believe the difference between this and switch-on-type
inheritance is blah blah blah write this later.</p>

<h2>famo.us</h2>

<p>http://famo.us/university/</p>

<p>Baby&#8217;s first famous.</p>

<p>TODO: Engines, Contexts, and Surfaces.</p>

<p>Surfaces</p>

<ul>
<li>Seems to pos abs, 100% width and height by default; size actually
inherits from parent surface/context.</li>
</ul>


<p>State Modifiers</p>

<ul>
<li>seem to just wrap transform matrices</li>
</ul>


<p>http://devchat.tv/js-jabber/128-jsj-famo-us-with-steve-newcomb</p>

<ul>
<li>Rendering in the browser is faster than rendering in the browser

<ul>
<li>Multiplying matrices is CPU-bound</li>
<li>Browsers were meant to lay out text docs w links, etc., that&#8217;s
highly optimized</li>
<li>Layout engine optimized for matrix-based layouts; famo.us layout
engine &#8220;14x&#8221; faster than using CSS-based browser matrices. Why?
Because lots of browser layout stuff <em>isn&#8217;t</em> GPU stuff, but rather
the static text layout stuff that <em>is</em> highly optimized.</li>
</ul>
</li>
<li>Create the scene in JS

<ul>
<li>Post to DOM

<ul>
<li>used for context, text/titles</li>
</ul>
</li>
<li>Post to SVG</li>
<li>Post to WebGL

<ul>
<li>high end graphics</li>
</ul>
</li>
</ul>
</li>
<li>e.g. write in famo.us, use their render tree, render to each thing</li>
<li>vs ionic

<ul>
<li>ionic still relies on DOM</li>
<li>famo.us puts way more into JavaScript, render tree / physics engine
all lives in JS.</li>
<li>future-feasible to run ionic templates in famo.us</li>
</ul>
</li>
<li>rendering in famo.us

<ul>
<li>render the RenderTree</li>
<li>based on that, produce flattest dom possible

<ul>
<li>important to minimize DOM and manage it wisely, else reflow, frame
rate volatility</li>
</ul>
</li>
</ul>
</li>
<li>Physics Engines

<ul>
<li>Unreal / iOS</li>
<li>Native-feeling animations; prevent the feeling of html5</li>
</ul>
</li>
<li><p>Docker</p>

<ul>
<li>docker containers</li>
<li>containing a system, making it highly portable</li>
<li>famous wants a front-end container, e.g. write a carousel container,
implementations might swap as time goes on, fetching all the
libraries to present it happens automatically, etc.</li>
</ul>
</li>
<li><p>align</p>

<ul>
<li>sets anchor point on the element (defaults to upper left corner)</li>
</ul>
</li>
<li>origin

<ul>
<li>sets default 0,0 point that children will be inserted into.</li>
</ul>
</li>
</ul>


<h2>wtf is a graphics context</h2>

<p>Wtf is context is general. Is it unavoidable that this word be used all
the time?</p>

<p>https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_overview/dq_overview.html#//apple_ref/doc/uid/TP30001066-CH202-TPXREF131</p>

<p>It comes up in so many graphicsy shit. It kinda just means &#8220;where all
state is stored&#8221;.</p>

<p>You have an Engine, where all the API logic (and maybe hardware
interfacing logic) lives, and you have to feed it different contexts to
operate on.</p>

<p>Both Quartz and famo.us describe the context as a &#8220;drawing destination&#8221;;
in Quartz you could apply the same butterfly-drawing routines to both a
page that you want to print on, or a bitmap graphics context, or a
window context (obtained by your application from the window server).</p>

<h2>Opqaue Data Type</h2>

<p>A data type whose interface is incompletely specified, and only
internal, private fns/methods have access to its internals. e.g. the
Quartz 2D graphics context is an opaque data type; you don&#8217;t/can&#8217;t care
what its internals are but you know you have to supply it to all API
calls (or like OpenGL you might be able to swap out the current graphics
context).</p>

<p>Usually the context includes the canvas that you&#8217;re drawing to, current
fill color, depth of field settings, etc.</p>

<h2>Rx Marbles</h2>

<p>http://rxmarbles.com/</p>

<ul>
<li>sample: Use one stream to control the sample rate of another.</li>
<li>startWith: create a new stream that immediately emits a value</li>
<li>distinct: remember past values, prevent refires</li>
<li>distinctUntilChanged: pretty much just &#8220;uniq&#8221;? prevent duplicate
values in a row</li>
<li>findIndex: return the index of the stream</li>
<li>pausable: zip two stream, true/false values of one starts/stops the
flow of the other: HINT HINT HINT can totally use this for pausing
streams during animations / route transitions / any async shit!</li>
<li>pausableBuffered: remember/buffer the paused items, fire them once
&#8220;true&#8221; comes in!!!!!!!</li>
<li>skip/take: skips or takes the first N elements</li>
<li>skipLast/takeLast: skips or takes the last N elements of the stream;
is smart enough to start emitting values if the buffered size exceeds
N, rather than naively waiting for the stream to run to completeion</li>
<li>skipUntil: ignore shits until the thing comes in.</li>
</ul>


<h2>Reactive MVC</h2>

<p>http://futurice.com/blog/reactive-mvc-and-the-virtual-dom</p>

<ul>
<li>React inspired by reactive programming, ended up mix of interactive
and reactive patterns: TODO what is interactive?</li>
<li>If a change in <code>foo</code> affects <code>bar</code>, and <code>foo</code> is responsible for
telling <code>bar</code>, it&#8217;s interactive; reactive would be <code>bar</code> just
magically responding&#8230;</li>
<li>Interactive: &#8220;module X defines which others modules X affects&#8221;</li>
<li>Reactive: &#8220;module X defines which other modules affects X&#8221;

<ul>
<li>often implemented w EventEmitter (see below)</li>
</ul>
</li>
<li>Controllers are inherently interactive, so get rid of em</li>
<li>Models should export Observables, views should subscribe to model
events.</li>
<li>Fill the gap of controller:</li>
</ul>


<h2>EventEmitter</h2>

<pre><code>#!/usr/bin/env node

var EventEmitter = require('events').EventEmitter;

var ee = new EventEmitter();

ee.on('wattles', function(foo) {
  console.log("received some serious wattles", foo);
});

console.log("numlisteners:", ee.listeners('wattles').length)

setTimeout(function() {
  ee.emit('wattles', 123);
}, 2000);
</code></pre>

<h2>Kefir.js</h2>

<p>http://pozadi.github.io/kefir/</p>

<p>FRP JS lib based on Bacon and Rx but focused on high perf, low mem
usage.</p>

<p>Like Bacon, it distinguishes b/w Properties and EventStreams.</p>

<h2>Cycle.js</h2>

<p>https://github.com/staltz/cycle</p>

<p>This framework is based on the seminal blog
http://futurice.com/blog/reactive-mvc-and-the-virtual-dom</p>

<p>and these slides http://staltz.com/dont-react</p>

<h2>Ideas</h2>

<p>I believe Cycle.js has no concept of a component. The idea that even a
little business / stateful logic lives in the component riles that guy&#8217;s
feathers, but components are crucial for simplifying the mental model
and easily packaging / reusing things. Seems that nuts hasn&#8217;t been
cracked in Cycle.js yet.</p>

<p>UPDATE: components are custom elements in cycle.js
https://github.com/staltz/cycle/blob/master/src/custom-elements.js</p>

<p>(There&#8217;s also unanswered questions about minimizing use of globals,
dependency injection, etc.)</p>

<p>It also seems pretty bad that there&#8217;s lots of examples of reaching in
and grabbing the <code>data-wat-id</code> out of the event target.</p>

<p>So it still seems pretty good that the job of a component is to
translate DOM events into component domain events. A DayCellComponent
in a calendar should translate click/tap events&#8230;</p>

<h2>Taps/Clicks, who&#8217;s responsible?</h2>

<p>Is it up to a component to discern b/w a tap and a click? Some other way
of using input stream?</p>

<p>In Ember we could do something like override &#8220; to mean
different things in different contexts, tap vs click (which I use).</p>

<p>It&#8217;s pretty nice being able to do that; I guess in React you&#8217;d use
<code>withContext</code>?</p>

<p>This seems like a nice hookable thing for event delegation&#8230; oh wait it
already is in ember.</p>

<p>Maybe &#8220; should declare an input stream that you can hook into
n the component?</p>

<p>HERE IS a very concrete question I&#8217;d like to resolve:</p>

<p>Given:</p>

<ul>
<li>You have a list of items</li>
<li>Selecting an item expands an item</li>
<li>Only one item can be expanded at a time</li>
<li>In a desktop setting, &#8220;selections&#8221; happen via clicks, in a mobile
setting, &#8220;selections&#8221; happen via taps</li>
</ul>


<p>You&#8217;ll probably model this with:</p>

<ul>
<li>a ListComponent</li>
<li>ItemComponents</li>
</ul>


<p>My beef (and TODO list):</p>

<ul>
<li>Does it make sense for <code>ItemComponent</code>s to attach their own event
listeners?

<ul>
<li>What if they just got a stream of input? That means something
outside could:

<ul>
<li>decide whether taps or clicks were to be used for selection,
and child components would just receive a selectionEventStream
that they could respond to

<ul>
<li>Hmmm, but given the constraint</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Note that iOS let&#8217;s you suspend/resume touch interactions in general:
http://iosdevelopertips.com/event-handling/suspend-touch-events.html
But I think we want something more granular.</p>

<p>There seems to be a tug of war between re-render everything and
streamify everything. E.g. you diff the data and get per item stream
updates of isExpanded streams&#8230; so that you can re-render only those
items&#8230;? What&#8217;s the goal of this?</p>

<p>If you have virtual dom and re-render all the time, then when you do
want streams?</p>

<ul>
<li>Business logic, series of queries, async, and updating properties
along the way. Maybe UI isn&#8217;t much of a place for streams?
Unless I can show that there is UI not elegantly handled by virtual
DOM, I should drop trying to force streams into UI somehow&#8230;</li>
<li>It still seems like there&#8217;s a place for it though in app state in
general, particularly in actions management.

<ul>
<li>In particular, I never want to have to set some isLoading flag every
again. I should never have to check timerIds and cancel them ever
again. I should never have a bunch of transient properties every
again. Actions should jump start some process and you can listen to
their completion. Everything else: virtual dom (and virtual dom
can/should depend on these properties that you expose). Virtual DOM
state is explicit.</li>
</ul>
</li>
</ul>


<p>OK WE ARE GETTING CLOSE: handlebars/htmlbars templates have the benefit
of declaring loud and clear which properties are depended on for
rendering. If any of those properties change, it amounts to an implicit
setState. Otherwise there&#8217;s no need to re-render (this is all still
implying that KVO exists in Ember somehow).</p>

<pre><code>dismissStream = timer(2000).map(() =&gt; false)
newActionStreams = ... something that fires when a new event starts
// newActionStreams = filter(UIevents, () =&gt; actionIsUnderway???)
postActionMessageStream = race(dismissStream, newActionStreams)
</code></pre>

<p>OK OK OK so what I want is a way to express</p>

<ul>
<li>progression of time in a template</li>
<li>current values, certain flags, etc, without setting boolean properties</li>
</ul>


<p>Let&#8217;s say we have a stream of status on some complex multi-step async
process:</p>

<pre><code>observable = someUIEvent.flatMapLatest(some ajax with retries)
                        .followedBySomeOtherAsync
                        .followedBySomeOtherThing

// maybe...
observable = someUIEvent(someAjaxThing).flatMapLatest(some ajax with retries).state("stepOne")
                        .followedBySomeOtherAsync.state("stepTwo")
                        .followedBySomeOtherThing.state("stepThree")
</code></pre>

<p>There&#8217;s not really a nice mechanism for representing this in a
template without a lot of manual <code>.set</code>s. It&#8217;s like we want some kind of
switch statement?</p>

<pre><code>    &lt;h3&gt;Loading  items from server&lt;/h3&gt;

    &lt;p&gt;
      Here are all the step one things.
    &lt;/p&gt;

    &lt;h3&gt;Please select from the following options:&lt;/h3&gt;

    &lt;ul&gt;

        &lt;li &gt;&lt;/li&gt;

    &lt;/ul&gt;
</code></pre>

<p>Does this make sense? Maybe we just want / need a switch statement in
general. This would also have to work with LiquidFire as well&#8230;</p>

<p>But what the above demonstates is:</p>

<ul>
<li>scoped properties linked to progressive states within an
observable/promises</li>
<li>no global/manual flag management</li>
<li>no timer ids to set and reset</li>
</ul>


<p>TODO:</p>

<ul>
<li>Just have to find the sweet spot with plugging this stuff into ember
in a way people prefer.</li>
<li>How to you go back to a previous &#8220;state&#8221;? What is a &#8220;state&#8221;? How do
people normally model state machines in rx?</li>
</ul>


<p>https://github.com/logicalguess/rx-state-machine</p>

<h2>The silk road</h2>

<p>http://www.wired.com/2015/01/why-silk-road-trial-matters/</p>

<ul>
<li>Ross Ulbricht

<ul>
<li>aka Dread Pirate Roberts</li>
<li>accused of running silk road</li>
<li>accused of hiring hitmen for 2-6 killings, none which were carried out</li>
<li>defended by attorney Joshua Dratel, financed by a bitcoin mogul</li>
</ul>
</li>
<li>Silk Road

<ul>
<li>anonymized by bitcoin and Tor</li>
<li>copycat markets: Evolution and Agora</li>
</ul>
</li>
<li>Trial

<ul>
<li>Will highlight/expose vulnerabilities for other sites to learn from</li>
<li>Will highlight/set precedent of whether screenshots are admissible
for evidence</li>
</ul>
</li>
<li>Fourth amendment:

<ul>
<li>The Fourth Amendment (Amendment IV) to the United States Constitution is the part of the Bill of Rights that prohibits unreasonable searches and seizures and requires any warrant to be judicially sanctioned and supported by probable cause.</li>
<li>Warrantless searches apply</li>
<li>FBI pretty much admitted to hacking the site without warrant to
obtain IP, find dread pirate</li>
<li>FBI investigators likely to be questions, 4th amendment repeated again</li>
</ul>
</li>
<li>Linked in profile: https://www.linkedin.com/in/rossulbricht</li>
<li>Breaking Bad

<ul>
<li>Ulbricht first sold shrooms on silk road, then</li>
<li>expansion into anarchist community / drug market</li>
<li>hiring hitmen?</li>
</ul>
</li>
</ul>


<h2>React keys vs refs</h2>

<p>Clojure has a concept of refs (and similar concurrency primitives) to
add the concept of identity to a value that changes over time (given
that Clojure has immutable data types but still needs to synchronize
and share data b/w threads).</p>

<p>In React, you use keys to distinguish array values so that your
renders don&#8217;t do weird things; how would this work given immutable
datatypes?</p>

<ul>
<li>Well, if only the array changes but the items in that array are the
same, then you&#8217;re fine</li>
<li>But if, say, the selected item has modified, then the previous
reference is invalid/points to an older version of the thing</li>
</ul>


<p>Maybe there&#8217;s a sexy way we could handle this in ember&#8230; maintain a ref
to a changing value.</p>

<h2>Observables and Observables</h2>

<ul>
<li>Observable

<ul>
<li>changing values over time</li>
</ul>
</li>
<li>Observer

<ul>
<li>consumes observers</li>
</ul>
</li>
</ul>


<p>Observables don&#8217;t do anything on their own until they&#8217;re consumed in
some way. SO WEIRD. But the following doesn&#8217;t do anything&#8230;</p>

<pre><code>var obs = Rx.Observable.return('wat').do(function(a) {
    console.log("do", a);
});
</code></pre>

<p>until you add</p>

<pre><code>function K() {}
obs.forEach(K);
obs.forEach(K);
</code></pre>

<p>So what I&#8217;d like is a statemachine with its own stream events, w auto
desubscribe/dispose/etc</p>

<pre><code>var defaultState = {
};

var defaultState = {
};

var states = {
  defaultState: {
  },

  editingItem: function() {
    // TODO: define streams/actions for leaving this state
    // tapping another item leaves it....
  },

  savingItem: {
  }
};
</code></pre>

<h2>Bacon state machine</h2>

<p>http://jsbin.com/qihabo/2/edit?html,js,console,output</p>

<pre><code>Bacon.fromArray([1,2,3]).withStateMachine(0, function(sum, e) {
   if (e.hasValue()) {
       return [sum + e.value(), []];
   } else if (e.isEnd()) {
       return [sum, [new Bacon.Next(function() { return sum; }), e]];
   } else {
       alert("asd")
       return [sum, []];
   }
}).log();
</code></pre>

<p>TL;DR it&#8217;s a state machine only for computing the next value of stream,
it&#8217;s not some implementation of a state machine or anything like that.</p>

<p>Could be useful in the rare cases where you can&#8217;t represent what you
want in the form of other stream operators.</p>

<h2>Sequences of Coincidence</h2>

<p>http://www.introtorx.com/Content/v1.0.10621.0/17_SequencesOfCoincidence.html#SequencesOfCoincidence</p>

<p>I think this is what I&#8217;ve been looking for; handling actions differently
if they occur within the &#8220;window&#8221; of another event, e.g. &#8220;handle these
actions if they happen while a given route is active (and the router is
stable / not loading transitions)&#8221;.</p>

<p>Buffers are conceptually grouped with window operators:</p>

<p>It converts a stream of values into a stream of buffered arrays of
values, buffered according to time, or some buffer size, or whatever.
In other words buffer takes <code>IObservable&lt;T&gt;</code> and returns
<code>IObservable&lt;IList&lt;T&gt;&gt;</code>.</p>

<pre><code>source|-0-1-2-3-4-5-6-7-8-9|
result|-----0-----3-----6-9|
            1     4     7
            2     5     8
</code></pre>

<p>The analogy is that a window is open when Buffer receives first value,
and window closes when buffer&#8217;s full or time elapses.
Windows return <code>IObservable&lt;IObservable&lt;T&gt;&gt;</code></p>

<p>So the subscribe handler of a window passes you the observable, rather
than the already flattened List that Buffer would give to you.</p>

<p>So in rxjs: http://jsbin.com/colora/3/edit</p>

<pre><code>var source = Rx.Observable.timer(0, 50)
  .window(function () { return Rx.Observable.timer(125); })
  .take(4)
  .flatMap(function (x) { return x.toArray(); });

var subscription = source.subscribe(
  function (x) {
    console.log('Next: ' + x);
  },
  function (err) {
    console.log('Error: ' + err);
  },
  function () {
    console.log('Completed');
  });
</code></pre>

<p>produces</p>

<pre><code>"Next: 0,1,2"
"Next: 3,4,5"
"Next: 6,7"
"Next: 8,9,10"
</code></pre>

<p>Why 6,7? Because the initial timer w 50ms period never stops firing:</p>

<pre><code>starting timer: 0----50---100--150--200--250--300--350--400--450--500--550--600--650
close timer:    0-----------125----------250---------375----------500
window1:        0    1     2 |
window2:                        3    4   5|
window3:                                       6   7  |
window4:                                                 8   9  10|
</code></pre>

<p>The 50ms period never stops firing and it&#8217;s on the third iteration where
because of the relative late start of the next period timer firing after
the beginning of the 125ms close interval, it can only get 2 events in
before the stream closes.</p>

<p>SO WTF do I want to do with this: something about windows for
currently active route states? Does that make sense?</p>

<p>There&#8217;s apparently a version that lets you overlap windows&#8230; why would
this be useful? I don&#8217;t know! And it doesn&#8217;t seem like it&#8217;s implemented
in RxJS, but the idea is you provide an observable that fires when a
window should be opened, and a close observer that runs for each new
window, so if your close fires at a larger interval than opens happen,
then you&#8217;ll have overlapping streams, which I guess means, say, a &#8220;3&#8221; or
&#8220;4&#8221; might be fired on multiple streams sprung up.</p>

<h2>RxJs Joins</h2>

<p>Note that all of this is part of the <code>coincidence</code> lib of Rx.</p>

<p>Join operator joins too sequence; zip is kind of a join, but zip is based
on index, and join does sequences.</p>

<p>zip accepts</p>

<ul>
<li>a &#8220;left&#8221; observable: each value produced opens another window</li>
<li>a &#8220;right&#8221; observable: produces values that pair open with the values
of left, while left stream is still open.</li>
<li>a &#8220;left duration&#8221; fn: returns an observable whose first value or
closing will close the left-generated observable (note: it doesn&#8217;t
even matter what type the closing value/observable is)</li>
</ul>


<p>So &#8220;right&#8221; values that start after &#8220;left&#8221; values will still be joined
with cached, previously opened windows. e.g.</p>

<pre><code>L 0-1-2-3-4-5-
</code></pre>

<p>plus</p>

<pre><code>R --A---B---C-
</code></pre>

<p>produces</p>

<pre><code>0, A
1, A
0, B
1, B
2, B
3, B
0, C
1, C
2, C
3, C
4, C
5, C
</code></pre>

<p>Interesting:</p>

<blockquote><p>Now it seems fairly obvious that, if I immediately closed the window by returning Observable.Empty<Unit>, or perhaps Observable.Return(0), windows would never be opened thus no pairs would ever get produced. However, what could I do to make sure that these windows did not overlap- so that, once a second value was produced I would no longer see the first value? Well, if we returned the left sequence from the leftDurationSelector, that could do the trick. But wait, when we return the sequence left from the leftDurationSelector, it would try to create another subscription and that may introduce side effects. The quick answer to that is to Publish and RefCount the left sequence. If we do that, the results look more like this.</p></blockquote>

<p>In Rx the default is to always create a new subscription; it&#8217;s NOT like
a promise whereby a singleton promise has already started firing.
Solution: use Publish.</p>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/publish.md</p>

<p>Publish allows for the sharing of subscriptions.</p>

<p>So my question is&#8230; does publishing on its own start its own
subscription? Naw, I think you need to call <code>connect</code> once you&#8217;ve added
all your subscribers.</p>

<p>http://jsbin.com/colora/6/edit</p>

<pre><code>var obs = Rx.Observable.return('wat').do(function(a) {
  console.log("do", a);
});

var p = obs.publish();

function K() {}
p.forEach(K);
p.forEach(K);gma


// uncomment this to actually fire side effects
//p.connect();
</code></pre>

<p>refCount is hard to describe&#8230;</p>

<p>http://stackoverflow.com/questions/7509503/how-can-i-create-an-rx-observable-which-stops-publishing-events-when-the-last-ob/7510245#7510245</p>

<p>Publish as in pub sub&#8230; you want to stop consuming resources once
everyone&#8217;s stopped subscribing?</p>

<p>http://www.zerobugbuild.com/?p=144</p>

<p>Publish creates a hot subscription, refCount makes it close when
subscribers are zero.</p>

<p>If you don&#8217;t do <code>refCount</code>, you have to do <code>connect</code>. If you don&#8217;t do
<code>connect</code> or <code>refCount</code>, I think the subscription never gets activated,
or something? I still don&#8217;t get it&#8230;</p>

<p>Anyway, back to join:</p>

<blockquote><p>The quick answer to that is to Publish and RefCount the left sequence. If we do that, the results look more like this:</p></blockquote>

<pre><code>left  |-0-1-2-3-4-5|
right |---A---B---C|
result|---1---3---5
          A   B   C
</code></pre>

<p>TL;DR once you start using right duration selector, you can implement
other operators.</p>

<p>TODO: watch
http://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-MinLINQ-The-Essence-of-LINQ</p>

<h2>console.log printf</h2>

<p>Saw this in Rx docs: https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/timer.md</p>

<pre><code>console.log("wat %s", 3);
</code></pre>

<p>Prints &#8220;wat 3&#8221; (but jsbin&#8217;s console.log override is not smart enough to
substitute).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everything and nothin]]></title>
    <link href="http://machty.github.com/blog/2015/01/04/everything-and-nothin/"/>
    <updated>2015-01-04T22:26:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/04/everything-and-nothin</id>
    <content type="html"><![CDATA[<h2>Indemnity</h2>

<p>http://en.wikipedia.org/wiki/Indemnity</p>

<p>Where indemnitor A pays B a sum of money to cover losses suffered by B
(regardless of whether A caused/was responsible for the loss).
Car insurance is an example. Life insurance is not, since the payout is
not based on any &#8220;valuation&#8221; of the life..</p>

<p>HMOs basically get involved with health care options to try and secure
efficient/cheap means of good healthcare, rather than traditional
indemnity insurance, which would, uhh, just pay out after the fact and
not get involved beforehand?</p>

<h2>HMO act of 1973</h2>

<p>http://en.wikipedia.org/wiki/Health_Maintenance_Organization_Act_of_1973</p>

<ul>
<li>signed by nixon</li>
<li>intended to curb medical inflation</li>
<li>provided grants/loans to start an HMO, removed certain state
restrictions for federally qualified HMOs</li>
<li>required employers w 25+ employees to offer federally certified HMO
options <em>if</em> the employer was already offering traditional insurance</li>
<li>did NOT require employers to offer health insurance</li>
<li>established/solidied the term HMO</li>
</ul>


<h2>Humble Bundle</h2>

<p>http://en.wikipedia.org/wiki/Humble_Bundle</p>

<p>Series of collections (bundles) of digital thingers, often games,
distributed via pay-what-you-want. The more you pay, the more that&#8217;s
opened up. Configurable, but most pay goes to developers, some to
charity, some to Humble.</p>

<h2>What is JLD in Empire Blue?</h2>

<p>JLD is a network code representing the Pathway Enhanced network of
doctors, pharmaceuticals, etc.</p>

<p>The ID number on the card is network + member ID.</p>

<p>1-866-755-2680 Tech support for the website.</p>

<p>Even though they don&#8217;t put it on the card this year, my co-pay is $30,
which I always pay. After I blast through deductible, co-insurance kicks
in. But preventative visits to PCP are freeeeee. But if it&#8217;s not
preventative, the doctor will submit it to insurance as a different
code, which I have to pay for out of deductible. Otherwise shit is
freeeee.</p>

<p>What&#8217;s the difference between Empire and Anthem?</p>

<p>There&#8217;s Empire BlueCross BlueShield and Anthem BlueCross BlueShield?</p>

<p>OK OK OK BlueCross BlueShield is a federation (bigass organization where
smaller groups have decent autonomy). Was originally Blue Cross in 1929,
and a separate Blue Shield in 1948, and they merged in 1982.</p>

<p>Anthem is their only publicly traded company, and within New York they
operate as &#8220;Empire&#8221; BlueCross. Jesus Christ these companies are too
fucking huge.</p>

<ul>
<li>Blue Cross Blue Shield

<ul>
<li>Anthem (publicly traded)

<ul>
<li>Empire Blue Cross Blue Shield (operates out of New York)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Difference b/w renter&#8217;s and home owner&#8217;s insurance</h2>

<p>http://coverhound.com/insurance-learning-center/homeowners-vs-renters-insurance-a-big-difference</p>

<ul>
<li>Renters

<ul>
<li>You insure belongings, not the building</li>
</ul>
</li>
<li>Homeowners

<ul>
<li>You insure the building, and the belongings

<ul>
<li>Hence it&#8217;s way more expensive</li>
</ul>
</li>
<li>Insurance is often mandatory if you have a mortgage, but probably
not legally required if you straight up own the whole thing.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniFocus et al]]></title>
    <link href="http://machty.github.com/blog/2015/01/02/omnifocus-et-al/"/>
    <updated>2015-01-02T16:27:00-05:00</updated>
    <id>http://machty.github.com/blog/2015/01/02/omnifocus-et-al</id>
    <content type="html"><![CDATA[<h2>OmniFocus</h2>

<ul>
<li>Quick action add: ctrl+option+space</li>
<li>Send to inbox: Ctrl+F6

<ul>
<li>Note this is a Service that some reason not all apps implement?
But it works in Chrome so I think we&#8217;re good</li>
</ul>
</li>
<li>Once you assign an inbox item to a project, it&#8217;s removed from the project</li>
<li>Someday maybe:

<ul>
<li>Put in single action project, mark project as on hold.</li>
</ul>
</li>
<li>So projects can have an On Hold status&#8230; but there&#8217;s also a waiting context?

<ul>
<li>Ah, both projects and contexts can choose what status they are&#8230;
from the same list of possible statuses.</li>
</ul>
</li>
<li>How does the repeat work? &#8220;1 week&#8221;? Why does it say multiple values?

<ul>
<li>Ah I should probably do this one at a time. The way it works is once
you complete, it&#8217;ll immediately schedule another one.</li>
</ul>
</li>
</ul>


<p>OmniFocus is implements GDT: <a href="http://gettingthingsdone.com/">Getting Things Done</a></p>

<h2>Elephants in Trees</h2>

<p>Why do you never see elephants hiding in trees?</p>

<p>Because they&#8217;re very good at it.</p>

<!--more-->


<h2>ASasidoasidj</h2>

<p>http://www.consumerreports.org/cro/2013/12/do-you-need-to-register-new-products-you-buy/index.htm</p>

<p>http://abcnews.go.com/Business/register-product-christmas/story?id=21348313</p>

<p>For software it probably makes more sense since they&#8217;ll have your name
on file to let you know of any major security updates / breaches and
what not, but often warranties don&#8217;t actually require registering a
product. It&#8217;s decently likely the company just wants to sell info to
marketers, making money off of you and subjecting you to spam.</p>

<h2>DirectInput vs XInput</h2>

<p>http://en.wikipedia.org/wiki/DirectInput#DirectInput_vs_XInput</p>

<p>Relevant because I just got a wireless gamepad that may or may not work
with Mac. Apparently Mac only supports DirectInput, but either way these
shits are Microsoft API for interacting with input, DirectInput being
the deprecated one, XInput being the new.</p>

<p>This is the most useless shit I could have blogged / reminded myself
about. Why do I do it?</p>

<h2>Pulmonology</h2>

<p>http://en.wikipedia.org/wiki/Pulmonology</p>

<p>Medical specialty dealing in the heart.</p>

<h2>Insurance, carriers, etc</h2>

<p>What&#8217;s a carrier? What&#8217;s the relationship b/w carrier and, e.g.
BlueCross BlueShield? What&#8217;s a PPO?</p>

<p>http://www.ehealthinsurance.com/health-plans/ppo/</p>

<p>http://www.ehealthinsurance.com/health-plans/hmo/;</p>

<p>HMO: Health Maintenance Organization: broad network of healthcare
services; broader range of preventative care than something else. You
choose a Primary Care Physician, and they must refer you to specialists.</p>

<p>Managed care: http://en.wikipedia.org/wiki/Managed_care</p>

<p>It&#8217;s a US-only term describing a bunch of techniques to keep health care
costs down; incentives for physicians and patients alike, preventative
care, etc. Spurred on by HMO act of 1973</p>

<p>https://nfb.org/images/nfb/publications/vodold/mngdcare.htm</p>

<p>Managed care:</p>

<ul>
<li>explicit standards for selecting providers</li>
<li>formal programs for ongoing quality review / improvement</li>
<li>preventative care, keeping enrollees healthy to reduce use of services</li>
<li>financial incentives for enrollees to use providers and procedures
covered by the plan.</li>
</ul>


<p>Managed care integrates financing and delivery of health care services.
It is implemented/used/referenced by:</p>

<ul>
<li>HMOs (Health Maintenance Organizations): provides wide range of services
for fixed, periodic payment (like monthly insurance payments)</li>
<li>PPOs (Preferred Provider Organizations): groups of hospitals,
physicians, etc., who contract with insurer, employer, 3rd party
admin, etc, to provide health care to all insured</li>
<li>POS plans (point of service): combo of HMO+PPO&#8230;?</li>
</ul>


<p>Features common to managed care:</p>

<ul>
<li>pre-authorization (let insurer know before you do some surgery, etc)</li>
<li>rigorous utilization review&#8230;?</li>
<li>emphasis on use of primary physicians (why? what does this offer?)</li>
</ul>


<p>OK I TAKE THIS ALL BACK this was a shitty little abstract to link to.</p>

<p>Indemnity:</p>

<ul>
<li>security or protection against a loss or other financial burden</li>
<li>security against or exception of legal responsibility of one&#8217;s actions</li>
<li>payment to victor of war as a condition for PEACE</li>
</ul>


<h2>Family Medicine</h2>

<p>http://en.wikipedia.org/wiki/Family_medicine</p>

<p>It means a physician for people of all ages.</p>

<h2>Quorum</h2>

<p>the minimum number of members of an assembly or society that must be present at
any of its meetings to make the proceedings of that meeting valid.</p>

<p>e.g. House of Cards quorum.</p>

<h2>Random fucking World MasterCard benefits</h2>

<ul>
<li>Auto rental collision damage waiver

<ul>
<li>Must use applicable card for entire rental transaction</li>
<li>Decline rental company&#8217;s collision waiver</li>
<li>&#8220;For most cards, the coverage is secondary, meaning that if you have car insurance, you have to file a claim there first (and your premium may go up). But your credit card should step in and pick up where your auto insurer leaves off, paying the tab for your deductible, towing charges and other fees. However, as many frustrated cardholders have learned, the fine print can be tricky. Credit card companies have their own restrictions and exclusions and they, too, often refuse to pay some types of fees levied by car rental companies.&#8221;</li>
<li>If you <em>don&#8217;t</em> have primary insurance, you can use CDW as primary so
long as you have a notarized report at time of incident that you had
no insurance. Why notarized? Not just because Chase is a dick but
because people might not want to report to their primary insurance
because their rates will go up.</li>
</ul>
</li>
</ul>


<p>What&#8217;s a declaration page?</p>

<p>It&#8217;s info from the car insurance company summarizing benefits, which car
they apply to, which drivers, address of driver, summary of coverage,
liability limits.</p>

<ul>
<li><p>Purchase protection</p>

<ul>
<li>Items purchased w card covered in case of theft, damage, accidental loss</li>
<li>Will replace/repair/reimburse up to $500 per claim, $50,000 per account</li>
<li>Secondary&#8230; if you have preexisting applicable insurance, that must come first</li>
<li>Not covered:

<ul>
<li>plants/animals, antiques, boats/cars/autos/motorized vehicles,
software, items purchased for resale, &#8220;mysteriously disappearing&#8221;
items (where no evidence of wrongful act), <em>items lost by common
carrier (like USPS)</em>, jewelry/watches stolen from non-carry-on
luggage, items lost from war/terrorism/rebellion/confiscation/earthquakes,
medical equipment, perishables/consumables/perfumes/cosmetics,
travelers checks/cash/tickets, <em>used/pre-owned items</em></li>
</ul>
</li>
<li>Needed for reimbursement:

<ul>
<li>claim form</li>
<li>copy of card receipt</li>
<li>copy of itemized store receipt</li>
<li>copy of police report (made within 48 hours of incident), or
whatever kind of report</li>
</ul>
</li>
<li>If you have personal/primary insurance:

<ul>
<li>You must use it (homeowner&#8217;s/renter&#8217;s/automabile), and the CC
company will cover any leftover deductible, or even the item
itself if you&#8217;ve exhausted the insurance.</li>
</ul>
</li>
</ul>
</li>
<li><p>Trip Cancellation/Interruption</p>

<ul>
<li>Trip cancellation is before the trip starts, interruption is during, derp</li>
</ul>
</li>
<li><p>Price Protection:</p>

<ul>
<li>e.g you buy something, and then a printed ad lists it for less, then
within 90 days of purchase you can make a claim and get reimbursed
the difference.</li>
<li>Pretty cool, too lazy to describe the fine print</li>
</ul>
</li>
<li><p>Lost luggage</p>

<ul>
<li>Applies to both checked or carry on</li>
</ul>
</li>
<li><p>Baggage delay</p>

<ul>
<li>if baggage delayed 6+ hours</li>
<li>You&#8217;re reimbursed for the emergency purchase of &#8220;essential items&#8221;</li>
<li>Up to $100 per day, max 3 days</li>
<li>Emergency items:

<ul>
<li>clothing, toiletries, charging cables</li>
</ul>
</li>
<li>Not covered:

<ul>
<li>contacts, hearing aids, artificial teeth, cash, checks,
securities, jewelry,</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>By a person or persons</h2>

<p>Legalese. I wanna use this is a sentence.</p>

<h2>iOS app manager view</h2>

<p>It has Recent contacts at the top, and swipe it right and you can see
Favorites! Why don&#8217;t I use this? If you tap it, it reveals option to
Call or Message. SO GOOD.</p>

<h2>What&#8217;s Rust named after?</h2>

<p>A RobUST fungus:</p>

<p>http://www.reddit.com/r/rust/comments/27jvdt/internet_archaeology_the_definitive_endall_source/</p>

<h2>Sky Ferreira and Charli XCX doin shit</h2>

<p>http://www.musictimes.com/articles/10302/20140916/sky-ferreira-reveals-charli-xcx-collaboration-will-sound-very-tatu.htm</p>

<p>t.A.T.u. is a Russian duo.</p>

<p>http://en.wikipedia.org/wiki/T.A.T.u.</p>

<p>Sky Ferreira, Charli XCX, and Grimes. They&#8217;re all buds.</p>

<h2>A skillet is a fucking frying pan</h2>

<p>And the difference between a fry(ing) pan/skillet and a saute pan is
that saute pans have 90 degree angle sides, where&#8217;s skillets are sloped.
Skillets aren&#8217;t designed to hold a lot of liquid and are optimized for
reaching in and flipping shit, like eggs and pancakes n stuff.</p>

<p>Some people think there <em>is</em> a difference b/w skillet and frying pan,
that pans are flimsy but skillets are thick.</p>

<h2>Colanders and Strainers</h2>

<p>Colanders are the often plastic bowls with holes for draining noodles
and rice. I can&#8217;t believe I didn&#8217;t know that. <code>say colander</code>. Colanders
usually stand up on their own; they have a <em>footed base</em>.</p>

<p>Strainers are generally wire mesh, have a handle, and are used for, say,
catching lemon seeds when squeezing a lemon.</p>

<h2>Sinecure</h2>

<p>a position requiring little or no work but giving the holder status or financial benefit.</p>

<p>Reference: http://consultingbyrpm.com/blog/2014/12/timid-guys-finish-last.html</p>

<p>Cushy sinecures. White guys getting cushy sinecures.</p>

<p>Sinecure : sine cura : &#8220;without care&#8221;</p>

<h2>Easy ass awesome spicy noodles</h2>

<p>http://www.budgetbytes.com/2012/08/spicy-noodles/</p>

<h2>JSCS</h2>

<p>JSHint is going to get rid of style rules, and just test things like
shadowing, hoisting, syntactical things.</p>

<p>Enter JSCS to fill in the style spot.</p>

<p>https://github.com/jscs-dev/node-jscs</p>

<h2>Instacart</h2>

<p>https://www.instacart.com</p>

<p>Seems pretty badass? I guess? Shop from multiple</p>

<h2>AWOL</h2>

<p>Absent Without Official Leave.</p>

<h2>kip</h2>

<p>British for &#8216;nap&#8217;.</p>

<h2>The spirit is willing</h2>

<p>but the flesh is weak, or spongey and bruised.</p>

<p>http://biblehub.com/matthew/26-41.htm</p>

<blockquote><p>&#8220;Watch and pray so that you will not fall into temptation. The spirit is willing, but the flesh is weak.&#8221;</p></blockquote>

<h2>MFA</h2>

<p>Museum of Fine Arts in Boston.</p>

<p>http://www.mfa.org/about</p>

<h2>My dumb thing</h2>

<p>12 seconds gold</p>

<p>6 second repetition, so use the gold one&#8217;s motor/governor.</p>

<h2>Bacon.js</h2>

<ul>
<li>EventStream: distinct events that happen over time</li>
<li>Property: value that changes over time</li>
</ul>


<p>TODO: Why have both?</p>

<ul>
<li>EventStreams have no initial value</li>
</ul>


<p><code>combine</code>: basically map two streams/properties into a Property (why not
event stream? what&#8217;s the EventStream equivalent?). You can pass a method
name as the second arg and it&#8217;ll be called on the&#8230; I don&#8217;t know. In
the case of <code>.scan</code> it&#8217;s the accumulator. What makes sense for combine?
Proably on the first arg, but that&#8217;s weird. NO it&#8217;s not, it gets called
on the current property of course. Let&#8217;s test this theory.</p>

<p>Actually no this makes no sense, they have an example</p>

<pre><code>var out = a.combine(b, ".concat")
</code></pre>

<p>It makes sense that it&#8217;d use the current value of the output property to
call <code>.concat</code> on, such as an array, but <code>.concat</code> mutates the
underlying array&#8230; is that ok? Seems fucky, seems like someone who got
a previous value from <code>out</code>, array, might have their array value
mutated. Let&#8217;s find out why this would not be the case&#8230;</p>

<p>Fuck it too lazy right now.</p>

<p>Convert promise to EventStream: <code>Bacon.fromPromise</code>.</p>

<p>So, flat map exists whenever you&#8217;d like to map to some asynchronous
value where order can&#8217;t be preserved&#8230; so for instance if you had a
serialize of values and you wanted to map them to some other value that
could be determined synchronously, you&#8217;d just map, but if you can&#8217;t
return something synchronously, each &#8220;map&#8221; should essentially return a
new stream, case in point: AJAX-based auto-completes. You translate text
field updates into ajax queries, each of which have their own unique
async.</p>

<pre><code>textUpdate -&gt; map -&gt; map -&gt; mapToAjax
                                -&gt; ajax promise
                                -&gt; ajax promise
                                -&gt; ajax promise
</code></pre>

<p>Need to reconcile these back into a single stream.</p>

<p>The pattern is expand into async via ajax and coalesce back into values
with flatMap.</p>

<ul>
<li><code>flatMap</code>: does NOT preserve ordering</li>
<li><code>flatMapLatest</code>: discards/forgets previous values if new ones come
back first</li>
</ul>


<p>Question: is there a flatMap that preserves order without discarding?</p>

<p><code>fromBinder</code>: create your own custom stream. The callback accepts a
<code>sink</code> function which is how you emit events.</p>

<p>What does <code>sink</code> mean? I guess it means a consumer of a stream? Why the
stream sinks into.</p>

<p><code>interval</code> vs <code>fromPoll</code>:</p>

<ul>
<li><code>interval</code> returns a stream that emits an optional value that you pass
to it.</li>
<li><p><code>fromPoll</code> has no concept of a value, it just runs your callback</p>

<p>  var stream = Bacon.fromBinder(function(sink) {</p>

<pre><code>sink([new Bacon.Next("2nd"), new Bacon.Next("3rd")])
sink(["4th", "5th"])
sink(["6th", new Bacon.Next("7th")])
sink([new Bacon.Next("8th"), "9th"])
return function() {
   // unsub functionality here, this one's a no-op
}
</code></pre>

<p>  })
  stream.log()</p></li>
</ul>


<p>Output:</p>

<pre><code>2nd
3rd
["4th", "5th"]
6th
7th
[b, "9th"]
</code></pre>

<p>You can use <code>Bacon.Next</code> to convert an array into sequentially emitted
values, rather than the value emitted being an array. It&#8217;s like a
flatten decided by the emitter?</p>

<p>Bus: https://github.com/baconjs/bacon.js#bus</p>

<p>A Bus an an EventStream that you can push values into.
I think: <code>promise:defer::eventStream:bus</code>, except that Deferreds
don&#8217;t have the promise&#8217;s <code>.then</code> api whereas a Bus <em>is</em> an event stream
with the same event stream API, plus a <code>.push</code> method.</p>

<p>Properties have optional starting values.</p>

<p>If provided, <code>onValue</code> emits a value immediately, else it only updates
on the first thing.</p>

<ul>
<li><code>EventStream.toProperty()</code>: convert to property</li>
<li><code>Property.change()</code>: convert to event stream</li>
</ul>


<p><code>Bacon.update</code>: create Property from initial value, update value based
on multiple inputs.</p>

<p>INTERESTING. This is kinda what we&#8217;ve been talking about in Emberland.
EXCEPT that <code>Bacon.update</code> doesn&#8217;t expose the means of updating the
property, it just encapsulates all updates into a single property, and
you need to provide the write-able buses via some other mechanism.</p>

<p>I <em>think</em> Property and EventStreams are both Observables. c/d?</p>

<h2>Synchronizing streams, Bacon.when</h2>

<p>You&#8217;d like to zip together streams into a single stream, but when do you
fire an event? When both have since fired? When only one? <code>Bacon.when</code>
to the rescue to disambiguate and let you decide!</p>

<pre><code>Bacon.when(seed
</code></pre>

<h2>Braindumpin</h2>

<p>http://baconjs.github.io/tutorials.html#content/tutorials/4_Building_Applications_Out_Of_Bacon</p>

<p>Goal: understand Ember action bubbling vs Flux dispatcher pattern among
other things, grand unifying FRP theory.</p>

<p>Mutable state is an oxymoron, it&#8217;s hard to reason about programs with
mutable data structures, hence React is nice because renders are
stateless, allowing functional/immutability patterns.</p>

<p>It&#8217;s more and more frowned upon to do</p>

<p>and allow <code>x-foo</code> to directly change <code>blah</code>, which in present-day/legacy
Ember style would flow the data back upward. The data-down-actions-up
approach would involve:</p>

<p>and <code>updateBlah</code> would perform the set. It&#8217;s really just moving the
<code>set</code> back up to the parent so in that way it might just seem like
needless indirection, but this allows:</p>

<ul>
<li>easier reasonability/testability</li>
<li>can override <code>updateBlah</code> to do whatever and asyncly update <code>value</code>,
after some validation. It&#8217;s reaaaally hard/awkward/annoying to sub out
the <code>set</code> behavior</li>
</ul>


<h2>Flux et al</h2>

<p>What are the core concepts?</p>

<pre><code>Views ---&gt; (actions) ----&gt; Dispatcher ---&gt; (registered callback) ---&gt; Stores -------+
Ʌ                                                                                   |
|                                                                                   V
+-- (Controller-Views "change" event handlers) ---- (Stores emit "change" events) --+
</code></pre>

<p>First off, a store is like what&#8217;s traditionally called a model; it has
app state and app logic. A store might directly represent a single model
(i.e. what might be called a UserStore might just be a User model in
other MVCs), but in general stores can represent many objects, scoped to
a particular domain of the application.</p>

<p>If you click a button in a component, it never directly invokes some
method on a store. Why? Because it would be hard to trace the
dependencies? Any new component could come along and start calling
methods on some random store? Yes, confirm, you don&#8217;t want to do that.
You want a message bus. The dispatcher is that bus.</p>

<pre><code>action ---&gt;
action ---&gt;
action ---&gt;---&gt; dispatcher
action ---&gt;
action ---&gt;
</code></pre>

<p>So in your tests you can stub the dispatcher and assert that expected
methods were called on it. Easy peasy I guess? Doesn&#8217;t it mean
you&#8217;ll have some giant switch statement that&#8217;s gotta divvy out events in
the dispatcher? Often: yes, it does, which is desirable for small enough
stuff, issues with scalability though.</p>

<p>The dispatcher model does have the benefit of being able to intercept
events and filter/debounce/coalesce them; this would be a nice place to
ensure that a stray tap in the middle of a sideways transition in a
mobile app didn&#8217;t fire some event.</p>

<p>Anyway, calling action helper fns on a dispatcher doesn&#8217;t do anything if
stores haven&#8217;t subscribed to dispatcher events.</p>

<h2>Reflux</h2>

<p>https://github.com/spoike/refluxjs</p>

<p>Seems like an improvement; gets rid of the switch statements; makes
actions listenable; makes stores listenable in case some stores depend
on others (replaces <code>waitFor</code>)</p>

<p>The actions being listenable is good because it gets rid of stores
receiving ALL actions and having to selectively respond to them via big
switch statement matching by string name.</p>

<p>Actions are functors, you can call them directly and that passes through
the payload to everyone listening.</p>

<pre><code>var statusUpdate = Reflux.createAction();
statusUpdate(data); // Invokes the action statusUpdate
statusUpdate.triggerAsync(data); // same effect as above
</code></pre>

<p>or</p>

<pre><code>var statusUpdate = Reflux.createAction({ sync: true });
statusUpdate(data); // Invokes the action statusUpdate SYNChronously
statusUpdate.trigger(data); // same effect as above
</code></pre>

<p>var Actions = Reflux.createActions([
  &#8220;statusUpdate&#8221;,
  &#8220;statusEdited&#8221;,
  &#8220;statusAdded&#8221;
]);</p>

<p>There&#8217;s lots of features for async and converting an action into async
based on its children.</p>

<p>Blah blah blah back to other ideas:</p>

<p>So if you wanted to do something like Flux in Ember, you&#8217;d have to do
something like</p>

<p>TODO: https://github.com/spoike/refluxjs#joining-parallel-listeners-with-composed-listenables</p>

<p>So my whole better actions idea was so that you could quickly reason
about action state.</p>

<pre><code>var TopLevelComponent = Ember.Component.extend({

  // Better Actions API
  submitForm: action(function() {
    return ajaxPromise(whatever);
  })
});
</code></pre>

<p>This worked <em>ok</em> ish but was horrible for lists because it&#8217;s a
singleton.</p>

<p>Use case: TODO MVC with slow async deletes; additional deletes should be
prevented if animating out of this route. There is a loading spinner if
at least one item is being deleted. Version 1 lets you delete multiple
items at the same time, Version 2 prevents this.</p>

<p>My goals is that I want to see how stream composition can address the
actions problem. Got async actions? Don&#8217;t want them firing at the same
time? Debounce those shits, or flatmap latest. (TODO: what&#8217;s the stream
approach for letting a previous action finish first before starting
another one? I think the answer is flatMapFirst)</p>

<p>For the &#8220;additional deletes should be prevented if animating out&#8221;
requirement, there should be some concept of an EventStream that
dilineates the start and end of when a route is active. If you&#8217;re using
LiquidFire this should be after a route has finished transitioning in
and right before the route has started transitioning out
(animation-wise). The idea being that by default actions are filtered
through that window. But how do you do that?</p>

<p>You want a stream that only emits events per some predicate&#8230;</p>

<p>Actually this is probably a good use case for takeWhile&#8230; takeWhile
route is active. http://jsbin.com/tuzifo/2/edit</p>

<p>But given that we might have components already being displayed, but
we&#8217;re not ready to receive their actions, we need to figure out how to
hook them up&#8230;</p>

<p>So what the fuck does <code>&lt;button &gt;Click me&lt;/button&gt;</code>
do?</p>

<pre><code>TopLevelComponent
  MidLevelComponent
    LeafComponent
      &lt;button &gt;Click me&lt;/button&gt;
</code></pre>

<p>Maybe components implicitly pass down an actions stream? And
route-driven components just get a decorated one from the router? And
then Liquid Fire could provide one for components rendered within an
outlet?</p>

<p>actually expands to</p>

<p>&#8230;?</p>

<p>What am I trying to accomplish here? I&#8217;m so lost.</p>

<p>TODO: replace bullshit with something more meaningful.</p>

<p>https://github.com/baconjs/bacon.js#observable-zip</p>

<p>zip only fires when both streams produce a value, else
backpressure/buffering can occur. Difference between these two is that
back pressure occurs when consumers/sinks can&#8217;t consume fast enough;
buffering can occur for other reasons on the source side of things, e.g.
only one stream in zip is producing values and hence buffering up
values. This can be alleviated by choosing a different join pattern than
the zip default.</p>

<p>Use Bacon.when biaaatch.</p>

<h2>Blood pressure</h2>

<p>110/70. What&#8217;s it mean.</p>

<blockquote><p>If your blood pressure is 120/80, 120 represents systolic pressure, or the pressure of blood against artery walls when the heart beats. Eighty represents diastolic pressure, or the pressure between beats.</p></blockquote>

<p>So it&#8217;s like a max min range, pressure will be the highest in the middle
of a heart beat, lowest between.</p>

<p>Systolic = during heart beat. Diastolic = pressure between beats. High
systolic is generally more serious.</p>

<h2>Make no promises</h2>

<p>http://swannodette.github.io/2013/08/23/make-no-promises/</p>

<h2>Buses as an anti-pattern</h2>

<p>http://baconjs.github.io/tutorials.html#content/tutorials/4_Building_Applications_Out_Of_Bacon</p>

<pre><code>var shoppingCartBus = new Bacon.Bus()
$.ajax('/api/cart').done(cart =&gt; shoppingCartBus.push(cart))
...
shoppingCartBus.onValue(cart =&gt; renderCart(cart))
</code></pre>

<p>What happens if the ajax push occurs before the <code>onValue</code> is set? It&#8217;s
missed, nothing gets rendered. It&#8217;s the same as</p>

<pre><code>var wat = new Wat();
// ...
wat.foo = new Foo();
</code></pre>

<p>What if someone does something depending on <code>.foo</code> being present? Boom.</p>

<p>Solution: inject your dependencies. Pass in buses. Pass in your inputs.
Pass in your actions.</p>

<p>This is kinda fucky:</p>

<pre><code>function ShoppingCartView(cart) {
  return {
    cartView: ...
    removeItemStream: $('#shopping-cart').asEventStream('click', '.remove-item')
      .map(function(e) { return $(e.currentTarget).data('id') })
}
</code></pre>

<p>So creating a view not only just creates the view but also returns the
&#8220;outputs&#8221; of the view, e.g. the actions being emitted from the view.
But this causes cyclic dependencies because you want to pass in a cart
model which provides inputs to the view but you want to provide the
outputs of that view back to the model, but also avoid the temporal
construction issues.</p>

<h2>RX vs Bacon</h2>

<p>https://github.com/baconjs/bacon.js#for-rxjs-users</p>

<p>Bacon offers EventStreams and Properties, subclasses of Observables,
whereas RxJS just has Observables. So how do current values work in RxJS
or do you always have to save it to some state?</p>

<h2>RX hot/cold observables</h2>

<p>https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/creating.md#cold-vs-hot-observables</p>

<p>TODO read about this.</p>

<h2>Hemipenes</h2>

<p>http://en.wikipedia.org/wiki/Hemipenis</p>

<p>Snakes have two penises, or penes, called hemepenes. Only one is used.
It&#8217;s a spiky weird thing that bloats out when aroused. Other similarly
animals have them, like lizards. Sharks have two &#8220;penises&#8221; but they&#8217;re
called claspers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learnin Clojure]]></title>
    <link href="http://machty.github.com/blog/2014/12/17/learnin-clojure/"/>
    <updated>2014-12-17T12:52:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/12/17/learnin-clojure</id>
    <content type="html"><![CDATA[<h2>Joy of Clojure</h2>

<ul>
<li>Imperative

<ul>
<li>a sequence of statements mutates program state</li>
</ul>
</li>
<li>maenad (maenadic): wild and unrestrained: a female follower of
Bacchus, traditionally associated with divine possession and frenzied
rites</li>
<li>expression problem

<ul>
<li>&#8220;The Expression Problem is a new name for an old problem. The
goal is to define a datatype by cases, where one can add new cases
to the datatype and new functions over the datatype, without
recompiling existing code, and while retaining static type safety
(e.g., no casts).&#8221;</li>
<li>Java requires these to be declared up front, suffers</li>
<li>Why the &#8220;expression&#8221; problem? &#8216;The label &#8220;Expression Problem&#8221; puns on expression = &#8220;how much can your language express&#8221; and expression = &#8220;the terms you are trying to represent are language expressions&#8221;.&#8217;</li>
</ul>
</li>
</ul>


<!--more-->


<h2>Protocols</h2>

<p>Almost like defining global functions but require that first arg(?)
adheres to a given protocol.</p>

<pre><code>(defprotocol Searchable
  (search [this query]))
</code></pre>

<p>then</p>

<pre><code>(extend-type String
  Searchable
  (search [this] 
    (search [this query]
      (someshit))))
</code></pre>

<blockquote><p>The resulting functions dispatch on the type of their first argument, and thus must have at least one argument</p></blockquote>

<p>MAKES SENSE.</p>

<h2>Expression Problem</h2>

<p>You have</p>

<ul>
<li>a set of abstract methods you&#8217;d like to implement&#8230;</li>
<li>&#8230;for an existing concrete class&#8230;</li>
<li>&#8230;without changing the code for either the existing abstract methods
or the concrete class</li>
</ul>


<p>Ruby&#8217;s solution means reopening the class, possibly monkey patching.
Clojure&#8217;s solution is protocols&#8230; defining functions that dispatch
based on the type of the first arg.</p>

<p>Ruby suffers a namespacing issue, hence the danger of monkey patching.
In Ruby everything is a message, easy to accidentally overwrite a method
handler. Maybe there&#8217;s a namespace issue in Clojure too, if you&#8217;re not
careful, but whatever I just need to learn more shit.</p>

<h2>Clojure: namespaces</h2>

<p><code>(ns dumb.shit)</code></p>

<p>and you have <code>defn-</code> macros to declare private methods.</p>

<p>Namespaces encapsulate, but you can also use lexical closures for
encapsulation.</p>

<h2>Keywords</h2>

<p><code>:asd</code> is not a symbol, it&#8217;s a &#8220;keyword&#8221;. <code>asd</code> is a symbol, and is
substituted with some underlying value.</p>

<h2>Collections</h2>

<h3>Lists</h3>

<p><code>(a b c)</code> is just a list. When it gets evaluated, <code>a</code> will be treated
as a function, macro, or operator.</p>

<p>Vectors&#8230; don&#8217;t get evaluated? Why don&#8217;t they make a bigger deal about
this?</p>

<pre><code>[1 2 3]
(vector 1 2 3)
</code></pre>

<h2>Commas are whitespace</h2>

<pre><code>user=&gt; { 1 1 2, 2 }
{1 1, 2 2}
</code></pre>

<h2>prefix/infix</h2>

<pre><code>+ 1 2 3 4 5 6 7
</code></pre>

<p>vs</p>

<pre><code>1 + 2 + 3 + 4 + 5 + 6 + 7
</code></pre>

<p>Prefix allows any number of args.</p>

<p>Also, when everything is prefix, no question of operator precedence.</p>

<h2>Vars</h2>

<p>don&#8217;t need to be bound</p>

<pre><code>user=&gt; (def y)
#'user/y
user=&gt; y
#&lt;Unbound Unbound: #'user/y&gt;
</code></pre>

<h2>Special form</h2>

<p>A Clojure expression that&#8217;s part of core language but not created via
normal functions, types, or macros.</p>

<h2>Lisp</h2>

<p>stands for &#8220;LISt Processing&#8221;</p>

<h2>def defn</h2>

<p><code>def</code> associates a symbol w Clojure data (could be some primitive, or a
function, or whatever).</p>

<pre><code>(def a (fn [] (println "wat")))
</code></pre>

<p><code>defn</code> is a macro that wraps the above (and also lets you apply
documentation).</p>

<pre><code>(defn a "i am a stupid fn" [] (println "wat"))
(defn a [] (println "wat"))
</code></pre>

<p>You can use <code>defn</code> for multi-arity fns</p>

<pre><code>user=&gt; (defn a ([a] #{a}) ([a b] #{a b}))
#'user/a
user=&gt; (a 2)
#{2}
user=&gt; (a 2 3)
#{3 2}
user=&gt; (a 2 3 4)
ArityException Wrong number of args (3) passed to: user/a  clojure.lang.AFn.throwArity (AFn.java:429)
</code></pre>

<p>What&#8217;s weird about this is <code>([n] #{n})</code>&#8230; if you&#8217;re evaluating this,
won&#8217;t it try to immediate run <code>[n]</code> as if it were a fn? Yes! But we&#8217;re
not evaluating&#8230; we&#8217;re in a macro! Eval rules don&#8217;t apply while shit is
getting reorganized by the macro code. Kiiiinda fuckin weird.</p>

<p>Multi-arity accomplished via</p>

<pre><code>(defn a [&amp; x] (apply vector x))
</code></pre>

<h2>Homoiconicity</h2>

<p>http://en.wikipedia.org/wiki/Homoiconicity</p>

<p>It means your program&#8217;s AST is the same as its syntax, basically.
Homoiconicity is a feature of Clojure.</p>

<h2>Reader features</h2>

<p>Like C++ preprocessor macros, rearrange shit (but somehow isn&#8217;t a
macro?). <code>#()</code> is an inplace function reader feature that gets replaced
with special form <code>def</code>.</p>

<pre><code>user=&gt; (def a #(vector %1 %3))
#'user/a
user=&gt; (a 1 2 3)
[1 3]
</code></pre>

<p>The above example shows that you can skip an numbered arg and still wind
up with an arity of 3.</p>

<pre><code>(def a #(vector % % %))
user=&gt; (a 1)
[1 1 1]
</code></pre>

<h2>Blocks</h2>

<p>do blocks, usually side-effecty</p>

<pre><code>user=&gt; (do
  #_=&gt; (println "wat")
  #_=&gt; (println "omg")
  #_=&gt; 3)
wat
omg
3
</code></pre>

<h2>Locals (not variables)</h2>

<p>Useless:</p>

<pre><code>(let [] (println "wat"))
</code></pre>

<p>Useful</p>

<pre><code>(let [a 5] (println "a is" a))
</code></pre>

<p>Why a vector and not a map? I guess because let internally needs to loop
through each thing?</p>

<p>Note the use of &#8220;form&#8221;. It&#8217;s <code>let</code> form, it&#8217;s a <code>do</code> form. <code>def</code> is a
special form&#8230; still need to tease this out. I guess form just means
language pattern building block that depends on basic Closure types
(functions, primitives, etc).</p>

<h2>Loops</h2>

<p>Use tail recursion. <code>recur</code> is a special form.</p>

<p>BEFORE I MENTION THAT THOUGH I figured out how to rewrite a fn that runs
a callback twice</p>

<pre><code>user=&gt; (defn twice ([some-fn] (twice some-fn true)) ([some-fn first] (some-fn) (when (true? first) (twice some-fn false) ) ))
#'user/twice
user=&gt; (twice #(println "hello"))
hello
hello
</code></pre>

<p>Could have also used special form <code>fn</code>:</p>

<pre><code>(twice (fn [] (println "hello")))
</code></pre>

<h2>Android camera bug</h2>

<p>Only on Nexus 5, we had a bug where switching between front and back
camera failed, reason being something to do with the fact that there&#8217;s
no guarantee that front and back will have the same aspect ratio /
resolution, so you need to reinitialize some shits. ISN&#8217;T ANDROID
FUN?!?!?!?!?!</p>

<h2>Clojure <code>set!</code></h2>

<pre><code>(def a (java.awt.Point. 0 0))
(.-x a)
; 0
(set! (.-x a) 1)
; 1
(.-x a)
; 1
</code></pre>

<p>So you can think of <code>(.-x a)</code> as a descriptor that <code>set!</code> can operate
on. Hmm does that mean <code>set!</code> is a macro?</p>

<p>http://clojure.org/java_interop#Java%20Interop-The%20Dot%20special%20form-%28set!%20%28.%20Classname-symbol%20staticFieldName-symbol%29%20expr%29</p>

<p>Apparently it&#8217;s a special form.</p>

<h2>Abstract Window Toolkit</h2>

<p>java.awt stands for Abstract Window Toolkit.</p>

<h2>Capture output</h2>

<pre><code>(with-out-str (println "fuckles"))
; "fuckles"
</code></pre>

<p>You can also use this to capture the output of <code>doc</code>, which gets
docstring:</p>

<pre><code>(defn a "a dumb thing" [] (println()))
(doc a)
(with-out-string (doc a))
</code></pre>

<h2>What are all the special forms?</h2>

<p>They&#8217;re like special hooked-into compiler macros that do special things
you couldn&#8217;t do with macros.</p>

<pre><code>clojure.lang.Compiler/specials
{&amp; nil, monitor-exit #&lt;Parser clojure.lang.Compiler$MonitorExitExpr$Parser@14483946&gt;, case* #&lt;Parser clojure.lang.Compiler$CaseExpr$Parser@3826c025&gt;, try #&lt;Parser clojure.lang.Compiler$TryExpr$Parser@1a54177e&gt;, reify* #&lt;ReifyParser clojure.lang.Compiler$NewInstanceExpr$ReifyParser@5d473d44&gt;, finally nil, loop* #&lt;Parser clojure.lang.Compiler$LetExpr$Parser@770f1aba&gt;, do #&lt;Parser clojure.lang.Compiler$BodyExpr$Parser@86b7485&gt;, letfn* #&lt;Parser clojure.lang.Compiler$LetFnExpr$Parser@5e223ed2&gt;, if #&lt;Parser clojure.lang.Compiler$IfExpr$Parser@10668c26&gt;, clojure.core/import* #&lt;Parser clojure.lang.Compiler$ImportExpr$Parser@3636d04a&gt;, new #&lt;Parser clojure.lang.Compiler$NewExpr$Parser@39c8704e&gt;, deftype* #&lt;DeftypeParser clojure.lang.Compiler$NewInstanceExpr$DeftypeParser@17f1292f&gt;, let* #&lt;Parser clojure.lang.Compiler$LetExpr$Parser@59c6d8f0&gt;, fn* nil, recur #&lt;Parser clojure.lang.Compiler$RecurExpr$Parser@75c7b6d7&gt;, set! #&lt;Parser clojure.lang.Compiler$AssignExpr$Parser@77a7ed63&gt;, . #&lt;Parser clojure.lang.Compiler$HostExpr$Parser@615e29b9&gt;, var #&lt;Parser clojure.lang.Compiler$TheVarExpr$Parser@7c8deca3&gt;, quote #&lt;Parser clojure.lang.Compiler$ConstantExpr$Parser@79dce7a9&gt;, catch nil, throw #&lt;Parser clojure.lang.Compiler$ThrowExpr$Parser@cbff27f&gt;, monitor-enter #&lt;Parser clojure.lang.Compiler$MonitorEnterExpr$Parser@567fbf5a&gt;, def #&lt;Parser clojure.lang.Compiler$DefExpr$Parser@3a450e&gt;}
</code></pre>

<p>Or just</p>

<pre><code>(sort (keys clojure.lang.Compiler/specials))
(&amp; . case* catch def deftype* do finally fn* if let* letfn* loop* monitor-enter monitor-exit new quote recur reify* set! throw try var clojure.core/import*)
</code></pre>

<h2>Java <code>..</code> interop macro</h2>

<pre><code>(.. (java.util.Date.) toString (endsWith "2014"))
</code></pre>

<p>Could also write</p>

<pre><code>(.. (java.util.Date.) (toString) (endsWith "2014"))
</code></pre>

<p>TLDR the <code>..</code> macro will unwrap each argument and treat as fn
invocation.</p>

<h2>ligsigsegv</h2>

<p>http://www.gnu.org/software/libsigsegv/</p>

<p><code>clisp</code> uses this&#8230; it&#8217;s a way you can implement virtual memory in user
space. Probably some clever shit that clisp and other zany interpreters
use.</p>

<h2>Namespace</h2>

<p>Cutting to that Chase™.</p>

<h2>What is &amp;?</h2>

<pre><code>user=&gt; [&amp; asd]
CompilerException java.lang.RuntimeException: Unable to resolve symbol: &amp; in this context, compiling:(NO_SOURCE_PATH:0:0)
</code></pre>

<p>so when can you use it?</p>

<pre><code>(fn [&amp; asd])
</code></pre>

<p>this is a fn that takes any number of args:</p>

<pre><code>((fn [&amp; asd]))
((fn [&amp; asd]) 1)
((fn [&amp; asd]) 1 2)
</code></pre>

<p>Basically fn is a macro and can rearrange &amp;, which is just a symbol.</p>

<h2>Anaphoric Macros</h2>

<p>http://amalloy.hubpages.com/hub/Unhygenic-anaphoric-Clojure-macros-for-fun-and-profit</p>

<p>TL;DR useful in some cases for code generation.</p>

<p>Basically you should always use backtick <code>\`` (for fully qualified
symbols) rather thaaaaaaan boring ol single quote</code>&#8217;`.</p>

<h2>Destructuring</h2>

<p>Programming language concept of breaking apart some data structure into
assigned variables. Pattern matching in Haskell is a form of this.
Ruby&#8217;s array destructuring assignment has</p>

<pre><code>a,b = [1,2]
</code></pre>

<p>Apparently even Firefox has some o dat shit</p>

<pre><code>var a,b;
[a,b] = [1,2];
</code></pre>

<p>In Clojure, you don&#8217;t have pattern matching a la Haskell but you still
have parameter destructuring, the difference being (I think) that
vanilla Clojure won&#8217;t match an argument signature and decide which
version of the fn to run (unless you add the <code>core.match</code> module, which
might be a core feature at some point).</p>

<p>Basically Clojure has similar features to Ruby.</p>

<h2>npm pretest</h2>

<pre><code>"pretest": "ember build",
"test": "bin/run-tests.js",
</code></pre>

<p>TL;DR when testing ember repo (and the server is already running), just
directly run <code>/bin/run-tests.js</code>.</p>

<h2>:keys</h2>

<pre><code>{:keys [a b c]}
</code></pre>

<p>This isn&#8217;t meaningful on its own; it&#8217;s just a map. But it matches one of
the patterns expected by the <code>let</code> macro.</p>

<pre><code>(let [{:keys [a b c]} {:a "wat" :b "the" :c "hell"}]
  (println a b c))
</code></pre>

<p>That doesn&#8217;t rename anything, but if you wanna do that:</p>

<pre><code>(let [{x :a y :b z :c} {:a "wat" :b "the" :c "hell"}]
  (println x y z))
</code></pre>

<p>The key thing to remember is that the symbol needs to be on the left:
<code>{x :a y :b z :c}</code>.</p>

<p>Means you could also do</p>

<pre><code>(defn a [{a :first-name b :last-name} h]
  (println "HAHA" a " " b))
</code></pre>

<p>WRONG because of <code>h</code>. These are fn params, not <code>let</code> args that are
presented up front, so we actually want:</p>

<pre><code>(defn a [{a :first-name b :last-name}]
  (println "HAHA" a " " b))
</code></pre>

<p>followed by</p>

<pre><code>(a {:first-name "Wat" :last-name "McMatchneer"})
</code></pre>

<h2>rationalize</h2>

<p>Converts, say, a float to a fraction.</p>

<h2>Clojure keywords as fns</h2>

<pre><code>user=&gt; (def a { :a 123 })
#'user/a
user=&gt; (:a a)
123
</code></pre>

<p>If a keyword is in fn position, it does a lookup of itself on the hash
arg passed to it. Otherwise you&#8217;d have to do:</p>

<pre><code>user=&gt; (get a :a)
123
</code></pre>

<h2>So many seqs</h2>

<p><code>Collection</code>: a composite data type: sequence, map, or set.</p>

<p><code>Sequential</code>: ordered series of values (as opposed to, say, a set or a
map)</p>

<p><code>Sequence</code>: a sequential collection that may or may not exist yet, e.g.
it could be a vector or it could be a lazy-seq of yet-to-be-computed
thunks.</p>

<p><code>Seq</code>: an API for navigating collections: <code>first</code>, <code>rest</code>, nil, and
<code>()</code>. Basically, vectors, lists, PersistentLists are all <code>seq</code>s.</p>

<p><code>seq</code>, of <code>clojure.core/seq</code>, is a fn that returns an object
implementing <code>Seq</code> API, or nil if collection is empty. <code>seq</code> returns &#8220;an
immutable variant of an iterator/enumerator`</p>

<h2>Equality partition</h2>

<p>Collections are partitioned into the following categories:</p>

<ul>
<li>Sequentials</li>
<li>Map</li>
<li>Set</li>
</ul>


<p><code>(=)</code> of two objects from different partitions is always false; e.g.
vector compared w hash w same objs is false.</p>

<p>Within a partition, different concrete types might equal each other:</p>

<pre><code>(= [:a :b :c] '(:a :b :c))
true
</code></pre>

<h2>cons-cell</h2>

<p>Two-cell structure upon which Lisps build their data types. Maps to
first and rest in Clojureland.</p>

<p>Pretty sure this is how sequences are implemented (immutable/persistent
data structures).</p>

<h2>(class) and .getClass</h2>

<p>Same thing? Maybe?</p>

<pre><code>user=&gt; (class (java.awt.Point.))
java.awt.Point
user=&gt; (.getClass (java.awt.Point.))
java.awt.Point
</code></pre>

<h2>map</h2>

<p>GOD this shit is so cool.</p>

<p><code>map</code> takes a fn and any number of collections afterward, applies a
function to the first items, then second items, etc.</p>

<p>It&#8217;s like a zip. But with a map. SO COOL.</p>

<pre><code>(map #(apply + %&amp;) [1 2 3] [4 5 6] '(7 8 9))
</code></pre>

<p>or</p>

<pre><code>(map vector (range 5) (range 6) (range 7))
([0 0 0] [1 1 1] [2 2 2] [3 3 3] [4 4 4])
</code></pre>

<h2>vec or vector</h2>

<pre><code>user=&gt; (vec [1 2 3 4 5])
user=&gt; (apply vector '(1 2 3 4 5))
</code></pre>

<p>Basically <code>vec</code> accepts a single collection arg whereas <code>vector</code> accepts
multiple args. Both create vectors.</p>

<p>Hence</p>

<pre><code>(vec (map char (range 65 76)))
</code></pre>

<p>Many ways to look up a value in vector.</p>

<ul>
<li>nth</li>
<li>get</li>
<li>vector as fn</li>
</ul>


<p>BARF BARF BARF</p>

<pre><code>user=&gt; (assoc [4 5 6] 0 "wat")
["wat" 5 6]
</code></pre>

<p>REMEMBER that defn let&#8217;s you define multiple fn bodies per arity.
You see this when the arg vector doesn&#8217;t immediately follow the name,
but a list (starting w arg vector) does.</p>

<p>e.g.</p>

<pre><code>(defn mach-inc
  ([n] (mach-inc n 1))
  ([n i] (+ n i)))
</code></pre>

<p>So now I&#8217;ve made an inc fn that takes an optional increment amount, but
defaults to 1. If it were just a single-body fn, it&#8217;d be all</p>

<pre><code>(defn mach-inc-single [n]
  (+ n 1))

user=&gt; (mach-inc-single 5)
6
</code></pre>

<p>How to curry? Use partial. This adds two to everything.</p>

<pre><code>(map (partial + 2) (range 10))
</code></pre>

<p>Rad. Radsauce!</p>

<p>Vectors as stacks: <code>conj</code> and <code>pop</code>. Use <code>peek</code> a lot since <code>pop</code>
returns new immutable fucker.</p>

<h2><code>map</code> in Lisps, conj vs cons</h2>

<p>Apparently Clojure&#8217;s mapping over collections is more efficient because
it kinda lets you cheat w vectors. In Lisps without vectors you just
have lisps, and as you push to an accumulator</p>

<p>Ah ok let&#8217;s talk about cons vs conj.</p>

<p><code>cons</code> unshifts and returns a seq (or a <code>clojure.lang.Cons</code>?):</p>

<pre><code>user=&gt; (cons 4 [1 2 3])
(4 1 2 3)
user=&gt; (class (cons 4 [1 2 3]))
clojure.lang.Cons
</code></pre>

<p>Same thing if you pass in a list</p>

<pre><code>ArityException Wrong number of args (1) passed to: core/cons  clojure.lang.AFn.throwArity (AFn.java:429)
user=&gt; (cons 4 `(1 2 3))
(4 1 2 3)
</code></pre>

<p>WAAT apparently backtick does some implicit cons</p>

<pre><code>user=&gt; (class '(1 2 3))
clojure.lang.PersistentList
user=&gt; (class `(1 2 3))
clojure.lang.Cons
user=&gt; (class (quote (1 2 3)))
clojure.lang.PersistentList
</code></pre>

<p>Anyyyyway, <code>conj</code> returns a collection as close to the input collection
as possible. And it &#8220;push&#8221;es.</p>

<pre><code>user=&gt; (conj #{1 2 3} 4)
#{1 4 3 2}
user=&gt; (conj [1 2 3] 4)
[1 2 3 4]
user=&gt; (conj '(1 2 3) 4)
(4 1 2 3)
</code></pre>

<p>Ah HAH! In fact it DOESN&#8217;T always push&#8230; it inserts at the end that
makes the most sense given the data type (&#8220;in the most efficient way&#8221;):</p>

<pre><code>user=&gt; (conj [1 2 3] 4)
[1 2 3 4]
user=&gt; (conj '(1 2 3) 4)
(4 1 2 3)
</code></pre>

<p>SOOO</p>

<ul>
<li>cons

<ul>
<li>NOT homogeneous; no guarantee <code>next</code> chain will be list</li>
<li>only guarantee is that <code>next</code> is a seq. Which means you can append
to the beginning of any stupid thing. That&#8217;s why there&#8217;s
<code>clojure.lang.Cons</code> as its own type; it could point to anything.
<code>(class (next some-cons))</code> could be aaaany number of things
depending on how you composed the <code>cons</code>.</li>
</ul>
</li>
<li>conj

<ul>
<li>homogeneous: <code>next</code> is always the same type as wha you created it
with, whether list or vector or chunked seq from a vector, etc.</li>
<li><code>nil</code> starting list defaults to a PersistentList (but an empty vec
will be a vec, lol)</li>
</ul>
</li>
</ul>


<p>Unfortunately all seqs print w parentheses, but they could by all sorts
of different types of shit.</p>

<pre><code>user=&gt; (class (seq [1 2 3]))
clojure.lang.PersistentVector$ChunkedSeq
user=&gt; (class (seq '(1 2 3)))
clojure.lang.PersistentList
</code></pre>

<h2>recur</h2>

<p>http://clojure.org/special_forms#recur</p>

<blockquote><p>Note that recur is the only non-stack-consuming looping construct in Clojure. There is no tail-call optimization and the use of self-calls for looping of unknown bounds is discouraged. recur is functional and its use in tail-position is verified by the compiler.</p></blockquote>

<p>Interesting.</p>

<h2>No shift/unshift</h2>

<p>Why? Because internally the fns that manipulate the left side of a
vector return <code>seq</code>s, not vectors, which severs the ability to use
vector fns in an optimized way, reusing datastructures, etc.</p>

<p>So if you have</p>

<pre><code>user=&gt; (vec (range 5))
[0 1 2 3 4]
</code></pre>

<p>then doing</p>

<pre><code>user=&gt; (rest (vec (range 5)))
(1 2 3 4)

user=&gt; (class (rest (vec (range 5))))
clojure.lang.PersistentVector$ChunkedSeq
</code></pre>

<p>So you have a sequence <em>based</em> on a vector, but it&#8217;s not the original
vector, so you don&#8217;t have the same vetor fns available. If you want to
convert to vector again to get all those tasty shits, it&#8217;ll be O(n),
probably both time and space.</p>

<p>You can&#8217;t subvec a vec unexpect the original vec to be garbage collected
because subvec maintains a reference.</p>

<h2>PersistentList</h2>

<ul>
<li>singly-linked</li>
<li>every node knows distance from end</li>
<li><p>can only traverse from left to right</p>

<p>  (defmethod print-method clojure.lang.PersistentQueue</p>

<pre><code>[q w]
(print-method '&lt;- w)
(print-method (seq q) w)
(print-method '-&lt; w))
</code></pre></li>
</ul>


<h2>Shitty things</h2>

<p>It doesn&#8217;t seem like Clojure will yell at you if you mess up and use the
wrong kind of function for a collection. e.g. <code>rest</code> and <code>pop</code> do
similar things to a PersistentQueue, but <code>rest</code> yields a <code>seq</code>, and
<code>pop</code> yields a Queue, the former which gets rid of a lot of performance
improvements. The behavior you&#8217;ll see, since all <code>seq</code>s seem to
implement the same fns</p>

<h2>What the hell</h2>

<pre><code>(some #( if (even? %) % nil ) [1 3 4])
</code></pre>

<p>Sets and maps can behave like predicates.</p>

<pre><code>(#{4 9 10} 9)
9
user=&gt;     (#{4 9 10} 11)
nil
</code></pre>

<p>So you can use this idiom:</p>

<pre><code>(some #{:b} [:a 1 :b 2])
</code></pre>

<p>this runs through each collection on the right and checks to see if each
element is in the collection on the left, because the collection on the
left acts like a predicate.</p>

<h2>APR</h2>

<p>Annual Percentage Rate. Based on prime rate, e.g. add 12.74% to prime
rate to determine purchase annual percentage rate.</p>

<p>You can have a credit card and not pay interest if you pay in full all
the time. You must always pay the minimum rate, or else you get a
penalty. But the idea is that you can pay your minimum rate, and
anything above that is subject to an APR. Penalty APR might apply
indefinitely. Again, doesn&#8217;t matter (other than a shitty credit score)
if you always pay the full balance after that (APR only affects the
unpaid balance).</p>

<p>Balance transfers are transferring outstanding balances between cards,
likely from one w a higher APR to one w lower. New cardholders might be
offered 0% balance transfer API with the idea that you&#8217;ll transfer money
to it right away because you&#8217;re so hopelessly in debt. APR applies
differently to different types of debits on your account, and balance is
one kind of debit, so if you had a balance transfer APR 5% higher than
purchase APR, that&#8217;s basically discouraging you from putting balance
transfers into that new account (makes sense, it&#8217;s kind of a risky thing
if you&#8217;re just adopting new CCs and constantly transferring balances to
them; then again it&#8217;ll also be limited by your max credit line. There&#8217;s
also per-transaction fees, e.g. <code>max($5, 3%)</code>.</p>

<p>Cash transfer is when you debit one card, credit another. Different than
balance transfer because in one you&#8217;re trading a debt, in the other
you&#8217;re trading credit (cash). Per-transaction fee is <code>max($10, 3%)</code>.</p>

<p>Overdraft Advance is the ability to automatically withdraw from a credit
card if your debit card / check bounces. You have to go through the
hoops and set it up online, linking to a checking account.</p>

<p>US Prime Rate is 300 points above federal funds rate.</p>

<blockquote><p>In general, the United States prime rate runs approximately 300 basis points (or 3 percent) above the federal funds rate. The Federal Open Market Committee (FOMC) meets eight times per year wherein they set a target for the federal funds rate. Other rates, including the prime rate, derive from this base rate.</p></blockquote>

<p>Credit cards actually talk about referencing the prime rate printed in
the Wall Street Journal; &#8220;If WSJ stops publishing the Prime Rate, we
will select a similar preference rate.&#8221;</p>

<p>Variable rate just means it might change if the prime rate changes, or
other reasons.</p>

<p>Cash advances mean ATM withdrawals among other things.</p>

<p>Any amount over the minimum payment account gets applied to payment APR
first, and descending to other APR types (which might be higher or
lower). It trickles down.</p>

<h2>Interest charges</h2>

<p>Daily balance approach is common:</p>

<ul>
<li>take starting balance and add

<ul>
<li>interest charge from prior day (compounding interest)</li>
<li>new transactions/debits</li>
</ul>
</li>
<li>subtract payments/credits</li>
<li>daily balance = max(0, balance) (net credit balance treated as zero)</li>
<li>Daily interest rate = APR/365.</li>
<li>Multiply each type of APR by applicable balance type (payments are
different than balance transfers, etc)</li>
<li>If interest > 0, interest = max(MinimumInterest, interest)

<ul>
<li>MinimumInterest is often 0</li>
</ul>
</li>
</ul>


<h2>Clojure: into</h2>

<p>Pour values into collections:</p>

<pre><code>(into {} {:a 1 :b 2})
{:b 2, :a 1}
(into {} [[:a 1] [:b 2]])
{:a 1, :b 2}
</code></pre>

<p>The latter stems from the fact that providing a map to <code>seq</code> generates a
shit:</p>

<pre><code>(seq {:a 1 :b 2})
([:b 2] [:a 1])
</code></pre>

<h2>Clojure maps</h2>

<p><code>{}</code> is actually ArrayMap, but most common is HashMap:</p>

<pre><code>(hash-map :a 123)
</code></pre>

<p><code>zipmap</code> takes a keys and values array</p>

<pre><code>(zipmap [:k0 :k1] [:v0 :v1])
{:k1 :v1, :k0 :v0}

(zipmap [:k0 :k1] [:v0 :v1 :v2])
{:k1 :v1, :k0 :v0}

(zipmap [:k0 :k1 :k2] [:v0 :v1])
{:k1 :v1, :k0 :v0}
</code></pre>

<p>The latter two demonstrate that it stops at the smallest array.</p>

<h2>second</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (doc second)
</span><span class='line'>-------------------------
</span><span class='line'>clojure.core/second
</span><span class='line'>([x])
</span><span class='line'>  Same as (first (next x))</span></code></pre></td></tr></table></div></figure>


<h2>invariant</h2>

<p>Assertions in functional land.</p>

<h2>equality</h2>

<p>Meaningless in a mutable system. If you&#8217;re not guaranteed to be equal to
another object forever, then you&#8217;re not equal.</p>

<p>Ooo unrelated by <code>let</code> locals can refer to previous ones in the same let
binding vector:</p>

<pre><code>(let [v [4 5 6] a (first v)] (println a))
4
</code></pre>

<p>Anyway, immutable objects share data:</p>

<pre><code>(let [v [4 5 6] v0 (cons 1 v) v1 (cons 2 v)] (= (rest v0) (rest v1)))
</code></pre>

<p>aaaaand they&#8217;re actually identical:</p>

<pre><code>(let [v [4 5 6] v0 (cons 1 v) v1 (cons 2 v)] (identical? (rest v0) (rest v1)))
false
</code></pre>

<p>WHOOPSY DAISY: this is apparently wrong because I&#8217;m using a vector and
not a list&#8230; why? Let&#8217;s see what class they are</p>

<pre><code>(let [v [4 5 6] v0 (cons 1 v) v1 (cons 2 v)] (map class (map next [v0 v1])) )
(clojure.lang.PersistentVector$ChunkedSeq clojure.lang.PersistentVector$ChunkedSeq)
</code></pre>

<p>So <code>cons</code> casts the provided collection to a <code>seq</code>, and the vector
obliges by giving it a chunked sequence, which loses all the vector-y
stuff about it. No casting needs to take place if it&#8217;s already a seq
though, hence lists work.</p>

<p>CONFUSING SHIT:</p>

<pre><code>user=&gt; (def h {:a 1})
#'user/h
user=&gt; (h :a)
1
user=&gt; (:a h)
1
</code></pre>

<p>Basically, both keywords and collections themselves can behave like fns.</p>

<h2>&#8220;changes&#8221; in immutable structures</h2>

<p>A new root &#8220;node&#8221; is always returned, whether you&#8217;re pushing to a
vector, etc, but it might point to the same things.</p>

<h2>lazy-seq, thunks</h2>

<p>A thunk is a description of an operation, usually one step in an
iteration. Lazy-seq presumably rearranges your eager seq operations
into lazy thungs.</p>

<p>If you hold onto the head of a lazy sequence though, you can lose all
the benefits because the head (and the rest of the sequence) won&#8217;t be
garbage collected. <code>lazy-seq</code> is only useful when intermediate
calculations can be forgotten, hence the difference between the
following:</p>

<pre><code>(let [r (range 1e10)]
  (first r) 
  (last r))

(let [r (range 1e10)]
  (last r)   ; r still needed for following calc, so clojure doesn't clear it
  (first r))
</code></pre>

<p>Basically we broke the rule of holding onto to the head, which means
things might not get garbage collected the way we&#8217;d like; this can
happen in any case where we do bindings, whether let or fn arg bindings.</p>

<p>So while Clojure&#8217;s smart enough to aggressively clear out (for GC)
locals it no longer needs, it won&#8217;t rearrange code for us because it has
no way of knowing whether <code>first</code> and <code>last</code> are pure, which might make
it unsafe to re-order; note that Haskell doesn&#8217;t have this problem
because it&#8217;s purely functional.</p>

<h2>iterate</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (doc iterate)
</span><span class='line'>-------------------------
</span><span class='line'>clojure.core/iterate
</span><span class='line'>([f x])
</span><span class='line'>  Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects</span></code></pre></td></tr></table></div></figure>


<p>Ah so x doesn&#8217;t even need to be a liast, could just be a number.</p>

<pre><code>(second (iterate inc 1))
2 
</code></pre>

<h2><code>-&gt;</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clojure.core/-&gt;
</span><span class='line'>([x & forms])
</span><span class='line'>Macro
</span><span class='line'>  Threads the expr through the forms. Inserts x as the
</span><span class='line'>  second item in the first form, making a list of it if it is not a
</span><span class='line'>  list already. If there are more forms, inserts the first form as the
</span><span class='line'>  second item in second form, etc.</span></code></pre></td></tr></table></div></figure>


<p>I have no fucking idea.</p>

<h2>take</h2>

<pre><code>user=&gt; (take 5 (iterate inc 1))
(1 2 3 4 5)
user=&gt; (take 5 (range))
(0 1 2 3 4)
user=&gt; (take 5 (filter even? (range)))
(0 2 4 6 8)
</code></pre>

<p>Ruby/Rails kept making me thing something like <code>.first(5)</code>, but <code>take</code>
is the functional thing I was looking for.</p>

<p>Unrelated, but</p>

<pre><code>user=&gt; (/ 5)
1/5
</code></pre>

<blockquote><p>If no denominators are supplied, returns 1/numerator,</p></blockquote>

<h2>Quicksort</h2>

<p>I forgot quicksort, so here I go remembering it:</p>

<ul>
<li>Take your array and choose an element in the array (the pivot)</li>
<li>loop through O(n) and swap elements such that all <code>&lt;</code> elements are to
the left of the pivot and all <code>&gt;=</code> elements are to the right.</li>
<li><p>Recurse into the unsorted partitions and do to the same thing.</p>

<p>  4 9 1 3 7 2 8</p>

<pre><code>          P
        &lt; P
      &lt;   P
    &lt;     P
  &lt;       P
&gt;         P
2       8 9
</code></pre>

  4 2 1 3 7 8 9
  &lt;         P

<pre><code>        |
        | 9   -- sorted
    &lt; P |
  &lt;   P |
&lt;     P |
</code></pre>

  &lt;       P |
  4 2 1 3 7 8 9

<pre><code>  &lt; P | |
&lt;   P | |
</code></pre>

<blockquote><pre><code>P | |
</code></pre>

<p>  1 2 3 4 | |
  &#8230;blahblahblah&#8230;
  1 2 3 4 7 8 9</p></blockquote></li>
</ul>


<p>It is sorrrrted. Divide and conquer babeh, like mergesort.</p>

<h2><code>list</code> and <code>list*</code></h2>

<pre><code>user=&gt; (list 1 2 3 4)
(1 2 3 4)
user=&gt; (list [1 2 3 4])
([1 2 3 4])
user=&gt; (list (range 5))
((0 1 2 3 4))
user=&gt; (apply list (range 5))
(0 1 2 3 4)
user=&gt; (list* () () () ())
(() () ())
user=&gt; (list* () () () '(6 7 8))
(() () () 6 7 8)
user=&gt; (list* 3 2 1 '(6 7 8))
(3 2 1 6 7 8)
</code></pre>

<p>So <code>list*</code> is just <code>list</code> where the final arg is a sequence.</p>

<p>unrelated:</p>

<pre><code>user=&gt; (let [a 3 fn #(&lt; % a)] (filter fn '(1 2 3 6)))
(1 2)
user=&gt; (let [a 3 fn #(&lt; % a)] (remove fn '(1 2 3 6)))
(3 6)

(defn sort-parts [work]
  (lazy-seq
    (loop [[part &amp; parts] work]
      (println "work:" work)
      (println "part:" part)
      (if-let [[pivot &amp; xs] (seq part)]
        (let [smaller? #(&lt; % pivot)]
          (recur (list*
            (filter smaller? xs)
            pivot
            (remove smaller? xs)
            parts)))
      (when-let [[x &amp; parts] parts]
        (cons x (sort-parts parts)))))))

(sort-parts (list [9 1 4 2 6]))

work: ([9 1 4 2 6])
part: [9 1 4 2 6]
work: ([9 1 4 2 6])
part: (1 4 2 6)
work: ([9 1 4 2 6])
part: ()
work: ((4 2 6) 9 ())
part: (4 2 6)
work: ((4 2 6) 9 ())
art: (2)
work: ((4 2 6) 9 ())
part: ()
work: (() 4 (6) 9 ())
part: ()
work: ((6) 9 ())
part: (6)
work: ((6) 9 ())
part: ()
work: (() 9 ())
part: ()
work: (())
part: ()
</code></pre>

<p>AH HAH this is fucked up because I was thinking <code>recur</code> was going to
somehow rewrite the value of <code>work</code>. It won&#8217;t. It&#8217;ll change the
&#8220;l-values&#8221;, whereas <code>work</code> is just meant as the initial value of the
&#8220;l-values&#8221;. So it should actually be:</p>

<pre><code>(defn sort-parts [work]
  (lazy-seq
    (loop [[part &amp; parts] work]
      (println "part/recur'd min:" part)
      (println "parts:           " parts)
      (if-let [[pivot &amp; xs] (seq part)]
        (let [smaller? #(&lt; % pivot)]
          (recur (list*
            (filter smaller? xs)
            pivot
            (remove smaller? xs)
            parts)))
      (when-let [[x &amp; parts] parts]
        (println "FULLRECURSE this has been sorted:" x)
        (cons x (sort-parts parts)))))))

(sort-parts (list [9 1 4 2 6]))
</code></pre>

<p>Ahh so the final <code>(cons x (sort-parts parts))</code> is how we return one
sorted element at a time, because <code>cons</code> returns a Cons and is capable
of being lazy. Can you do a lazy-seq with a recur? Probably not, since
recur is almost just a looping construct. The cons as a return value
makes sense, because it returns (cons x lazy-seq).</p>

<p>REMEMBER: destructuring means the &#8220;rest&#8221; list will be nil if nothing&#8217;s
there.</p>

<pre><code>user=&gt; (let [[x &amp; xs] '(1)] (println xs))
nil
</code></pre>

<p>What&#8217;s the difference between a PersistentList <code>()</code> and a seq?</p>

<p>A seq is any collection that implements the <code>Seq</code> api, i.e. you can call
<code>first</code> and <code>rest</code> on it.</p>

<pre><code>user=&gt; (class (seq '(1)))
clojure.lang.PersistentList
user=&gt; (class '(1))
clojure.lang.PersistentList
</code></pre>

<p>Sometimes collections need to be cast in some way into some derivative
class to efficiently implement <code>seq</code>, e.g. vectors:</p>

<pre><code>user=&gt; (class (seq [1]))
clojure.lang.PersistentVector$ChunkedSeq

user=&gt; (class (rest [1 2 3 4]))
clojure.lang.PersistentVector$ChunkedSeq
</code></pre>

<p>So that <code>recur (list *...</code> bit&#8230; <code>list*</code> won&#8217;t flatten the args you
pass to it, so if the filters/removes yield <code>()</code>, then it might recur
with <code>() 5 ()</code>, which then gets split into <code>part=() parts=(5 ())</code>.
Then the <code>if-let</code> will fail because <code>(seq ())</code> yields nil, and then
when-let does&#8230; wait</p>

<p>What&#8217;s the difference between <code>if</code> and <code>when</code>?</p>

<p>https://groups.google.com/forum/#!topic/clojure/WDIZ6VDhSr0</p>

<p>Basically, <code>if</code> is sa special form with format <code>(if test then else?)</code>.
You must always pass a <code>then</code>, but <code>else</code> is optional, but else is
always the arg right after then. So if you wanted to do multiple things
in <code>then</code>, you&#8217;d need to use a <code>do</code>. e.g.</p>

<pre><code>(if true
  (do
    (println "holy")
    (println "shit")))

(if false
  (do
    (println "holy")
    (println "shit"))
  (println "FALSE!!!"))
</code></pre>

<p>But the format of <code>when</code> doesn&#8217;t have an else based on the number of
args because there&#8217;s an implicit do. It&#8217;s a macro. <code>(source when)</code>:</p>

<pre><code>(defmacro when
  "Evaluates test. If logical true, evaluates body in an implicit do."
  {:added "1.0"}
  [test &amp; body]
  (list 'if test (cons 'do body)))
</code></pre>

<h2>cond :else</h2>

<p>http://stackoverflow.com/a/6323249/914123</p>

<p>Things to remember:</p>

<ol>
<li>:else only seems to idiomatically show up with <code>cond</code></li>
<li><p>:else could be replaced by any truthy thing; Clojure / cond don&#8217;t
specifically look out for it, but because it&#8217;s truthy, it&#8217;ll get
evaluated.</p>

<p> user=>     (cond true 123 true 456)
 123
 user=>     (cond false 123 true 456)
 456</p>

<p> user=> (cond (= 4 5) &#8220;haha&#8221; (= 7 9) &#8220;lol&#8221; :else &#8220;HORSES ASS&#8221;)
 &#8220;HORSES ASS&#8221;
 user=> (cond (= 4 5) &#8220;haha&#8221; (= 7 9) &#8220;lol&#8221; :IAMAMONKEYSASSHOLE &#8220;HORSES ASS&#8221;)
 &#8220;HORSES ASS&#8221;
 user=> (cond (= 4 5) &#8220;haha&#8221; (= 7 9) &#8220;lol&#8221; false &#8220;HORSES ASS&#8221;)
 nil</p></li>
</ol>


<h2>Moscow Mule</h2>

<p>A vodka + ginger beer + lemon juice mixed drink in a copper mug.</p>

<p>http://en.wikipedia.org/wiki/Moscow_mule</p>

<p>Invented in the 50s. There was a vodka craze in the 50s.</p>

<p>http://www.thenibble.com/reviews/main/cocktails/vodka-history.asp</p>

<p>Apparently The Mule kicked off the vodka craze. Then came 60s Bond
saying Vodka Martini, shaken not stirred.</p>

<h2>A fish rots from the head down</h2>

<p>I guess it means that whoever&#8217;s in charge sets the example.</p>

<p>http://www.zdnet.com/article/lennart-poetterings-linus-torvalds-rant/</p>

<blockquote><p>&#8220;If Linux had success, then that certainly happened despite, not because of this [Torvald&#8217;s] behavior. I am pretty sure the damage being done by this is quite obvious, it not only sours the tone in the Linux community, it is also teaches new contributors to adopt the same style, but that&#8217;s only if it doesn&#8217;t scare them away in the first place. In other words: A fish rots from the head down.&#8221;</p></blockquote>

<p>Or &#8220;When an organization or state fails, it is the leadership that is
the root cause.&#8221;</p>

<p>And it&#8217;s not true; guts rot before anything near the fish&#8217;s head.</p>

<h2>We aren&#8217;t all comely young women</h2>

<p>http://www.reddit.com/r/pics/comments/2qdubq/we_arent_all_comely_young_women_some_of_are_old/</p>

<p>comely: pleasant to look at</p>

<h2>systemd</h2>

<p>http://en.wikipedia.org/wiki/Systemd</p>

<p>systemd replaces the <code>init</code> daemon, but also refers to the suite of low
level software surrounding this low level tool for</p>

<h2>Clojure: seq cons list</h2>

<ul>
<li>(seq): returns a seq on the passed-in collection. A seq is just
something that&#8217;s guaranteed to implement <code>first</code> and <code>rest</code>, which is
all you need to iterate through a collection. KEY THING: it doesn&#8217;t
append anything, it just converts to a seq. Note that seq returns
whatever&#8217;s passed to it if it&#8217;s already a seq:
<code>(let [a []] (= (seq a) (seq (seq a))))</code></li>
<li><p>(cons): returns a new seq where x is first el and seq is the rest.</p>

<p>  user=> (def a (lazy-seq (range)))
  user=> (class a)
  clojure.lang.LazySeq</p></li>
<li><p>(list) isn&#8217;t just an API of first/rest but is an actual datatype, a
singly linked list where every item knows its distance from the end.</p>

<p>  user=> (let [a (list 1)] (= a ( seq (seq a))))
  true</p></li>
</ul>


<p>Ughhh how is this possible? It seems like a list is already a seq and
hence doesn&#8217;t need to change in any way to be a seq? A list is a
concrete implementation of seq, one that is so close that no translation
needs to take place in the way a vector would.</p>

<h2>Collections as functions</h2>

<pre><code>([6 7 8] 2)
({:a 123} :a)
</code></pre>

<p>Collections act as functions. Not only can collections act as functions,
but functions can act as data, dem FIRST CLASS SHITS.</p>

<p>First class means</p>

<ul>
<li>createable on demand</li>
<li>can be stored in data structure</li>
<li>can be passed into a fn</li>
<li>can be returned from fn</li>
</ul>


<p>Compose w comp</p>

<pre><code>(def fifth (comp first rest rest rest))
</code></pre>

<p>Create on demand nth fn</p>

<pre><code>(defn fnth [n]
  (apply comp
     (cons first
           (take (dec n) (repeat rest)))))

((fnth 5) '[a b c d e])
</code></pre>

<p>So why is this ok?</p>

<pre><code>user=&gt; (class '[123])
clojure.lang.PersistentVector
user=&gt; (class [123])
clojure.lang.PersistentVector
</code></pre>

<p>Basically the quote means things won&#8217;t be evaluated. You&#8217;re quoting.
Which means you can return symbols without them being evaluated.</p>

<p>Anyway, you apply to comp a cons of (first rest rest rest rest)</p>

<pre><code>user=&gt; (map {:a 3 :b 5} [:a :b])
(3 5)
user=&gt; (map (comp keyword #(.toLowerCase %) name) '(a B C))
(:a :b :c)
</code></pre>

<h2>CURRYING in clojure</h2>

<p>Use <code>partial</code>, but partial isn&#8217;t exactly what you might think.
Specifically, it is not currying because currying keeps returning new
functions until concrete args have been provided for all of its args,
whereas with partial, there&#8217;s no concept of a fixed number of args, but
once you&#8217;ve constructed a function with partial, once you invoke that
partial, it immediately tries to evaluate.</p>

<h2>Complement</h2>

<pre><code>((complement even?) 3)
((comp not even?) 3)
(#(not (even? %)) 3)
</code></pre>

<h2>metadata</h2>

<pre><code>(defn join
  {:test (fn []
            (assert
              (= (join "," [1 2 3]) "1,3,3")))}
  [sep s]
  (apply str (interpose sep s)))
</code></pre>

<p>That&#8217;s kinda rad. There&#8217;s also shorthand:</p>

<pre><code>(defn ^:woot ^:yeah fn-name [] (println "yeah"))

(defn fn-name 
  { :woot true, :yeah true }
  [] (println "yeah"))
</code></pre>

<h2>Higher order fn</h2>

<p>one that either</p>

<ul>
<li>takes 1+ fns as args</li>
<li>returns a fn</li>
</ul>


<h2>holy shit</h2>

<pre><code>user=&gt;    (sort-by second [[:a 7] [:c 31] [:b 21]])
([:a 7] [:b 21] [:c 31])
</code></pre>

<p>or comparing different types as if they were strings</p>

<pre><code>(sort-by str [:b :a {} 5 1 2 "c" "a"])
</code></pre>

<p>or treating keywords as fns</p>

<pre><code>(sort-by :lastname [{ :lastname "Match" } { :lastname "Borf" } { :lastname "Sally" }])
</code></pre>

<p>Remember the function-like things! Like keywords.</p>

<h2>EFT</h2>

<p>Electronic Funds Transfer, a means of payment for various sites that
often just means withdrawing from your checking account, so you gotta
enter routing number account number blah blah blah.</p>

<h2>Pure fn</h2>

<ul>
<li>always returns same result given same arguments</li>
<li>no side effects</li>
</ul>


<h2>referential transparency</h2>

<p>The reference to the function is transparent to time. Time has no
effect. It always does the same thing. But if it changes some internal
(or external) state, then you lose it.</p>

<h2>recursion</h2>

<ul>
<li>mundane: explicitly named recursion, rather than mutual or recur</li>
<li>linear: e.g. one stack per iteration</li>
</ul>


<p>Tail-recursive pow</p>

<pre><code>(defn pow [base exp]
  (letfn [(kapow [base exp acc]
             (if (zero? exp)
                acc
                (recur base (dec exp) (* base acc))))]
         (kapow base exp 1)))
</code></pre>

<p>Two techniques for mundane recursion to tail recursion:</p>

<ul>
<li>use internal helper fn</li>
<li>helper fn uses an accumulator</li>
</ul>


<p>Another way to avoid stack overflow exceptions with mundane recursion is
to pair w lazy-seq.</p>

<h2>Arrow</h2>

<p>The &#8220;thread-first&#8221; macro (AKA &#8220;thrush&#8221; operator?)</p>

<pre><code>http://clojuredocs.org/clojure.core/-%3E

user=&gt; (+ 3 (+ 4 (+ 5)))
12
user=&gt; (-&gt; 5
  #_=&gt;     (+ 4)
  #_=&gt;     (+ 3))
12
</code></pre>

<p>It basically inverts nestings:</p>

<pre><code>user=&gt; (-&gt; "a b c d" 
           .toUpperCase 
           (.replace "A" "X") 
           (.split " ") 
           first)
</code></pre>

<p>Useful for pulling values out of deeply nested shits:</p>

<pre><code>user=&gt; (let [h {:a {:b {:c 123}}}] (-&gt; h :a :b :c))
123
</code></pre>

<h2>Partition</h2>

<pre><code>user=&gt; (partition 2 [1 2 3])
((1 2))
user=&gt; (partition 2 [1 2 3 4])
((1 2) (3 4))
</code></pre>

<p>It&#8217;s like <code>in_groups_of</code>.</p>

<h2>letfn</h2>

<p>Special form. Like <code>let</code> (also a special form), but let bindings are
serial (later bindings can refer to previous bindings, but there are no
forward bindings). <code>letfn</code> bindings can all refer to each other.</p>

<pre><code>(letfn [(a [] (b)) 
        (b [] (println "b"))] 
          (a))
</code></pre>

<p>Prints &#8216;b&#8217;.</p>

<h2>trampoline</h2>

<p>If you have an algo where you&#8217;d like to keep returning 0-arity fns until
finally it returns a non-fn value, trampoline is your source for
non-stack-consuming mutual recursion. Mutual recursion means rather <code>a</code>
calling <code>a</code>, <code>a</code> might call <code>b</code> might call <code>a</code> might call <code>b</code>, etc.
It&#8217;s actually not that crazy of a fn to understand via <code>(source trampoline)</code>.</p>

<pre><code>(defn trampoline
  ([f]
     (let [ret (f)]
       (if (fn? ret)
         (recur ret)
         ret)))
  ([f &amp; args]
     (trampoline #(apply f args))))
</code></pre>

<p><code>trampoline</code> is meant to accept a 0-arity fn. The 2 lines at the bottom
just convert a 2+arity call to trampoline to a call with a zero-arity
fn. Trampoline will</p>

<ul>
<li>call <code>f</code> (with supplied args)</li>
<li>if value returned is a fn, recur (preventing stack consumption)</li>
<li>else return value</li>
</ul>


<p>Wow preeeeeetty freakin simple, and recur makes stuff pretty obvious.</p>

<p>So if I do</p>

<pre><code>(defn do-some-crap []
  (letfn [(a [x] (b x))
          (b [x] (c x))
          (c [x] (d x))
          (d [x] x) ]
            (trampoline a 123)))
</code></pre>

<p>This returns 123 and the chain of a-b-c-d only consumes one stack frame.
Pretty cool. Ahh nevermind I&#8217;m an idiot, i&#8217;m returning values, not
functions, fixed:</p>

<pre><code>(defn do-some-crap []
  (letfn [(a [x] #(b x))
          (b [x] #(c x))
          (c [x] #(d x))
          (d [x] x) ]
            (trampoline a 123)))
</code></pre>

<p>Useful for implementing state machines.</p>

<h2>identity</h2>

<p>Returns its arg:</p>

<pre><code>(identity 5)
</code></pre>

<h2>FICO</h2>

<p>FICO credit scores. Fair Isaac Corporation. Started in 58. Fannie and
Freddie started using their scores in 95. Ubiquitous as fuck.</p>

<p>http://en.wikipedia.org/wiki/FICO</p>

<p>FICO score introduced in 89, based on 3 credit files</p>

<ul>
<li>Experian</li>
<li>Equifax</li>
<li>TransUnion</li>
</ul>


<p>(so people don&#8217;t refer to FICO, but rather FICO polls the 3 above?)</p>

<p>http://en.wikipedia.org/wiki/Credit_score_in_the_United_States#mediaviewer/File:Credit-score-chart.svg</p>

<p>Score composed of</p>

<ul>
<li>35% payment history, presence of derogatory info (defaults, bankruptcies)</li>
<li>30% debt burden, including credit card debt to limit ratio (e.g. if
I&#8217;m $100 in credit card debt, the FICO penalty is smaller if I have a
higher limit).</li>
<li>15% length of credit history: average age of accounts, and age of
oldest account (hence a new CC might temporarily lower score since it
decreases average age).</li>
<li>10% types/diversity of credit:</li>
<li>10% recent searches

<ul>
<li>hard inquiries:

<ul>
<li>applications for loans/CCs count against you, but then again these
are coalesced within 30-45 days as a single query if you&#8217;re &#8220;rate
shopping&#8221;</li>
</ul>
</li>
<li>soft inquiries:

<ul>
<li>consumer queries</li>
<li>applying to rent an apartment</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Hard inquiries look bad because maybe you&#8217;re desperate for credit or
maybe they&#8217;re so frequently because past hard inquiries led to your
rejection. Limit to 1-2 times a year to minimize penalty.</p>

<p>When people say triple credit score, they mean they&#8217;ll show you your
Experian, Equifax, and TransUnion scores.</p>

<p>FICO scores are out of 850. 280 is shitty, 700 is &#8220;good&#8221;, 760+ is
excellent.</p>

<h2>Mortgage</h2>

<p>http://en.wikipedia.org/wiki/Mortgage_loan</p>

<p>The distinguishing characteristic is that real or personal property is
put up as collateral for the loan in the case of default.</p>

<p>Real property refers to legally defined property mixed with human
effort, e.g. houses, roads, etc. Usually means &#8220;land and anything
affixed to it&#8221;, vs private property (&#8220;clothing, furniture, money&#8221;).</p>

<h2>Alternative Financial Services</h2>

<p>http://en.wikipedia.org/wiki/Alternative_financial_services</p>

<p>Pawn shops, paycheck advancements.</p>

<p>In impoverished countries, microfinancing also falls under this
category.</p>

<h2>Catfish</h2>

<p>http://www.urbandictionary.com/define.php?term=catfish</p>

<blockquote><p>A catfish is someone who pretends to be someone they&#8217;re not
using Facebook or other social media to create false identities,
particularly to pursue deceptive online romances.</p></blockquote>

<h2>Installment Credit / Fixed Credit</h2>

<p>Installment: type of credit that has fixed no of payments.</p>

<p>Revolving credit: no fixed payments, can withdraw from balance,
transfer, etc, e.g. credit cards.</p>

<h2>Clojure riddle</h2>

<pre><code>(take 1 (map (fn [a] (println a)) (range)))
(take 32 (map (fn [a] (println a)) (range)))
</code></pre>

<p>Both of these print 0 to 31.</p>

<pre><code>(take 32 (map (fn [a] (println a)) (range)))
</code></pre>

<p>This prints 0-63. Why? I think it has something to do with 32 legged
tries something something. Or chunks. Or something.</p>

<h2>IRAs</h2>

<p>Individual Retirement Account</p>

<p>http://www.rothira.com/traditional-ira-vs-roth-ira</p>

<p>Traditional IRA:</p>

<ul>
<li>deposit pre-tax assets</li>
<li>no income limits</li>
<li>started in 1974 in some congressional act</li>
</ul>


<p>Roth IRA:</p>

<ul>
<li>deposit post-tax assets</li>
<li>early withdraw has 10% penalty, with some exceptions for first house,
education expenses, etc</li>
<li>maximum income enforced of 114k-128k before you can&#8217;t contribute</li>
<li>desirable if you think you&#8217;ll be in a higher tax bracket if you&#8217;re
older (relative to IRA where you&#8217;re taxed when you withdraw, so if
you&#8217;re withdrawing at a higher tax bracket then you&#8217;re boned).</li>
<li>largely targets younger, lower income</li>
<li>established in 1997 after proposed in 89 by someone and senator
William Roth</li>
</ul>


<p>In general there&#8217;s penalties for early withdraw until 59.5 years of age
(who decides this shit?).</p>

<p>401k is where an employee deducts from employee&#8217;s paycheck (optionally
matching) and makes a tax-free deposit. Withdraws are taxed though, like
a traditional IRA.</p>

<p>401k different from IRAs in it&#8217;s a plan optionally provided by an
employer. eg A freelancer can&#8217;t take advantage of a 401k, and not all
employees can take advantage of a company&#8217;s 401k.</p>

<p>All of this to encourage people to save and invest and prepare ourselves
for retirement.</p>

<p>Both IRAs and 401ks have the minimum penalty distribution (withdrawals)
age of 59 1/2 years.</p>

<p>IRAs have limits like $5,500 per a given year. This might change from
year to year though.</p>

<h2>Smart Folder</h2>

<p>http://www.cultofmac.com/48911/100-tips-19-what-are-smart-folders/</p>

<p>AMAZINGLY I have no idea what this is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xorblasm]]></title>
    <link href="http://machty.github.com/blog/2014/12/10/xorblasm/"/>
    <updated>2014-12-10T11:04:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/12/10/xorblasm</id>
    <content type="html"><![CDATA[<h2>Frameless App</h2>

<p>Chromeless app, nothing more than a webview really, for quick
prototyping of mobile web apps.</p>

<p>https://itunes.apple.com/us/app/frameless-full-screen-web/id933580264?mt=8</p>

<h2>Servo</h2>

<p>Parallel browser project written in Rust for parallel execution, memory
safety, etc. Doesn&#8217;t intend to be a full on user-facing browser, but
intends to have other folk build on top of it.</p>

<p>http://blog.servo.org/</p>

<h2>&#8220;use strict&#8221;; as opposed to sloppy</h2>

<p>Non <code>"use strict";</code> mode is AKA sloppy mode.</p>

<h2>Safari inspector learnings</h2>

<p>There are THREE TABS:</p>

<ul>
<li>Resources (ctrl + 1)</li>
<li>Timelines (ctrl + 2)</li>
<li>Debugger (ctrl + 3)</li>
</ul>


<p>They control the middle view, but when active they can be clicked again
to remove the left panel. THAT IS KINDA FUCKED UI, PEOPLE.</p>

<p>Pressing Escape a bunch of times always yields Console, for which there
is a full on console tab, but in Resources (1) and Debugger (2) you can
open a debugger on the bottom, but on Timelines I guess it doesn&#8217;t make
sense to embed that console. Alt+Command+C opens the full on console.
Functionality on full screen console and embedded console seems the
same.</p>

<p>Filter vs Search resources:</p>

<ul>
<li>filter: filename only</li>
<li>search: searches file contents</li>
</ul>


<h2>TIL <code>sessionStorage</code></h2>

<p>Ridiculous, why is this useful? Why is this fundamentally different than
a global var?</p>

<h2>(Safari) Webarchive</h2>

<p>http://en.wikipedia.org/wiki/Webarchive</p>

<p>Save all resources associated w a document, used by Safari.</p>

<p>You can go to Resources tab and click the down arrow to download a
webarchive.</p>

<h2>Tiled Rendering</h2>

<p>Android and pretty much everyone uses tiled rendering.</p>

<p>http://en.wikipedia.org/wiki/Tiled_rendering#cite_note-1</p>

<p>&#8220;Show composited layer borders&#8221; in chrome will show you all the layers
that get uploaded to the GPU, after which the GPU does compositing. So
you paint w CPU and then composite on the GPU.</p>

<h2>Continuous Repaint</h2>

<p>Repaints don&#8217;t happen all the time, but you still might want to identify
which parts of the page are slow to paint, so you can force the renderer
to repaint all the things all the time by enabling this setting, showing
and removing sections.</p>

<p>https://developer.chrome.com/devtools/docs/rendering-settings</p>

<h2>Chrome Timeline Counters</h2>

<ul>
<li>Listeners: [1:4]</li>
</ul>


<p>means that at the start of listening, there was 1 listener, and at the
end, there were 4.</p>

<h2>Sysdig</h2>

<p>http://www.sysdig.org/</p>

<blockquote><p>Think of it as strace + tcpdump + lsof + awesome sauce.</p></blockquote>

<h2>Gradle daemon and parallel</h2>

<p>Add this to your <code>gradle.properties</code>:</p>

<pre><code>org.gradle.daemon=true
org.gradle.parallel=true
</code></pre>

<p>IT DOES WHAT YOU THINK IT DOES.</p>

<h2>Comme de Garcons</h2>

<p>http://en.wikipedia.org/wiki/Comme_des_Gar%C3%A7ons</p>

<p>Heart with eyes logo.</p>

<h2>Cul-de-sac</h2>

<p>http://en.wikipedia.org/wiki/Cul-de-sac</p>

<p>It just means a fucking dead end. DEAD END.</p>

<p>One of these shits:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/b/b2/Cul-de-Sac_cropped.jpg" alt="cul de sac" /></p>

<h2>Live updates in Cordova</h2>

<ul>
<li>HTTP caching

<ul>
<li>Make sure the WebView is set up to cache</li>
<li>Do we have control over that though? What if webview ejects these
items from cache? Can we prevent that?</li>
<li>Assuming full, non-forgetting HTTP caching is an option:

<ul>
<li>user session GET query returns assets that the user should use</li>
<li>webview downloads them; assets are aggressively cached</li>
</ul>
</li>
<li>But what about</li>
</ul>
</li>
</ul>


<h2>HTMLBars attr interpolation</h2>

<pre><code>&lt;div attr=&gt;
</code></pre>

<p>vs
,[</p>

<pre><code>&lt;div attr=""&gt;
</code></pre>

<p>The rule is that quotes ALWAYS means string interpolation. Even if the
above evals to the same thing, the latter goes through a layer of string
interpolation.</p>

<h2>Broccoli funnel</h2>

<p>subset of a tree, matched by regex.</p>

<p>https://www.npmjs.com/package/broccoli-funnel</p>

<h2>Ember-cli-addons</h2>

<p>Hahah of course, just including an ember-cli addon doesn&#8217;t mean</p>

<h2>No property syntax in ES6 class syntax</h2>

<p>This is intentional. You have to set all your properties in the
<code>constructor()</code>.</p>

<h2>popState, router stuff</h2>

<p>I need to fix this:</p>

<p>https://github.com/emberjs/ember.js/pull/9752</p>

<p>Transitions need to be undoable.</p>

<ul>
<li>pushState transition from &#8216;foo&#8217; -> &#8216;bar&#8217;

<ul>
<li>undo: popState</li>
</ul>
</li>
<li>replaceState transition from &#8216;foo&#8217; -> &#8216;bar&#8217;

<ul>
<li>undo: replaceState(&#8216;bar&#8217;)</li>
</ul>
</li>
</ul>


<p>No such support for back button w HashLocation.</p>

<blockquote><p>Clicking back and then clicking forward, and aborting the transition in the willTransition is still broken. The reason is that when I hit back I now the previous route, but when I hit back and then forward again I don&#8217;t have that info.</p></blockquote>

<p>You don&#8217;t have &#8220;forward&#8221;. Like, the URL you&#8217;re going to?</p>

<h2>onpopstate fires for all changes?</h2>

<p>https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#The_popstate_event</p>

<p>Weird.</p>

<p>http://jsbin.com/coxega/1#foo</p>

<p>Poorly named?</p>

<blockquote><p>Browsers tend to handle the popstate event differently on page load. Chrome (prior to v34) and Safari always emit a popstate event on page load, but Firefox doesn&#8217;t.</p></blockquote>

<h2>.npmignore defaults to .gitignore</h2>

<p>nuff said.</p>

<h2>How do preview a publish?</h2>

<p><code>npm pack</code></p>

<p>Then inspect the tgz.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[808s and Android Heartbreak]]></title>
    <link href="http://machty.github.com/blog/2014/12/08/808s-and-android-heartbreak/"/>
    <updated>2014-12-08T12:21:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/12/08/808s-and-android-heartbreak</id>
    <content type="html"><![CDATA[<h2>TL;DR on Android WebView Form Shit</h2>

<p>Here&#8217;s a list of unsurmountable barriers involved when implementing
forms in a mobile web app in Cordova</p>

<ul>
<li>You <em>cannot</em> focus an input field on a setTimeout

<ul>
<li>It must be tied to a user input event (e.g. a touchstart/end)</li>
<li>It might look focused but it won&#8217;t bring up the keyboard</li>
<li>You can halfass get things working in cordova by using a plugin that
opens the keyboard before you tell the field to focus, but it you
lose all configurability of the keyboard (whether it&#8217;s numpad,
whether autocorrect is enabled, etc).</li>
</ul>
</li>
</ul>


<h2>Android WebView</h2>

<p>https://www.youtube.com/watch?v=HbOtn5VhGZU</p>

<p>Android Browser just uses a WebView (probably not Chrome).</p>

<p>Platform</p>

<ul>
<li>network, disk</li>
<li>system integration, e.g. HTML5 Camera integration</li>
<li>graphics and rendering; this is why differences exists b/w webkit</li>
<li>V8 is used in Android WebView instead of default webkit</li>
</ul>


<p>What is +1 dependent?</p>

<p>Render loop:</p>

<ul>
<li><p>Event -> Paint -> Draw</p></li>
<li><p>Before Honeycomb (2012?)</p>

<ul>
<li>Paint loops are tight, they capture content into a Picture, and
then render the Picture</li>
<li>Picture is Vector representation of page, not just visible area</li>
<li>No need to go back to webkit when

<ul>
<li>scrolling</li>
<li>zooming</li>
</ul>
</li>
</ul>
</li>
<li>Multithreading

<ul>
<li>UI Thread (Picture)</li>
<li>WebCore Thread (webkit; generates a new Picture that UI thread can
use for zooming, scrolling, etc)</li>
</ul>
</li>
<li>Software rendering

<ul>
<li>Slow, risk of taking longer than 16ms</li>
<li>CSS3D not supported in software</li>
</ul>
</li>
<li>Async rendering

<ul>
<li>e.g. flash, composited on top and often lagged behind scroll</li>
</ul>
</li>
<li>Software doesn&#8217;t keep up w increasing size</li>
<li>Tiling via Hardware

<ul>
<li>Scroll event kicks off request for new tiles to render, if they
don&#8217;t arrive in time, no big deal, everything will be fast even if
there&#8217;s a moment where it&#8217;s blank</li>
</ul>
</li>
<li>Texture Generation Thread?

<ul>
<li>the thing that splits things into tiles</li>
</ul>
</li>
<li>w Hardware acceleration:

<ul>
<li>Painting slower, drawing (compositing?) faster!</li>
<li>Precache tiles

<ul>
<li>prefetch surrounding tiles</li>
<li>direction dependent (e.g. prefetch tiles below if you&#8217;re scrolling
down)</li>
</ul>
</li>
<li>low-res tiles when scrolling quickly&#8230; blur sharpens once it&#8217;s had
time to settle and finish painting</li>
<li>memory usage

<ul>
<li>limited number of tiles (device dependent)</li>
<li>tiles are 256x256</li>
<li>check if plain colors&#8230; JellyBean</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>AHH fuck it all it&#8217;s powered in Chromium now. Why bother.</p>

<p>Android Versions</p>

<p>Operating Systems:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Android_Ice_Cream_Sandwich">Android 4: Ice Cream Sandwich</a></li>
</ul>


<h2>Android API levels</h2>

<p>http://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels</p>

<p>API Levels are just integers that match up w Platform versions</p>

<pre><code>Platform Version    API Level   VERSION_CODE    Notes
Android 5.0 21  LOLLIPOP    Platform Highlights
Android 4.4W    20  KITKAT_WATCH    KitKat for Wearables Only
Android 4.4 19  KITKAT  Platform Highlights
Android 4.3 18  JELLY_BEAN_MR2  Platform Highlights
Android 4.2, 4.2.2  17  JELLY_BEAN_MR1  Platform Highlights
Android 4.1, 4.1.1  16  JELLY_BEAN  Platform Highlights
Android 4.0.3, 4.0.4    15  ICE_CREAM_SANDWICH_MR1  Platform Highlights
</code></pre>

<h2>Android Activity / Fragment Lifestyle</h2>

<p>https://plus.google.com/+StevePomeroy/posts/HsthxN21Yp1</p>

<p>http://staticfree.info/~steve/complete_android_fragment_lifecycle.png</p>

<p>https://github.com/xxv/android-lifecycle</p>

<h2>Server-push</h2>

<p>http://caniuse.com/#feat=eventsource</p>

<p>Android supports SSE from 4.4 onward (since Nov 2013).</p>

<h2>Android Chromium WebView since 4.4 KitKat (Nov 2013)</h2>

<p>https://www.youtube.com/watch?v=IOY2UNZU9QQ</p>

<p>Android Browser still uses WebView, just that it&#8217;s Chromium now.
Snapshot of Chrome 30.</p>

<p>Chrome vs Chrome WebView</p>

<ul>
<li>Graphics backend</li>
<li>Otherwise invisible to app developer</li>
<li>Chop out Chrome backend, replace w graphics stack compatible w android
graphics.</li>
<li>SurfaceFlinger</li>
<li>Hardware accelerated layers.</li>
</ul>


<p>KitKat webview is way more HTML5 compliant, rather than old WebKit
browser.</p>

<p>Features:</p>

<ul>
<li>IndexedDB (ios only has shitty/buggy support in 8+)

<ul>
<li>async, non-blocking, etc</li>
</ul>
</li>
<li>Websockets</li>
<li>requestAnimationFrame</li>
<li>SVG filters and effects, sepia, convolution blurs</li>
<li>Hardware accelerated

<ul>
<li>everything</li>
<li>default for all new apps is hardware accelerated on</li>
<li>Question: hardware acceleration can be enabled for the app, but also
the webview itself?</li>
</ul>
</li>
</ul>


<p>WebView methods must be run on UI Tthread, use <code>runOnUiThread</code> if you&#8217;re
within a different thread&#8230;</p>

<p>Compositing Thread,</p>

<p>Main UI thread</p>

<p><a href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a> since kitkat all urls
most conform to it.</p>

<p>A CSS pixel corresponds to 1, 2, 4, etc, depending on your viewport.</p>

<p>There must only be one Meta Viewport tag&#8230; only the last one is
actually used.</p>

<p>Shorthand CSS can override others in KitKit+; be specific w CSS
properties unless you really want to override many things.</p>

<h2>uses-sdk</h2>

<p>http://developer.android.com/guide/topics/manifest/uses-sdk-element.html</p>

<p>Always set target API, but you can still support min SDK versions for
fallback.</p>

<h2>lint</h2>

<p>Android <code>lint</code></p>

<pre><code>$ which lint
/Users/machty/adt-bundle-mac-x86_64/sdk/tools/lint
</code></pre>

<p>seems like ADT, the Eclipse plugin suite.</p>

<p>http://developer.android.com/tools/sdk/eclipse-adt.html</p>

<h2>Focusing fields within Android</h2>

<p>Is it actually fucking possible?</p>

<p>https://code.google.com/p/android/issues/detail?id=27438</p>

<p>http://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#toggleSoftInput(int, int)</p>

<p>WTF is toggleSoftInput vs toggleSoftInputFromWindow vs</p>

<p>TODO: prevent defocusing with</p>

<pre><code>http://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#SHOW_FORCED
</code></pre>

<p>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sloggin]]></title>
    <link href="http://machty.github.com/blog/2014/12/01/sloggin/"/>
    <updated>2014-12-01T11:36:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/12/01/sloggin</id>
    <content type="html"><![CDATA[<h2>Gaslighting</h2>

<p>http://en.wikipedia.org/wiki/Gaslighting</p>

<p>Presenting false information to someone until they doubt their own sanity.</p>

<h2>Deductible</h2>

<p>http://en.wikipedia.org/wiki/Deductible</p>

<p>The amount that must be paid by policy owner, out of pocket,
before insurance kicks in.</p>

<blockquote><p>Given the nature of medical treatment, the insured often faces multiple medical expenses spread over several days for a single illness or injury. Due to this reason, health insurance deductibles often tend to be imposed on a term basis (e.g. annually) as opposed to a per-visit threshold.[4] In spite of this, major medical insurance policies may have a per-visit excess which often does not cover the cost of routine visits to a GP, unless it is certified to be a part of a continuous treatment (and the bills can be collated in a single claim).</p></blockquote>

<p>So it&#8217;s annual so that you&#8217;re always paying <em>something</em> out of pocket.
Deductibles are ultimately limited by a Out-of-Pocket Maximum.</p>

<p>http://www.bcbsm.com/index/health-insurance-help/faqs/topics/how-health-insurance-works/deductibles-coinsurance-copays.html</p>

<ul>
<li>If you have $1500, and you get a $2000 medical bill, you have to pay
$1500 of that, no matter what, and then the last $500 might require
paying coinsurance

<ul>
<li>After deductible: insurance kicks in after deductible is paid</li>
<li>No deductible: insurance kicks in immediately without having to pay
a deductible (there could still be coinsurance)</li>
<li>Before deductible: you still have to pay deductible, but</li>
</ul>
</li>
</ul>


<p>Ah ok so you&#8217;re still chipping away at a yearly deductible. After which
you only need to think about coinsurance and copay.</p>

<p>But first, deductible types:</p>

<ul>
<li>Annual: most common, chipping away at deductible throughout the year</li>
<li>Per-episode: min deductible to pay per each type of visit, e.g. each
time you&#8217;re hospitalized</li>
<li>Out of network deductible: what it sounds like; sometimes paying out
of network deductible subtracts from your regular deductible.</li>
<li>Family deductible: multiple members chipping away at deductible</li>
</ul>


<p>Coinsurance: your share of health care service costs, usually a
percentage. e.g. if you&#8217;ve paid your deductible, then you might have to
pay 20% of whatever&#8217;s left over.</p>

<p>Copay: a fixed amount you pay for a given service, each time you use it.
Could be $40 when you buy prescription drugs, $20 every doctor visit,
etc. Copays prevent frequent visits to the same person/service, since
they add up, particular if the service is cheap, whereas coisurance, a
fixed percentage, doesn&#8217;t add up if the service is cheap.</p>

<ul>
<li>Pros

<ul>
<li>You always know the fixed amount (rather than a percentage tied to
total cost)</li>
</ul>
</li>
</ul>


<p>So the difference is just fixed amount vs percentage?</p>

<h2>Honeypot</h2>

<p><a href="http://en.wikipedia.org/wiki/Honeypot_%28computing%29">wiki</a></p>

<p>Hacker lure, like a bear to honey. Pretends to be some network with
useful info, contains nothing, logs attack attempts.</p>

<h2>STEM fields</h2>

<p>http://en.wikipedia.org/wiki/STEM_fields</p>

<p>Science, technology, engineering, math.</p>

<p>http://en.wikipedia.org/wiki/Women_in_STEM_fields</p>

<p>STEM equity: gender equity in STEM fields.</p>

<h2>Who is logged in what are they doing?</h2>

<p><code>w(1)</code>:</p>

<blockquote><p>w &#8211; display who is logged in and what they are doing</p></blockquote>

<pre><code>$ w
USER     TTY      FROM              LOGIN@  IDLE WHAT
machty   console  -                18Nov14 15days -
machty   s000     -                18Nov14 9days tmux a
machty   s029     -                22Nov14     - tmux a
</code></pre>

<h2>rcp, rsh, rcmd</h2>

<p>Non-secure scp, ssh, and rcmd. Uses kind of a crappy auth scheme,
wherein the server, rshd, has its <code>iruserok</code> fn called and can decide
based on IP, etc, whether things are cool.</p>

<p>TLDR use ssh.</p>

<h2>hub pull-request depends on -u upstream</h2>

<p>This used to create pull request from ember to ember</p>

<pre><code>hub pull-request
</code></pre>

<p>I had to do</p>

<pre><code>hub pull-request -h machty:some-crap
</code></pre>

<p>but if I <code>git push -u</code> then it&#8217;ll set the upstream and the original will
work. Hooray. Thanks Robert Jackson.</p>

<h2>bash hashes commands</h2>

<p>Because path resolution is slow, bash will hash the location of a
command. This broke my shit when I upgraded git from the Mac
(/usr/bin/git) to the one from homebrew (/usr/local/bin/git).</p>

<p>Bash has some built-ins <code>hash</code> and <code>type</code>. <code>type</code> tells you how a
command resolves:</p>

<pre><code>$ type git
git is hashed (/usr/local/bin/git)

$ hash
hits    command
   2    /usr/bin/which
   1    /usr/local/bin/node
   2    /Users/machty/.rvm/gems/ruby-2.0.0-p353@global/bin/bundle
   3    /usr/local/bin/git
   1    /Users/machty/.rvm/rubies/ruby-2.0.0-p353/bin/irb
  12    /usr/bin/man
   2    /bin/ls
   2    /usr/bin/rsh
   1    /bin/LS
   1    /usr/bin/w
   1    /usr/bin/dig
   1    /bin/rcp
</code></pre>

<p>And you can invalidate a cached command via <code>hash -r COMMAND</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stankonia]]></title>
    <link href="http://machty.github.com/blog/2014/11/20/stankonia/"/>
    <updated>2014-11-20T16:25:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/11/20/stankonia</id>
    <content type="html"><![CDATA[<h2>Zonebie</h2>

<p>https://github.com/alindeman/zonebie</p>

<p>Ruby gem to randomly change the current timezone to help catch bugs /
false assumptions in your timezone-touching code.</p>

<p>NOTE: trolled myself because i had a <code>_spec.rb</code> file that didn&#8217;t have
<code>require 'spec_helper'</code> at the top and hence Zonebie magic wasn&#8217;t
happening.</p>

<h2>Hellbanning</h2>

<p>http://en.wikipedia.org/wiki/Hellbanning</p>

<p>Aka, shadowbanning. You don&#8217;t know you&#8217;re banned, but no one sees your
stuff, people stuff responding to you. Used on HN.</p>

<h2>Redis SLAVEOF</h2>

<p>http://redis.io/commands/slaveof</p>

<p>Master-slave replication. A slave has its own port, connects to parent
with SYNC, starts a BGSAVE, shares shit, blah blahblah.</p>

<p>You can even pretend to be a slave with netcat.</p>

<pre><code>nc localhost 9595
SYNC
</code></pre>

<p>And then you&#8217;ll get a stream of all the stuff a redis slave server sees.
If you write to the master you&#8217;ll the slave being sent that same write
request.</p>

<p>Slaves can have slaves. If a master disconnects, slaves become
masters&#8230;?</p>

<p>Slaves are read only:</p>

<pre><code>(error) READONLY You can't write against a read only slave.
</code></pre>

<p>If master disconnects, it&#8217;s still a slave until you tell it to
<code>SLAVE NO ONE</code>, then it severs that connection, preserving the
replicated data, and then the old master might connect to the new master
and invert the master-slave relationship. PRETTY RAD. Or you could also
tell the new master to become a slave, but that&#8217;ll mean it loses all of
its data.</p>

<p>Use slave chains if a master is overloaded w forwarding writes to all of
its slaves. Instead of</p>

<pre><code>- MASTER
  - SLAVE 0
  - SLAVE 1
  - SLAVE 2
  - SLAVE 3
</code></pre>

<p>You could do</p>

<pre><code>- MASTER
  - SLAVE 0
    - SLAVE 1
      - SLAVE 2
        - SLAVE 3
</code></pre>

<h2>Git: tags are a flat hierarchy</h2>

<p>You could release multiple versions of a project from different
branches. There&#8217;s no requirement that all the versions you tag are on
<code>master</code> or <code>release</code> or anything like that. Tags, as opposed to branch
names, are a flattened hiearchy.</p>

<p>A branch is just a pointer.</p>

<p>A tag is just a pointer.</p>

<p>The difference is that if you commit to a branch, the pointer moves. A
tag on the other hand stays pointing to that commit SHA.</p>

<p>A client can make sure a master write made it to slave via checking
UUID&#8217;s, and using <code>INFO</code> command to check sync status, etc.</p>

<h2>Redis Sentinel</h2>

<p>http://redis.io/topics/sentinel</p>

<p>Monitors master/slaves, restarts, notifies, failovers, etc.</p>

<h2>Redis-cli</h2>

<pre><code>-x                 Read last argument from STDIN.

Example:
cat /etc/passwd | redis-cli -x set mypasswd
</code></pre>

<p>So that sets <code>mypasswd</code> to the contents of a file.</p>

<pre><code>$ echo "SOMEVALUE" | redis-cli -x set wat
OK
$ redis-cli get wat
</code></pre>

<h2>Redis: MULTI/EXEC doesn&#8217;t mean pipelining</h2>

<p>Pipelining refers to a redis client queueing commands and then sending
them to a Redis server all at once. The Redis server its has its own
concept of queued commands via MULTI/EXEC, but the concepts are separate;
you could invidually send a bunch of commands including MULTI/EXEC, and
get responses to each, but once you&#8217;re in the MULTI/EXEC block, you
start getting QUEUED as a response.</p>

<h2>Redis: WATCH, DISCARD, MULTI</h2>

<p>You can invalidate your own WATCH pretty immediately:</p>

<pre><code>127.0.0.1:6379&gt; WATCH foo
OK
127.0.0.1:6379&gt; SET foo wat
OK
127.0.0.1:6379&gt; MULTI
OK
127.0.0.1:6379&gt; EXEC
(nil)
</code></pre>

<p>Obviously you can&#8217;t put it in a MULTI</p>

<pre><code>127.0.0.1:6379&gt; MULTI
OK
127.0.0.1:6379&gt; WATCH foo
(error) ERR WATCH inside MULTI is not allowed
</code></pre>

<p>DISCARDS must take place within MULTI block.</p>

<pre><code>127.0.0.1:6379&gt; DISCARD
(error) ERR DISCARD without MULTI
</code></pre>

<h2>Optimistic Locking</h2>

<p>http://en.wikipedia.org/wiki/Optimistic_concurrency_control</p>

<p>Redis implements optimistic locking; it never locks a datatype and
prevents someone from writing; rather, transactions can be aborted and
retried if it&#8217;s detected that someone else wrote to the same data
(detected via watch).</p>

<p>Pessimistic locking would be, say, if a DB row was locked and someone
wanting to write to it was blocked til the lock was given up, which
apparently most databases do.</p>

<p>Postgres (and other relational DBs) have other approaches:</p>

<p>http://blog.2ndquadrant.com/postgresql-anti-patterns-read-modify-write-cycles/</p>

<p>TL;DR Avoid read-modify-write</p>

<h2>No pipelining + latency = multiplied awfulness</h2>

<p>Just like w TCP or anything with roundtrips, latency is the multiplier.
Good thing I wrote this.</p>

<h2>Standard Deviation</h2>

<p>http://en.wikipedia.org/wiki/Standard_deviation#History</p>

<blockquote><p>The term standard deviation was first used[10] in writing by Karl Pearson[11] in 1894, following his use of it in lectures.</p></blockquote>

<p>So there&#8217;s no statistical meaning behind the word &#8220;standard&#8221;. We&#8217;re all
just talking about &#8220;deviation&#8221;, using the most basic/default/standard
way of calculating it.</p>

<h2>Ruby blocks v Python context manager</h2>

<p>One thing I noticed regarding <code>return</code>s:</p>

<pre><code>def foo():
  print(1)
  yield
  print(2)

def bar():
  with foo():
    print(999)
    return "LOL"
</code></pre>

<p>In python this yields</p>

<pre><code>1
999
2
</code></pre>

<p>and returns &#8216;LOL&#8217;. This is interesting because the <code>print(2)</code> is still
hit, which isn&#8217;t what would happen in Ruby.</p>

<pre><code>def foo
  puts 1
  yield
  puts 2
end

def bar
  foo { puts "999"; return "LOL" }
end
</code></pre>

<p>yields</p>

<pre><code>1
999
=&gt; "LOL"
</code></pre>

<p>The <code>2</code> isn&#8217;t printed because in Ruby, the return causes the caller to
return.</p>

<h2>Redis ZSETS sort by key when scores equal</h2>

<p>That&#8217;s all.</p>

<h2>Lua</h2>

<p>http://en.wikipedia.org/wiki/Lua_(programming_language)</p>

<p>Why use Lua:</p>

<ul>
<li>you&#8217;re building something that needs to be scriptable</li>
<li>that shouldn&#8217;t have a heavy footprint from the interpreter</li>
<li>that might be in an embedded system</li>
<li>that is easy to grok</li>
<li>that lots of people use already</li>
</ul>


<p><a href="http://en.wikipedia.org/wiki/Wikipedia:Lua">Wikipedia is Lua-extensible</a></p>

<p>Redis offers Lua scripting now, useful in certain cases over
pipelining/multi-exec, since (I think) it allows logic to be placed on
the Redis server rather than having to do all logic on the application
sides and remembering to do all the WATCH/MULTI/EXEC crap.</p>

<h2>Redis: why lock?</h2>

<p>Because WATCH/retry loops quickly degrade as the number of actors
increase; particularly if the WATCH is coarse (only keys can be WATCH&#8217;d,
not specific items in a hash).</p>

<p>Instead of retrying, a lock might make sense in this case.</p>

<p>Implementing locks is error-prone:</p>

<ul>
<li>a process grabs a lock, but takes too long and the lock times out, and
process is blissfully unaware and keeps doing potentially destructive
things</li>
<li>process crashes, doesn&#8217;t releaes lock, and everyone wastes time
waiting for the timeout</li>
<li>process crashes, other blocked processes try to acquire lock at same
time, think they each got the lock. (This is an issue in general but
more likely to happen if many processes attempting-to-lock are blocked
at the same time)</li>
</ul>


<p>SETNX only writes if not already present. It&#8217;s a test and set. Useful
for locks. You can just spin-lock on a sleep(.001) loop.</p>

<p>Increasing the granularity of lock generally improves perf.</p>

<h2>Dogpiling</h2>

<p>http://en.wikipedia.org/wiki/Cache_stampede</p>

<p>aka cache stampede; under very high loads, multiple processes try to
warm the cache at the same time, and performance takes a megahit.</p>

<p>This book seems to suggest a more general phenomenon of the system
taking a hit if lots of people are trying to acquire a lock. Probably
because they&#8217;re all spin locks, and spin lock take processing time.
Couldn&#8217;t we just implement a semaphore w BLPOP and LPUSH?</p>

<h2>Horrible App Store Deploy BS</h2>

<p>http://stackoverflow.com/a/26511924/914123</p>

<h2>Qualcomm: Mobile Station Modem</h2>

<p>http://en.wikipedia.org/wiki/Qualcomm</p>

<p>MSM: The CPU on Nexus, made by Qualcomm. You see in the android source
code a whole bunch.</p>

<p>What is Qualcomm?</p>

<blockquote><p>Qualcomm Incorporated is an American global semiconductor company that designs and markets wireless telecommunications products and services.</p></blockquote>

<h2>ioctl</h2>

<p>Swiss army knife for special io device files.</p>

<h2>Dalvik</h2>

<p>VM for android.</p>

<h2><code>set -e</code></h2>

<p>Makes it so that the shell terminates after the first unsuccessful
command. You can kill a tmux/terminal pane by just doing</p>

<pre><code>set -e
ls somethingthatdoesnotexist
</code></pre>

<p>Boom.</p>

<h2>Heroku Buildpack</h2>

<p><code>compile</code> gets run and apparently passed the app root path</p>

<pre><code>mkdir -p "$1/bin/server"
cp "bin/nginx-$STACK" "$1/bin/server/nginx"
</code></pre>

<h2>Nginx logging</h2>

<p>Customize via <code>error_log</code> and <code>access_log</code> directives, but keep in mind
it&#8217;s going to expect to use <code>./logs/*.log</code> no matter what before it&#8217;s
had time to read your config file (how else would it log a failure to
parse a config file?).</p>

<h2>Render right from config/routes.rb</h2>

<pre><code>get '/horse_ass', :to =&gt; proc { |env|
                                    [
                                      200,
                                      {"Content-Type" =&gt; 'text/plain'},
                                      ["FUDGLES"]
                                    ]
                                  }
</code></pre>

<p>It&#8217;s just the Rack API (anything that <code>respond_to?(:call)</code>).</p>

<h2>Millinery</h2>

<p>Women&#8217;s hats. A Milliner is a person who sells hats.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis the slack-jawed yokel]]></title>
    <link href="http://machty.github.com/blog/2014/11/17/redis-the-slack-jawed-yokel/"/>
    <updated>2014-11-17T08:02:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/11/17/redis-the-slack-jawed-yokel</id>
    <content type="html"><![CDATA[<p>Some stores&#8217;ll never page to disk, but then again, some stores&#8217;ll, like
Redis, the slack-jawed yokel.</p>

<h2>Transparent Huge Pages</h2>

<p>https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/s-memory-transhuge.html</p>

<p>Huge pages are a Linux feature whereby pages, normally 4096 bytes,
can be 2MB or 1 GB. Useful for some applications, difficult to
configure, hence Transparent Huge Pages is provided automagically, I
guess. But it&#8217;s not recommended for database workloads&#8230; why not?</p>

<p>Probably Redis has the answer:</p>

<p>http://redis.io/topics/latency</p>

<p>Redis uses forking for</p>

<ul>
<li>generating RDB snapshot</li>
<li>rewriting AOF</li>
</ul>


<p>Forking is slower in certain virtual settings; EC2 old Xen instances
could take more than a second to fork. Newer ones using HVM
(hardware virtual machine) leverages assistive hardware to make this
efficient.</p>

<p>If you have transparent hugepages, they&#8217;ll need to be COW&#8217;d upon fork,
which is expensive. So you can disable them entirely:</p>

<pre><code>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled
</code></pre>

<h2>Hypervisor / Virtual Machine Monitor</h2>

<p>http://en.wikipedia.org/wiki/Hypervisor</p>

<p>Tis what it sounds like. It&#8217;s the thing that schedules processing time
b/w multiple virtual machines. It&#8217;s the host to the guest virtual
machines.</p>

<h2>Multiple values in sysfs</h2>

<p>http://techoverflow.net/blog/2013/08/01/how-to-check-if-hugepages-are-enabled-in-linux/</p>

<pre><code>$ cat /sys/kernel/mm/transparent_hugepage/enabled
always [madvise] never
</code></pre>

<p>I thought this meant the first value (active) was the current value and
the other two were left as documentation, but no, it means madvise is
current value among the other two options. Kinda wacky. Who parses this?</p>

<p>IRC tells me this is a common sysfs pattern.</p>

<pre><code>$ cat /sys/block/xvda/queue/scheduler
[noop]
</code></pre>

<h2>SSR</h2>

<p>Server-side render.</p>

<h2>InfoSec</h2>

<p>Information Security. Usually refers to IT security, but sometimes
physical backups play into it, such as off-site tape backups.</p>

<h2>Which process is using which port?</h2>

<pre><code>lsof -i $PORT
# e.g.
lsof -i :5000
</code></pre>

<p><code>-i</code> just means filter by internet address. The above supplied only a
port, you could also provide a host name.</p>

<h2>Redis Pub Sub</h2>

<p>Not super common because</p>

<ul>
<li>older versions might crash system / OS if clients don&#8217;t read published
messages fast enough, back pressure, bloating outgoing buffer. New
versions disconnect slow readers though.</li>
<li>Unreliable message delivery if there&#8217;s an intermittent disconnect and
reconnect.</li>
</ul>


<h2>Redis Expiration</h2>

<ul>
<li>you can manually DEL or use expiration</li>
<li>expires whole keys, i.e. can&#8217;t expire individual items in a set (hence
more common to use ZSETs with timestamps and manual deletion based on
a range)</li>
</ul>


<h2>Stripe Token Retrieval</h2>

<p>https://stripe.com/docs/api#retrieve_token</p>

<p>This is only interesting since it clarified that a token wraps a card
with details that you can access before you, say, add it to a card.
This is the only way presently to prevent attaching the same card
to a customer twice: retrieve and then add.</p>

<p>But for my purposes I can just add it twice, and check the fingerprint
after word to prevent duplicates on my app&#8217;s Customer obj.</p>

<p>Why doesn&#8217;t Stripe de-dup? https://groups.google.com/a/lists.stripe.com/forum/#!topic/api-discuss/OzmhpQOs_SU</p>

<blockquote><p>We do not check, as many people have their own policies around when
duplicates are acceptable or aren&#8217;t.
However, you can look at the &#8220;fingerprint&#8221; property on cards that you
have saved in order to dedup.</p></blockquote>

<h2>Ruby Enumerators are awesome</h2>

<p>&#8220;Hey how come there&#8217;s <code>each_with_index</code> but not <code>map_with_index</code>?&#8221;</p>

<p>Use enumerators. Lots of the Ruby Enumerables return enumerators if you
don&#8217;t pass a block to them, and they can be chained. For instance you
can create a 1-indexed series via:</p>

<pre><code>10.times.map { |i| i+1 }
</code></pre>

<p>Does this work with lazy enumerators?</p>

<pre><code>(0..Float::INFINITY).lazy.map { |i| i + 1 }.first(10)
</code></pre>

<p>So yeah, just that ranges have no <code>times</code>&#8230; probably more correct to
think of <code>10.times</code> as a range rather than other way around.</p>

<h2>Stripe Checkout is only Web</h2>

<p>There&#8217;s no native ios/android version of Stripe Checkout. It&#8217;s just web.
iOS/Android SDKs offer token exchange utilities and some widgets but
it&#8217;s not the full tailored UI solution that Checkout is.</p>

<h2>Stripe passes through failed CVVs</h2>

<p>https://support.stripe.com/questions/cvc-or-avs-failed-but-payment-succeeded</p>

<p>You can still process a card with the wrong CVV. Though you probably
shouldn&#8217;t.</p>

<p>Test:</p>

<blockquote><p>4000000000000101: cvc_check will fail.</p></blockquote>

<h2>Rx state machine</h2>

<p>https://github.com/logicalguess/rx-state-machine</p>

<p>Basically every transition that occurs maps to a new state machine. You
define a state machine in a classic OO manner but it streamifies it for
you.</p>

<h2>Write amplification w SSDs</h2>

<p>http://en.wikipedia.org/wiki/Write_amplification</p>

<p>When the amount you write to an SSD is amplified by the fact that you
often have to flash much more than you originally intended to write
based on how SSD works. So you wanna be careful about abusing <code>fsync</code>.
Ramdisks might help too.</p>

<h2>MySQL installation n00bness</h2>

<p>There&#8217;s <code>mysql</code> and <code>mysql-server</code>. They&#8217;re separate packages. Derp.
One can connect to a server and issue commands, one actually installs
the database.</p>

<pre><code>/usr/bin/mysqladmin -u root password 'new-password'
</code></pre>

<p><code>mysqld_safe</code> is a script for starting up the daemon (as opposed to
<code>service mysqld start</code>?).</p>

<pre><code>cd /usr ; /usr/bin/mysqld_safe &amp;
</code></pre>

<p>Apparently it&#8217;s helpful because it:</p>

<ul>
<li>restarts the server upon error</li>
<li>runtime logging</li>
</ul>


<p>Apparently MySQL on Linux stores the DB files in</p>

<pre><code>/var/lib/mysql/
</code></pre>

<p>There&#8217;s a secure install script that does a few things:</p>

<pre><code>sudo /usr/bin/mysql_secure_installation
</code></pre>

<ol>
<li>Encourages you to set root password</li>
<li>Require <code>root</code> login must come from <code>localhost</code>; disable remote
logins.</li>
<li>Delete test database</li>
<li>Reload perms table.</li>
</ol>


<h2>PHP FPM</h2>

<p>http://php-fpm.org/</p>

<p>A simple and robust FastCGI Process Manager for PHP</p>

<p>I think this is necessary if you do nginx + php (apache has built in
niceties w php).</p>

<p>I already wrote about this shit and forgot it again:</p>

<blockquote><p>CGI applications are processes spun up by a web server to handle an
incoming request. Unscalable since spinning up processes all the time
takes a toll on the OS, not to mention that there&#8217;s no way to do
resource sharing (DB connection sharing, in-memory caching (because
the process dies at the end of request)).</p>

<p>With FastCGI, there&#8217;s a persisting FastCGI server that owns all of the
CGI programs, and webservers interact with FastCGI via a binary protocol
(over a socket (local) or TCP connection (remote)).</p></blockquote>

<p>So FPM is the thing that stays up and running, and may spawn PHP
instances, but can do the connection sharing.</p>

<h2>WordPress FPM</h2>

<p>http://codingsteps.com/install-php-fpm-nginx-mysql-on-ec2-with-amazon-linux-ami/</p>

<pre><code>location / {
    root   /var/www/html;
    index  index.php index.html index.htm;
}
location ~ \.php$ {
      fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;
      fastcgi_index  index.php;
      fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/
                       html$fastcgi_script_name;
      include        fastcgi_params;
}
</code></pre>

<p>Why location and not server? Isn&#8217;t this gonna be required within
nginx.conf? I guess server means a proxy.</p>

<p>I&#8217;m guessing it&#8217;s expecting this include to be within a server
directive. Which I don&#8217;t want. I want simultaneous blogs, yo.</p>

<p>AH OK figured it out:</p>

<ul>
<li><code>server</code> doesn&#8217;t just mean a proxy; it means nginx will spin up such a
server, bind to the ports, and then proxy or serve the thing itself or
pass to FastCGI, however you&#8217;ve configured it. <code>server</code> must be
within the <code>http</code> context.</li>
<li><code>location</code> must be within <code>server</code> or nested within <code>location</code>
context.</li>
</ul>


<p>So we have</p>

<pre><code>location / { ...
</code></pre>

<p>and</p>

<pre><code>location ~ \.php$ { ... 
</code></pre>

<p>So the first matches root. The second case-insensitive matches anything
ending in .php.</p>

<h2>Nginx FastCGI</h2>

<p>FastCGI is a binary protocol. Nginx implements that protocol. Just in
the same way nginx can match a URL and proxy through to an underlying
server, nginx can match a URL and proxy through to a FastCGI server.</p>

<p>There might be multiple FastCGI-speaking servers that nginx might talk
to. PHP-FPM is an alternative implementation over the default FastCGI.</p>

<p>Nginx won&#8217;t spin up a fastCGI server (in the same way it won&#8217;t spin up a
proxy server that it proxies requests to), but rather expects it to be
already running and answering requests from a unix socket or internet socket.</p>

<p>A fast-cgi process is a process manager. It might spin up 8 worker
instances of, say, php, and reuse these instances efficiently. It might
feature adaptive process spawning, like PHP-FPM does, or it might just
block one request if N+1 requests arrive at the same time. Either way,
it&#8217;s better than:</p>

<ol>
<li>Constant process starting/stopping that plain of CGI entails</li>
<li>Building PHP into apache (<code>mod_php</code>), which means you can&#8217;t restart
PHP (after, say, an upgrade) without restarting Apache. Also, you
lose permissions granularity if it&#8217;s built into Apache, which opens
security holes that could be closed by letting PHP run at a different
uid/group, etc.</li>
</ol>


<p>So what&#8217;s PHP FPM?</p>

<h2>Nginx index causing internal redirect</h2>

<p>http://nginx.org/en/docs/http/ngx_http_index_module.html#index</p>

<p>It should be noted that using an index file causes an internal redirect, and the request can be processed in a different location. For example, with the following configuration:</p>

<p>Interesting. That&#8217;s how you can make a <code>/</code> behave like a PHP and be
processed like a PHP.</p>

<h2>Configure PHP-FPM to create unix domain socket with nginx owner/user</h2>

<p>http://stackoverflow.com/questions/23443398/nginx-error-connect-to-php5-fpm-sock-failed-13-permission-denied</p>

<p>You can configure php-fpm to create a unix domain socket and chown it
to a different user/group. Since nginx workers need to talk to it, it
should be configured to their user/group, which was <code>nginx</code> for me.</p>

<p>Now I&#8217;m getting &#8220;No input file specified.&#8221;</p>

<p>LONG STORY SHORT I was pointing to home/some-user/sites/wordpress and
unless you&#8217;re root, that&#8217;s inaccessible.</p>

<h2>PHP config</h2>

<p>https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04</p>

<p>They want me to change <code>cgi.fix_pathinfo</code> to 0, else it will be fuzzy
match a php file for processing, a potential security risk.</p>

<p>Then I have to change PHP FPM to accept requests off a unix domain
socket:</p>

<pre><code>listen = /var/run/php5-fpm.sock
</code></pre>

<p>Makes sense, otherwise it assumes the fast cgi server is localhost 9000.</p>

<p>So&#8230; does nginx spin up a FastCGI server? Is it part of nginx? Is it
just a protocol?</p>

<h2>System V Services</h2>

<p>You don&#8217;t directly start mysqld, you do</p>

<pre><code>service mysqld start
</code></pre>

<h2>CentOS</h2>

<p>http://en.wikipedia.org/wiki/CentOS</p>

<p>Largely a clone of Red Hat Enterprise Linux.</p>

<p>http://unix.stackexchange.com/questions/27323/is-centos-exactly-the-same-as-rhel</p>

<blockquote><p>CentOS is very close to being RHEL without the branding and support. In particular, the library versions are the same, so binaries that work on one will work on the other. The administration tools are the same and configured in similar ways. However, there are a few differences, as the two distributions sometimes apply different minor patches. For example, in this question, it was apparent that RHEL 5 and CentOS 5 apply different rules to identify files under /etc/cron.d.</p>

<p>In other words, at the level of your course, you can treat CentOS and RHEL as interchangeable. But if you needed to look up the precise behavior of a program in a corner of the man page, you may encounter differences.</p></blockquote>

<h2>Alice in Flames</h2>

<p>http://techblog.netflix.com/2014/11/nodejs-in-flames.html</p>

<p>Flame chart things I didn&#8217;t know:</p>

<ul>
<li>X axis isn&#8217;t necessarily passage of time; I think it is in Chrome but
doesn&#8217;t need to be for purposes of flame chart?</li>
<li>Width of a box is aggregate call time;</li>
</ul>


<p>Ehh I guess flame charts do different things? Seems that chrome X axis
is in order. But it doesn&#8217;t need to be, in the same way that the tree
view of calls isn&#8217;t in time order; you care about total elapsed time,
not passage of time.</p>

<h2>Heroku one-off dynos</h2>

<p>https://devcenter.heroku.com/articles/one-off-dynos</p>

<p>TL;dr heroku run console (and any other run) will use a one-off dyno.</p>

<h2>Sampling vs Tracing</h2>

<p>https://www.jetbrains.com/profiler/webhelp/Profiling_Guidelines__Choosing_the_Right_Profiling_Mode.html</p>

<p>Sampling vs Tracing.</p>

<p>TL;DR tracing is more expensive, affects perf, but is more accurate than
sampling.</p>

<h2>Wordpress Admin on SSL</h2>

<p>http://codex.wordpress.org/Administration_Over_SSL</p>

<p>If you&#8217;re reverse-proxying, you have to prevent loops via:</p>

<pre><code>define('FORCE_SSL_ADMIN', true);
if ($_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')
       $_SERVER['HTTPS']='on';
</code></pre>

<p>Remember that wp-config.php is going to be loaded on every stupid thing.
Right?</p>

<h2>Heroku buildpacks</h2>

<p>Integration-tested via <a href="https://github.com/heroku/hatchet">Hatchet</a>.</p>

<p>https://devcenter.heroku.com/articles/buildpack-api</p>

<ul>
<li>detect: determines whether to apply buildpack to app</li>
<li>compile: apply the transformations</li>
<li>release: provides metadata back to runtime&#8230;?</li>
</ul>


<p>If you want both a node and ruby setup, you can do</p>

<pre><code>https://github.com/ddollar/heroku-buildpack-multi
</code></pre>

<p>and point to the default heroku-provided buildpacks within a .buildpacks
file.</p>

<h2>nginx-buildpack</h2>

<p>https://github.com/ryandotsmith/nginx-buildpack/blob/master/bin/start-nginx</p>

<p>This is a pretty awesome file that uses lots of Linux-y IPC trickery to
get</p>

<p>You must put the following in your Procfile:</p>

<pre><code>web: bin/start-nginx bundle exec unicorn -c config/unicorn.rb
</code></pre>

<p>The start-nginx script spins up processes in the background; nginx
will wait for</p>

<h2>App server</h2>

<p>Unicorn, Puma, Rainbows, zbatery, etc. It&#8217;s the thing that listens to a
socket and runs your application code for you. Rails isn&#8217;t an app
server, but Puma running a rails app is. Rails is an app framework. Puma is
an app server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis B Hayes]]></title>
    <link href="http://machty.github.com/blog/2014/11/15/redis-b-hayes/"/>
    <updated>2014-11-15T13:16:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/11/15/redis-b-hayes</id>
    <content type="html"><![CDATA[<h2>Redis&#8217;n</h2>

<p>This and other notes based on Redis in Action.</p>

<p>Questions:</p>

<ul>
<li>is it really brag-worthy to say in-memory-store? It gets persisted to
disk anyway; don&#8217;t other DBs bring as much into memory as possible for
fast lookups?

<ul>
<li>A: other databases are &#8220;primarily on-disk&#8221; but of course yes memory
caching exists.</li>
</ul>
</li>
</ul>


<p>Relation to memcached:</p>

<ul>
<li>Similar efficiency based on in-memory lookups</li>
<li>Redis features 2 persistence strategies (memcached doesn&#8217;t persist I
guess?)</li>
<li>Redis supports strings + 4 other data structures; memcached is strings</li>
</ul>


<p>ZSETs are hash of string keys to floating points, can be queried by
order, ordered by their weight.</p>

<h2>Databases: row insertion (often) fast</h2>

<p>Because no need for a random read + random write; appending to a file
(what most DBs do) is fast.</p>

<h2>ACID</h2>

<p>Set of properties that guarantee reliable database transactions</p>

<ul>
<li>Atomicity - all or nothing</li>
<li>Consistency - transactions bring database from one valid state to another</li>
<li>Isolation - are partially completed transaction visible to others?</li>
<li>Durability - post-transaction, data is committed even in power loss</li>
</ul>


<h2>Fortnight</h2>

<p>Two weeks.</p>

<h2>Heroku database URL</h2>

<pre><code>postgres://username:password@ec2-xx-xx-xx-xx-xx.compute-1.amazonaws.com:5432/d45d81ucgm3205
</code></pre>

<p>It&#8217;s just username + password at some publicly accessible EC2 URL. Your
cherished postgres instances just live on some EC2 farm. What a crock.</p>

<h2>Docker</h2>

<p>Docker images are read-only templates. Use them to generate containers.
Build other shit on top of containers.</p>

<p>Docker has its own IANA port numbers for REST and secure REST API&#8230;
what does this actually mean?</p>

<p>http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=docker#DOCKER</p>

<p>AH OK I have some more ideas:</p>

<p>Boot2Docker is what you use to run Docker on Mac OS X. Why? Because
docker depends on linux kernel specifics. Boot2Docker runs a Virtual Box
instance of some Linux-y thing</p>

<pre><code># within the virtual instance
$ uname
Linux version 3.16.4-tinycore64 (root@39d2c877bc4f) (gcc version 4.7.2 (Debian 4.7.2-5) ) #1 SMP Thu Oct 23 16:14:24 UTC 2014
</code></pre>

<p>So with the Boot2Docker setup, when you run the <code>docker</code> command on a
Mac terminal, it has to jump through some hoops to run the docker
instance on the Linux virtual box:</p>

<pre><code>Mac `docker` command
Proxy through to docker:tcuser@192.168.59.103
Run `docker` command, which talks to 
docker daemon
</code></pre>

<p>So there&#8217;s no docker daemon on OS X; the only persistent docker thing
you&#8217;ll see is Virtual box instances running the docker virtual instance
that the actual docker daemon lives on:</p>

<pre><code> /Applications/VirtualBox.app/Contents/MacOS/VBoxHeadless --comment boot2docker-vm --startvm 798082c7-01d7-4a4f-89fc-1ebf70bc1a0a --vrde config
 /Applications/VirtualBox.app/Contents/MacOS/VBoxNetDHCP --ip-address 192.168.59.99 --lower-ip 192.168.59.103 --mac-address 08:00:27:93:D3:BC --netmask 255.255.255.0 --network HostInterfaceNetworking-vboxnet0 --trunk-name vboxnet0 --trunk-type netadp --upper-ip 192.168.59.254
</code></pre>

<p>You can ssh into the docker VM box. Either w password or reusing the key
they generate for you when you install boot2docker; put this in
~/.ssh/config</p>

<pre><code>Host docker
  HostName 192.168.59.103
  User docker
  IdentityFile "/Users/machty/.ssh/id_boot2docker"
  IdentitiesOnly yes
</code></pre>

<p>(I realized later that there&#8217;s a convenient command for this:
<code>boot2docker ssh</code>&#8230; whoops!)</p>

<p>So with this config in place I&#8217;m guessing that I can either run
<code>docker version</code> or <code>ssh docker docker version</code> and see the same
thing. BOOYA both produce:</p>

<pre><code>Client version: 1.3.1
Client API version: 1.15
Go version (client): go1.3.3
Git commit (client): 4e9bbfa
OS/Arch (client): linux/amd64
Server version: 1.3.1
Server API version: 1.15
Go version (server): go1.3.3
Git commit (server): 4e9bbfa
</code></pre>

<p>So anyway, you can run commands against a docker image. This spins up a
container, runs the command, and stops the container&#8230; does it delete
the container?</p>

<pre><code>docker ps --help
</code></pre>

<p>Nevermind that I&#8217;ll figure it out later. Let&#8217;s figure out how to get a
Redis container running:</p>

<pre><code>https://registry.hub.docker.com/_/redis/
</code></pre>

<p>Use <code>docker build</code> to build from a Dockerfile, which kinda explains how
it ends up getting mounted to the outside world. So this is how you can
just have a docker instance of a thing that you can run commands
against, even in a Mac OS X setting? I know nothing, Jon Snow.</p>

<p>https://docs.docker.com/examples/running_redis_service/</p>

<pre><code>FROM        ubuntu:12.10
RUN         apt-get update &amp;&amp; apt-get install -y redis-server
EXPOSE      6379
ENTRYPOINT  ["/usr/local/bin/my-dumbass-redis-server"]
</code></pre>

<p>So this starts with the ubuntu:12.10 image, installs redis into the
container created from that image, exposes 6379&#8230; to&#8230;? What does this
mean?</p>

<blockquote><p>The EXPOSE instructions informs Docker that the container will listen on the specified network ports at runtime. Docker uses this information to interconnect containers using links (see the Docker User Guide). Note that EXPOSE only works for inter-container links. It doesn&#8217;t make ports accessible from the host. To expose ports to the host, at runtime, use the -p flag.</p></blockquote>

<p>From http://docs.docker.com/reference/builder/</p>

<p>So it&#8217;s exposed if we&#8217;re linking containers but not someone exposed to
the host app.</p>

<p>Ah I tried</p>

<pre><code>docker run -i --entrypoint=/usr/bin/redis-server dcf91
</code></pre>

<p>and then I couldn&#8217;t ctrl-C because of, something, but if i do</p>

<pre><code>docker run -it --entrypoint=/usr/bin/redis-server dcf91
</code></pre>

<p>then the -t option will attach a pseudo TTY and I can do it. This
stuff is so cray cray. Actually I lied ctrl-C doesn&#8217;t work for TODO
reasons, but Ctrl-P + Ctrl-Q detaches you from it? Seems good.</p>

<p>OK but if I do</p>

<pre><code>docker run -it -p 9191:6379 --entrypoint=/usr/bin/redis-server dcf91
</code></pre>

<p>this will run in interactive mode with ctrl-p ctrl-q supporting
detachability, mapping the container 6379 (default redis port) to the
host port 9191, and overriding the entrypoint because I didn&#8217;t know what
I was doing in the Dockerfile. I should have left it at the default
/usr/bin/redis-server because that&#8217;s where apt-get will put it.</p>

<p>ANYWAY the mapping works, but the problem is i have to SSH into the
docker host VirtualBox first to see it. How do I get beyond the
Boot2Docker wall? Wait I know I&#8217;ll just fuckin use some SSH magic.
Tunnels n shit.</p>

<pre><code>ssh docker -L 9191:localhost:9191
</code></pre>

<p>ah but this will open a login shell, which I don&#8217;t need/want for what
I&#8217;m doing:</p>

<pre><code>ssh docker -N -L 9191:localhost:9191
</code></pre>

<p>The -N stands for &#8220;Do not execute a remote command&#8221;</p>

<p>After which point I could just redis-cli but since I&#8217;m brutally low
level I&#8217;ll do</p>

<pre><code>$ nc localhost 9191
SET WAT WOOT
+OK
GET WAT
$4
WOOT
</code></pre>

<p>Booooooya. So cool.</p>

<p>OK gonna be an idiot. SSH all the way. Is that possible? It means being
able to SSH into container&#8230; sounds like you can&#8217;t do that without
going through</p>

<h2>Docker detach</h2>

<p>Docker attaching/detaching is pretty weird. I don&#8217;t know the rationale
behind it but they make it very easy to attach to a box but then not be
able to attach. Basically you have to always pass -it to run and then
can use ctrl-P ctrl-Q to detach.</p>

<p>Or, you can <code>kill -9</code> the attached processed; if you you just do <code>kill</code>,
that sends SIGTERM and that proxies through and closes the shitty
process, but again Ctrl-C doesn&#8217;t use it.</p>

<h2>Docker forwarding for OS X</h2>

<p>This is a great article</p>

<p>http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide</p>

<p>Things learned:</p>

<ul>
<li><code>boot2docker ssh</code></li>
<li>Add <code>dockerhost</code> to /etc/hosts</li>
<li>Use <code>nsenter</code>

<ul>
<li><code>sudo nsenter -m -u -n -i -p -t $PID</code>

<ul>
<li><code>-m</code> use mount namespace of target process</li>
<li><code>-u</code> use UTS namespace of target process (UTS stands for time-sharing? legacy unix thing?)</li>
<li><code>-n</code> use network namespace of target process</li>
<li><code>-i</code> IPC</li>
<li><code>-i</code> IPC</li>
<li><code>-p</code> IPC</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>LXC Containers (vs Docker)</h2>

<p>https://linuxcontainers.org/</p>

<p>Better chroot, comparable to docker containers. Ways of containing
processes, resources, etc., dependent on modern linux kernel features,
mostly on process namespacing.</p>

<p>Excellent article comparing to Docker: http://www.flockport.com/lxc-vs-docker/</p>

<p>Things learned:</p>

<ul>
<li>yuno virtualization?

<ul>
<li>because of performance cost</li>
</ul>
</li>
<li>LXC and Docker are fast</li>
<li>Lightweight VMs</li>
<li>Is Docker a lightweight VM?</li>
</ul>


<p>A Docker container runs a single process:</p>

<blockquote><p>Docker restricts the container to a single process only. The default docker baseimage OS template is not designed to support multiple applications, processes or services like init, cron, syslog, ssh etc. As you can imagine this introduces a certain amount of complexity and has huge implications for day to day usage scenarios. Since current architectures, applications and services are designed to operate in normal multi process OS environments you would need to find a Docker way to do things or use tools that support Docker. When it comes to applications for a LAMP container you would need to build 3 containers that consume services from each other, a PHP container, an Apache container and a MySQL container. Can you build all 3 in one container? You can, but there is no way to run php-fpm, apache and mysqld in the same container without a shell script or install a separate process manager like runit or supervisor.</p></blockquote>

<p>http://docs.docker.com/articles/using_supervisord/</p>

<blockquote><p>Traditionally a Docker container runs a single process when it is launched, for example an Apache daemon or a SSH server daemon.</p></blockquote>

<p>This is the entry point. Note that <code>ubuntu</code> has no entry point. Not sure
if it&#8217;s possible to use <code>run</code> with a container that has an entry point,
since the entry point is the process that gets run.</p>

<p>So it should be possible for me to run an ubuntu netcat and portforward
at the same time:</p>

<p>All from Mac:</p>

<pre><code>$ docker run -i -p 9292:9292 --expose=[9292] ubuntu:14.04 nc -l 0.0.0.0
</code></pre>

<p>9292</p>

<p>Separate Mac terminal window:</p>

<pre><code>$ nc dockerhost 9292
</code></pre>

<p>And now these two assholes talk to each other!</p>

<p>Here are all the options I used</p>

<ul>
<li><code>-i</code>: run container interactively with terminal attached; without
this, nc immediately closes once someone connects to it since STDIN is
presumably dev null</li>
<li><code>-p 9292:9292</code>, map docker host port 9292 to container port 9292</li>
<li><code>--expose=[9292]</code> open the firewall since it wasn&#8217;t listed as exposed
in the dockerfile</li>
</ul>


<p>Shit is SO COOL.</p>

<h2>Docker vs Heroku</h2>

<p>Hmm, not even worth comparing.</p>

<h2>Nested SSH tunnels</h2>

<p>http://superuser.com/questions/96489/ssh-tunnel-via-multiple-hops</p>

<p>Map localhost:9998 to host2&#8217;s port 22.</p>

<pre><code>ssh -L 9998:host2:22 -N host1
</code></pre>

<p>Map localhost:9999 to blahbalhbablh you get the picture.</p>

<pre><code>ssh -L 9999:localhost:1234 -N -p 9998 localhost
</code></pre>

<p>Shit is sooooo crazy. I love this stuff.</p>

<h2>ProxyCommand</h2>

<p>From <code>SSH_CONFIG(5)</code>.</p>

<pre><code> ProxyCommand
         Specifies the command to use to connect to the server.  The command string
         extends to the end of the line, and is executed with the user's shell.  In the
         command string, any occurrence of `%h' will be substituted by the host name to
         connect, `%p' by the port, and `%r' by the remote user name.  The command can be
         basically anything, and should read from its standard input and write to its
         standard output.  It should eventually connect an sshd(8) server running on some
         machine, or execute sshd -i somewhere.  Host key management will be done using
         the HostName of the host being connected (defaulting to the name typed by the
         user).  Setting the command to ``none'' disables this option entirely.  Note
         that CheckHostIP is not available for connects with a proxy command.

         This directive is useful in conjunction with nc(1) and its proxy support.  For
         example, the following directive would connect via an HTTP proxy at 192.0.2.0:

            ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p
</code></pre>

<p>So this proxies through an already established HTTP Connect proxy at
192.0.2.0:8080. That&#8217;s so awesome.</p>

<p>netcat even brags of this:</p>

<pre><code> Common uses include:

       o   simple TCP proxies
       o   shell-script based HTTP clients and servers
       o   network daemon testing
       o   a SOCKS or HTTP ProxyCommand for ssh(1)
       o   and much, much more
</code></pre>

<h2>get.docker.com</h2>

<pre><code>curl https://get.docker.com
</code></pre>

<p>It returns a bootstrapping shell script for setting up docker.</p>

<p>You can <code>#include</code> it when booting an EC2 instance. Pretty cool.</p>

<h2>Basic Authentication</h2>

<p>If I spin up a stupid netcat server</p>

<pre><code>nc -l localhost 9191
</code></pre>

<p>and then query it from Chrome</p>

<pre><code>http://user:password@localhost:9191
</code></pre>

<p>Here&#8217;s what I see:</p>

<pre><code>GET / HTTP/1.1
Host: localhost:9191
Connection: keep-alive
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Cookie: blahblah
</code></pre>

<p>No reference to <code>user</code> or <code>password</code>. Which means that this information
isn&#8217;t sent up front unless the server requests basic authentication by
first sending back a 401 with the <code>WWW-Authenticate</code> header, after which
point the user and password will be sent.</p>

<p>And because it&#8217;s sent as a header (user:pass in base64) it&#8217;s encrypted
if sent over TLS. But it&#8217;ll be plaintext in your address bar :).</p>

<h2>SSH randomart</h2>

<p>You see it when you create a key pair. Why? Because it&#8217;s just an easy
ass visual way to compare keys rather than some Base64 shit.</p>

<p>You can see the randomart for an existing key by printing the
fingerprint in verbose mode:</p>

<pre><code>$ ssh-keygen -lv -f ~/.ssh/id_boot2docker.pub
2048 b2:3e:e4:d3:c1:9d:1b:75:46:0b:53:aa:18:6b:c7:c6  machty@machty.home (RSA)
+--[ RSA 2048]----+
|             ..  |
|            o..  |
|        .   .+ . |
|         * .. +  |
|      ..S.Eo o   |
|      .+oo+      |
|     o.. . o     |
|     .+ . .      |
|      .o         |
+-----------------+
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shananananananananeeees]]></title>
    <link href="http://machty.github.com/blog/2014/11/11/shananananananananeeees/"/>
    <updated>2014-11-11T06:43:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/11/11/shananananananananeeees</id>
    <content type="html"><![CDATA[<h2>Linux hierachy layout</h2>

<p><code>man hier</code> answers these questions.</p>

<p>Basically, <code>/usr</code> is a secondary hierarchy for libs/bins/other things
that aren&#8217;t strictly required for single-user mode (e.g. root).</p>

<p><code>/usr/local</code> is tertiary. Things you compile yourself might belong
there. Typically implies lower level of permissions. Rationale for
separting from <code>/usr</code> is that <code>/usr</code> might be some read-only thing
mounted and shared across machines, ready to be swapped out and upgraded
at any time, but <code>/usr/local</code> is crap that you can fuck wit.</p>

<p><code>brew</code> expects to install in the tertiary <code>/usr/local</code> directory:
<code>/usr/local/Cellar</code>. So you can have multiple versions of executables
installed via brew, but only one wins on the command line by way of
symlinks within <code>/usr/local/bin</code> pointing to specific executables in
<code>/usr/local/Cellar/projectname/1.23/bleh</code>. Symlinks to the rescue.</p>

<pre><code>$ sudo brew install wat
Error: Cowardly refusing to `sudo brew install`
You can use brew with sudo, but only if the brew executable is owned by root.
However, this is both not recommended and completely unsupported so do so at
your own risk.
</code></pre>

<p>I guess this is nice since it prevents all the ugliness of installing
shared executables at root privileges when they&#8217;re not needed.</p>

<h2>Raptor</h2>

<p>Ruby server. Apparently fast.</p>

<p>http://www.rubyraptor.org/how-we-made-raptor-up-to-4x-faster-than-unicorn-and-up-to-2x-faster-than-puma-torquebox/#zero_copy</p>

<ul>
<li>Uses nginx HTTP parser

<ul>
<li>due to battle-tested reliability</li>
<li>could have used PicoHTTPParser, but not much community adoption
though it claims being faster than nginc</li>
<li>could have used Mongrel&#8217;s Ragel HTTP parser, but lots of
Ruby-specific</li>
</ul>
</li>
<li>Comes w reverse proxy buffer, such as what nginx has but hyper
optimized to typical ruby raptor workflows</li>
<li>Multi-process</li>
<li>Sounds like multi-threadedness will be a paid solution that comes
later.</li>
</ul>


<p>The C++ component of Raptor is the server that consists of:</p>

<ul>
<li>Buffering reverse proxy</li>
<li>HTTP parser</li>
<li>HTTP server</li>
</ul>


<p>Apparently these are all part of the same thing.</p>

<h2>Puma Lopez mode</h2>

<p>Puma Ruby server comes with a Lopez mode named after <code>@brianmario</code> who
suggested it. It&#8217;s a tcp-only (no http) version of puma. To that guy&#8217;s
knowledge Puma is the only threaded/pre-forking Ruby server that offers
such a mode.</p>

<h2>nginx Reverse proxy buffer</h2>

<p>http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffering</p>

<p>I think it&#8217;s on by default, but you can disable it, configure buffer
sizes, or enable with <code>X-Accel-Buffer</code>.</p>

<h2>nginx in general</h2>

<ul>
<li>master process

<ul>
<li>manages worker process, reloads config files, etc</li>
</ul>
</li>
<li>worker processes

<ul>
<li>process requests</li>
</ul>
</li>
</ul>


<p>conf files are directives, either one liners or blocks.</p>

<ul>
<li>Block directives

<ul>
<li>same structure as normal directives</li>
<li>but have braces</li>
<li>if braces allow directives inside of them, it&#8217;s called a context</li>
</ul>
</li>
</ul>


<p>Contexts:</p>

<ul>
<li>main

<ul>
<li>events</li>
<li>http

<ul>
<li>server

<ul>
<li>location</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Catch up or move along</h2>

<p>http://unlearningeconomics.wordpress.com/2012/04/03/the-keenkrugman-debate-a-summary/</p>

<h2>30s write delay</h2>

<p>http://oldblog.antirez.com/post/redis-persistence-demystified.html</p>

<p>http://stackoverflow.com/questions/13650134/after-how-many-seconds-are-file-system-write-buffers-typically-flushed</p>

<p>http://brad.livejournal.com/2116715.html</p>

<p>Modified kernel buffers (of files on disk) wait up to 30s to be flushed
to disk. You can &#8220;force&#8221; it was fsync. But then your disks might lie to
you about what actually was persisted (verifiable via a test involving
pulling the power cord).</p>

<h2>Redis persistence</h2>

<p>http://oldblog.antirez.com/post/redis-persistence-demystified.html</p>

<p>It&#8217;s in-memory key-value, so does it ever get saved to disk?</p>

<p>Why yes it does, via:</p>

<ul>
<li>snapshotting; configure min writes since last sync, or a timeout, and
it&#8217;ll persist a snapshot to a .rdb file. Half completed transactions
(via MULTI/EXEC) don&#8217;t show up of course.</li>
<li>append-only AOF files

<ul>
<li>get rewritten based on memory contents if file grows too large</li>
<li>possible for an empty redis db (written and then deleted keys) has a
large AOF file.</li>
</ul>
</li>
</ul>


<p>Both can be enabled; it&#8217;s nice to have rdb files that you can back up.</p>

<blockquote><p>AOF rewrites are generated only using sequential I/O operations, so the whole dump process is efficient even with rotational disks (no random I/O is performed). This is also true for RDB snapshots generation. The complete lack of Random I/O accesses is a rare feature among databases, and is possible mostly because Redis serves read operations from memory, so data on disk does not need to be organized for a random access pattern, but just for a sequential loading on restart.</p></blockquote>

<p>Interesting, so usually a database that stores to disk would need to
organize data for efficient random access, but in Redis-land, everything
is loaded into memory.</p>

<p>This confused me:</p>

<blockquote><p>One of the additional benefits of RDB is the fact for a given database size, the number of I/Os on the system is bound, whatever the activity on the database is. This is a property that most traditional database systems (and the Redis other persistence, the AOF) do not have.</p></blockquote>

<p>In other words, AOFs can be large even for empty databases (due to
deletions).</p>

<p>appendfsync:</p>

<ul>
<li>appendfsync no

<ul>
<li>syncs at kernel whim (30 s on linux)</li>
</ul>
</li>
<li>appendfsync everysec

<ul>
<li>average 1 sec, at most 2 delay before buffers sent to kernel and sync&#8217;d</li>
</ul>
</li>
<li>appendfsync always

<ul>
<li>sync before each client ack</li>
<li>slowest</li>
</ul>
</li>
</ul>


<p>Default is <code>appendfsync everysec</code>, which is pretty good durability
without murdering speed.</p>

<blockquote><p>What Redis implements when appendfsync is set to always is usually called group commit. This means that instead of using an fsync call for every write operation performed, Redis is able to group this commits in a single write+fsync operation performed before sending the request to the group of clients that issued a write operation during the latest event loop iteration.</p></blockquote>

<p>Hmm that&#8217;s interesting&#8230; Redis has an event loop that can answer
multiple clients in a single iteration?</p>

<p>http://pauladamsmith.com/articles/redis-under-the-hood.html#event-loop</p>

<p>Ah, it uses epoll and the like; multiple sockets and events can have
arrived in one go, so it loops through all of those, does the necessary
reads, etc.</p>

<pre><code>/* Include the best multiplexing layer supported by this system.
 * The following should be ordered by performances, descending. */
#ifdef HAVE_EVPORT
#include "ae_evport.c"
#else
    #ifdef HAVE_EPOLL
    #include "ae_epoll.c"
    #else
        #ifdef HAVE_KQUEUE
        #include "ae_kqueue.c"
        #else
        #include "ae_select.c"
        #endif
    #endif
#endif
</code></pre>

<h2>UTF-8</h2>

<p>http://en.wikipedia.org/wiki/UTF-8</p>

<p>I can&#8217;t believe I never sat down and read this shit.</p>

<ul>
<li>backwards compat w ASCII since ascii only used the 7 bits (signed
char) to determine character.</li>
<li>81% of webpages use this encoding</li>
<li>ASCII is valid UTF-8</li>
<li>UTF-8 is variable length; the 8th bit determines length</li>
<li>there are invalid byte sequences (that you have to look out for when
reading files / raw shit)</li>
</ul>


<h2>ISO/IEC 8859</h2>

<p>http://en.wikipedia.org/wiki/ISO/IEC_8859</p>

<ul>
<li>single byte</li>
<li>all ascii is ISO</li>
<li>Seems like standard alphabet is preserved, but other 8 bit range stuff
differs.</li>
</ul>


<h2>Ruby string encoding</h2>

<p>http://stackoverflow.com/questions/20521371/set-utf-8-as-default-for-ruby-1-9-3</p>

<ul>
<li>Ruby 1.8 and below didn&#8217;t knew the concept of string encodings at all. Strings were more or less byte arrays.</li>
<li>Ruby 1.9: default string encoding is US_ASCII everywhere.</li>
<li><p>Ruby 2.0 and above: default string encoding is UTF-8.</p>

<p>  $ ruby -e &#8220;puts &#8221;.encoding&#8221;
  UTF-8</p></li>
</ul>


<h2>hiredis</h2>

<p>https://github.com/redis/hiredis</p>

<p>Presumably stands for &#8220;high(ish) level redis lib&#8221;.</p>

<p>The Ruby gem can optionally use this as a driver but it comes at the
expense of portability (JRuby can&#8217;t use this driver). But by default
Ruby just uses Ruby sockets to talk to redis.</p>

<h2>Public wifi</h2>

<p>Is there any security difference between a password-less public wifi and
one in which literally everyone knows the password?</p>

<h2>/private on os X</h2>

<p>http://unix.stackexchange.com/questions/63555/what-is-darwins-private-directory-for</p>

<p>fun fact: <code>/etc</code> is a symlink for <code>/private/etc</code> on OS X. Wacky.</p>

<h2>WEP, WPA, WPA2</h2>

<p>http://www.howtogeek.com/167783/htg-explains-the-difference-between-wep-wpa-and-wpa2-wireless-encryption-and-why-it-matters/</p>

<ul>
<li>WEP (Wired Equivalent Privacy)

<ul>
<li>oldest</li>
<li>WEP 128 most common even though there&#8217;s 256</li>
<li>major security vulnerabilities based on RC4 stream cipher cracking</li>
<li>on busy network, cracking could happen within a minute; if network
is slow, attacker can send fake packets and get replies that it can
use to crack over time.</li>
<li>passive attacks: you have to collect information. Gather shit.</li>
<li>Shamir (from RSA fame) was one of the crackahs.</li>
</ul>
</li>
<li>WPA

<ul>
<li>PSK (pre-shared key) is most common</li>
<li>256 min (over 64 and 128 WEP garbage)</li>
<li>message integrity checks (detects some MITM)</li>
<li>TKIP (temporal key integrity protocol) is predecessor to AES</li>
<li>too tied to WEP (meant for firmware progressive upgrades) and hence
prone to some WEP vulnerabilities, hence:</li>
</ul>
</li>
<li>WPA2

<ul>
<li>AES</li>
<li>CCMP (replacement for TKIP? but with TKIP fallback)</li>
</ul>
</li>
</ul>


<p>Just disable a thing called WPS and you&#8217;ll be good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mr Noah]]></title>
    <link href="http://machty.github.com/blog/2014/11/08/mr-noah/"/>
    <updated>2014-11-08T08:29:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/11/08/mr-noah</id>
    <content type="html"><![CDATA[<h2>Root/apex/base/DNS and things finally clicking</h2>

<p>They the same thing.</p>

<p>http://stackoverflow.com/a/16041655/914123</p>

<p>Also I like</p>

<pre><code>(Note: root, base, apex domains are all the same thing. Using interchangeably for google-foo.)
</code></pre>

<p>CNAME:</p>

<ul>
<li>Canonical Name record: Aliases another name</li>
<li>Use case: define CNAME for <code>ftp</code>, <code>www</code>, etc to point to the
<code>example.com</code> A record so that only the A record&#8217;s IP needs to
change</li>
<li>Can point to any ol domain, not just within <code>example.com</code>. Heroku
and other cloud services use this to have a CNAME pointing to
a domain name under the control of a dynamic name server that
can dish out different A name records (hence different IPs)</li>
<li>Can&#8217;t define CNAMEs for apex domains (e.g. <code>example.com</code>).</li>
<li>Can&#8217;t be shared with other records for that name, e.g. MX. CNAME wins
and fucks over the others, I think.</li>
</ul>


<p>A record:</p>

<ul>
<li>Points to an IP address.</li>
<li>Terminates DNS lookups</li>
</ul>


<p>ALIAS/ANAME:</p>

<p>http://blog.dnsimple.com/2011/11/introducing-alias-record/</p>

<p>http://support.dnsimple.com/articles/differences-between-a-cname-alias-url/</p>

<blockquote><p>Before going further into the details, it’s important to know that A
and CNAME records are standard DNS records, whilst ALIAS and URL
records are custom DNS records provided by DNSimple. Both of them
are translated internally into A records to ensure
compatibility with the DNS protocol.</p></blockquote>

<p>Aliases can coexist with other records at that level (so someone asking
for MX gets MX if defined for that name rather than resolving
elsewhere).</p>

<p>Ok, so DNS hosts just returns CNAMEs and A records (and others too), and
DNS hosts like DNSimple and DNS Made Easy can provide custom record
types that ultimately translate to A records. Makes sense.</p>

<p>So what about URL?</p>

<blockquote><p>This type of record uses an HTTP redirect to redirect visitors from a domain to a web site.</p></blockquote>

<p>So the A record returned from a URL record on DNSimple is going to point
to one of DNSimple&#8217;s server IPs. I set one up for
snaggletooth.alexmatchneer.com => http://www.example.com.</p>

<pre><code>$ curl -H "Host: snaggletooth.alexmatchneer.com" 50.31.209.254
&lt;a href="http://www.example.com"&gt;Moved Permanently&lt;/a&gt;
</code></pre>

<p>I also added a URL record for ugly.alexmatchneer.com to point to some
random s3 image and discovered that browsers in fact follow redirects
for images, hence this works:</p>

<pre><code>&lt;img src="http://ugly.alexmatchneer.com"/&gt;
</code></pre>

<p><img src="http://ugly.alexmatchneer.com" alt="" /></p>

<p>DNSimple is also nice enough to append the path to whatever its
forwarding, so <code>ugly.alexmatchneer.com/wat</code> forwards to the destination
specified in the URL record + <code>/wat</code>.</p>

<h2><code>dig</code> recursion</h2>

<p>Either you tell your DNS server to recurse for you, or you do it
yourself.</p>

<p>Name server does it for you (all these options just get rid of crufty
shit):</p>

<pre><code>dig +noall +answer +additional +recurse alexmatchneer.com
alexmatchneer.com.      3544    IN      A       23.235.39.133
</code></pre>

<p>You do it yourself:</p>

<pre><code>dig +noall +answer +additional +norecurse alexmatchneer.com
FWDR-68.FWDR-237.FWDR-161.FWDR-12. 3600 IN A    68.237.161.12
FWDR-71.FWDR-243.FWDR-0.FWDR-12. 3600 IN A      71.243.0.12
</code></pre>

<p>FWDR is a FiOS thing. These are from the additional section. So I guess
it means I should call them. But at what point do I go through
Verizon&#8217;s DNS? I thought I used like 4.2.2.2?</p>

<pre><code>cat /etc/resolve.conf

#
# Mac OS X Notice
#
# This file is not used by the host name and address resolution
# or the DNS query routing mechanisms used by most processes on
# this Mac OS X system.
#
# This file is automatically generated.
#
domain home
nameserver 192.168.1.1
</code></pre>

<p>I guess DNS is decided when I connect to a router. Ahhh I guess routers
perform DNS? Ok ok ok what if I tell <code>dig</code> which name server to query?</p>

<pre><code>$ dig +noall +answer +additional +norecurse @4.2.2.2 alexmatchneer.com
i.gtld-servers.net.     109080  IN      A       192.43.172.30
k.gtld-servers.net.     109080  IN      A       192.52.178.30
m.gtld-servers.net.     166299  IN      A       192.55.83.30
h.gtld-servers.net.     114566  IN      A       192.54.112.30
b.gtld-servers.net.     133590  IN      A       192.33.14.30
b.gtld-servers.net.     118573  IN      AAAA    2001:503:231d::2:30
a.gtld-servers.net.     159638  IN      A       192.5.6.30
a.gtld-servers.net.     113094  IN      AAAA    2001:503:a83e::2:30
e.gtld-servers.net.     113091  IN      A       192.12.94.30
f.gtld-servers.net.     166299  IN      A       192.35.51.30
j.gtld-servers.net.     166299  IN      A       192.48.79.30
g.gtld-servers.net.     109080  IN      A       192.42.93.30
d.gtld-servers.net.     101447  IN      A       192.31.80.30
l.gtld-servers.net.     136989  IN      A       192.41.162.30
</code></pre>

<p>WORD ok top level domains, makes sense. I bet if I let it recurse for me
it&#8217;ll gimme what I want:</p>

<pre><code>$ dig +noall +answer +additional +recurse @4.2.2.2 alexmatchneer.com
alexmatchneer.com.      3600    IN      A       23.235.46.133
</code></pre>

<p>Word. And if I use my router&#8217;s IP:</p>

<pre><code>dig +noall +answer +additional +norecurse @192.168.1.1 alexmatchneer.com
FWDR-68.FWDR-237.FWDR-161.FWDR-12. 3600 IN A    68.237.161.12
FWDR-71.FWDR-243.FWDR-0.FWDR-12. 3600 IN A      71.243.0.12
</code></pre>

<p>It refers me to some Verizon name server shit. Which is why if I type in
some nonsense domain name, I get redirected to some shitty Verizon
search page. Regardless of whether I&#8217;m in Chrome or in curl:</p>

<pre><code>$ curl oinasiodasd.asdasiodasod.asdoi
&lt;!DOCTYPE ... blah blah http://searchassist.verizon.com/
</code></pre>

<p>So what if I enable VPN? Prediction: my VPN provider will be making
queries on my behalf, presumably not behind some Verizon name server
shit.</p>

<pre><code>$ curl oinasiodasd.asdasiodasod.asdoi
curl: (6) Could not resolve host: oinasiodasd.asdasiodasod.asdoi
</code></pre>

<p>Basically (annoying caching hangover aside) dig will skip the FiOS
forwarding/recursing if I&#8217;m on VPN. All this makes sense. Perfect
sense. COMPLICATED THOUGH JESUS.</p>

<h2>VPNs and private network IPs</h2>

<p>ICANN set aside numbers like 192.168&#8230; and 10&#8230; for private networks.
VPN doesn&#8217;t interfere with that shit because it&#8217;s within that range.
Derp.</p>

<p>Ahhhh that does though that I could still use my router as a DNS, no?</p>

<p>VPN enabled:</p>

<pre><code>$ dig .
;; SERVER: 8.8.4.4#53(8.8.4.4)
</code></pre>

<p>VPN disabled:</p>

<pre><code>$ dig .
;; SERVER: 192.168.1.1#53(192.168.1.1)
</code></pre>

<p>And even w VPN enabled I could still query my Verizon router&#8217;s DNS</p>

<pre><code>$ dig +norecurse @192.168.1.1 .
FWDR-68.FWDR-237.FWDR-161.FWDR-12. 3600 IN A    68.237.161.12
FWDR-71.FWDR-243.FWDR-0.FWDR-12. 3600 IN A      71.243.0.12
</code></pre>

<p>So who the hell decides where I query from?</p>

<h2>DHCP</h2>

<p>Dynamic Host Configuration Protocol.</p>

<p>When you connect to a network, this tells you all sorts of useful
defaults:</p>

<blockquote><p>The DHCP server manages a pool of IP addresses and information about client configuration parameters such as default gateway, domain name, the name servers, and time servers.</p></blockquote>

<p>When you connect to a network, the DHCP broadcasting stuff happens and
you wind up with an IP, bingo bango bongo. When you connect to a network
but can&#8217;t establish an IP, it&#8217;s probably because DHCP hasn&#8217;t finished
yet.</p>

<p>But this is where 192.168.1.1 as a name server comes from; the Verizon
router will use DHCP to tell you to use it. Other routers might do other
things. When I tether to my phone it gives a different DNS.</p>

<h2>TXT Records</h2>

<pre><code>$ dig +short borflex.alexmatchneer.com TXT
"Another dumb thing"
"I am a big dumb ridiculous idiot!"
</code></pre>

<h2>Nested subdomains</h2>

<p>For the <code>alexmatchneer.com</code> domain, I added a CNAME for
<code>e.x.c.alexmatchneer.com</code> to point to expresscheckoutapp.com
and now it just works to nav to http://e.x.c.alexmatchneer.com</p>

<h2>Route 53</h2>

<p>Heyyyy that&#8217;s the port that DNS servers use.</p>

<h2>Rubydns</h2>

<p>https://github.com/ioquatix/rubydns</p>

<p>Pretty cool. You can make your own DNS server. I got mine to tell me I
was an idiot:</p>

<pre><code>$ dig +short @54.165.102.18 barflonkula TXT
"You are a big idiot"
</code></pre>

<h2>SOA Records</h2>

<h2>Pointilism</h2>

<p>Painting with dots. Like that Ferris Bueller painting, or some of Van
Gogh&#8217;s self portraits.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jaily Dournal]]></title>
    <link href="http://machty.github.com/blog/2014/11/06/jaily-dournal/"/>
    <updated>2014-11-06T16:00:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/11/06/jaily-dournal</id>
    <content type="html"><![CDATA[<h2><code>rails c --sandbox</code></h2>

<p>Rolls back changes on exit.</p>

<pre><code>(0.4ms)  SAVEPOINT active_record_1
(0.2ms)  ROLLBACK TO SAVEPOINT active_record_1
</code></pre>

<p>Wraps in a transaction which is why you see the above rather than BEGIN
statements</p>

<h2>Temporarily change $stdout</h2>

<p>I wanted to get pretty-print output in Ruby. Solution, using <code>rails c</code>:</p>

<pre><code>f = File.open('tmp', 'w')
stdout_old = $stdout
$stdout = f
pp hash
$stdout = $stdout_old # could also do File.open(1)
</code></pre>

<h2>Review: difference between pipes and sockets</h2>

<ul>
<li>pipes came first in early 70s</li>
<li>pipes are always stream oriented; sockets can also be datagram
oriented.</li>
<li>pipes are unidirectional (and require two pipes for back and forth).
sockets are bi-directional.</li>
</ul>


<h2>FAT doesn&#8217;t support hardlinking</h2>

<p>I was going to try ember-cli-ramdisk mounting on file systems other than
HFS+, hoping that one FS would support more efficient reuse of freed
blocks, which might minimize paging on the grounds that if ramdisks
blocks are being reused, then additional ramdisk file allocations won&#8217;t
occur, hence memory lookups won&#8217;t occur, hence paging can&#8217;t happen.</p>

<p>Anyway, got initial builds working in FAT32, but incremental rebuilds
didn&#8217;t work due to hard-linking:</p>

<p>https://github.com/rlivsey/broccoli-concat/blob/master/index.js#L86</p>

<p>I thought we got rid of those, but then again the above use case is
fine, since hardlinks are only used concat output and not root files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSS Cards Against Humanity]]></title>
    <link href="http://machty.github.com/blog/2014/11/05/oss-cards-against-humanity/"/>
    <updated>2014-11-05T12:40:00-05:00</updated>
    <id>http://machty.github.com/blog/2014/11/05/oss-cards-against-humanity</id>
    <content type="html"><![CDATA[<p>Why not.</p>

<h2>Black Cards</h2>

<ul>
<li>&#8220;GamerGate: it&#8217;s actually about <code>__________</code>&#8221;</li>
<li>&#8220;Ember.js: a framework for creating <code>_________</code>&#8221;</li>
</ul>


<h2>White Cards</h2>

<ul>
<li>Ethics in video game journalism</li>
<li><h1>GamerGate</h1></li>
<li>Thought Leadership</li>
<li>Brogrammers</li>
<li>Cracking the Nut</li>
<li>Destroy All Software</li>
<li>Ember.js</li>
<li>AngularJS</li>
<li>React</li>
<li>Two-way data-binding</li>
<li>Unidirectional Data Flow</li>
<li>Handlebars templates</li>
<li>Functional reactive programming</li>
<li>Hacker News</li>
<li>Stability without Stagnation</li>
<li>Ambitious Web Applications</li>
<li>Thirsty Randos</li>
</ul>

]]></content>
  </entry>
  
</feed>
